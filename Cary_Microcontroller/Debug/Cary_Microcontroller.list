
Cary_Microcontroller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004400  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080044c0  080044c0  000144c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044f8  080044f8  0002003c  2**0
                  CONTENTS
  4 .ARM          00000000  080044f8  080044f8  0002003c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080044f8  080044f8  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044f8  080044f8  000144f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044fc  080044fc  000144fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  08004500  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  2000003c  0800453c  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  0800453c  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000de17  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001df5  00000000  00000000  0002de7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  0002fc70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b68  00000000  00000000  00030890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011bc1  00000000  00000000  000313f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e75d  00000000  00000000  00042fb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006d819  00000000  00000000  00051716  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bef2f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c84  00000000  00000000  000bef80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000003c 	.word	0x2000003c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080044a8 	.word	0x080044a8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000040 	.word	0x20000040
 8000104:	080044a8 	.word	0x080044a8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_f2uiz>:
 8000220:	219e      	movs	r1, #158	; 0x9e
 8000222:	b510      	push	{r4, lr}
 8000224:	05c9      	lsls	r1, r1, #23
 8000226:	1c04      	adds	r4, r0, #0
 8000228:	f000 fa10 	bl	800064c <__aeabi_fcmpge>
 800022c:	2800      	cmp	r0, #0
 800022e:	d103      	bne.n	8000238 <__aeabi_f2uiz+0x18>
 8000230:	1c20      	adds	r0, r4, #0
 8000232:	f000 f9bb 	bl	80005ac <__aeabi_f2iz>
 8000236:	bd10      	pop	{r4, pc}
 8000238:	219e      	movs	r1, #158	; 0x9e
 800023a:	1c20      	adds	r0, r4, #0
 800023c:	05c9      	lsls	r1, r1, #23
 800023e:	f000 f807 	bl	8000250 <__aeabi_fsub>
 8000242:	f000 f9b3 	bl	80005ac <__aeabi_f2iz>
 8000246:	2380      	movs	r3, #128	; 0x80
 8000248:	061b      	lsls	r3, r3, #24
 800024a:	469c      	mov	ip, r3
 800024c:	4460      	add	r0, ip
 800024e:	e7f2      	b.n	8000236 <__aeabi_f2uiz+0x16>

08000250 <__aeabi_fsub>:
 8000250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000252:	46ce      	mov	lr, r9
 8000254:	4647      	mov	r7, r8
 8000256:	0243      	lsls	r3, r0, #9
 8000258:	0a5b      	lsrs	r3, r3, #9
 800025a:	024e      	lsls	r6, r1, #9
 800025c:	00da      	lsls	r2, r3, #3
 800025e:	4694      	mov	ip, r2
 8000260:	0a72      	lsrs	r2, r6, #9
 8000262:	4691      	mov	r9, r2
 8000264:	0045      	lsls	r5, r0, #1
 8000266:	004a      	lsls	r2, r1, #1
 8000268:	b580      	push	{r7, lr}
 800026a:	0e2d      	lsrs	r5, r5, #24
 800026c:	001f      	movs	r7, r3
 800026e:	0fc4      	lsrs	r4, r0, #31
 8000270:	0e12      	lsrs	r2, r2, #24
 8000272:	0fc9      	lsrs	r1, r1, #31
 8000274:	09b6      	lsrs	r6, r6, #6
 8000276:	2aff      	cmp	r2, #255	; 0xff
 8000278:	d05b      	beq.n	8000332 <__aeabi_fsub+0xe2>
 800027a:	2001      	movs	r0, #1
 800027c:	4041      	eors	r1, r0
 800027e:	428c      	cmp	r4, r1
 8000280:	d039      	beq.n	80002f6 <__aeabi_fsub+0xa6>
 8000282:	1aa8      	subs	r0, r5, r2
 8000284:	2800      	cmp	r0, #0
 8000286:	dd5a      	ble.n	800033e <__aeabi_fsub+0xee>
 8000288:	2a00      	cmp	r2, #0
 800028a:	d06a      	beq.n	8000362 <__aeabi_fsub+0x112>
 800028c:	2dff      	cmp	r5, #255	; 0xff
 800028e:	d100      	bne.n	8000292 <__aeabi_fsub+0x42>
 8000290:	e0d9      	b.n	8000446 <__aeabi_fsub+0x1f6>
 8000292:	2280      	movs	r2, #128	; 0x80
 8000294:	04d2      	lsls	r2, r2, #19
 8000296:	4316      	orrs	r6, r2
 8000298:	281b      	cmp	r0, #27
 800029a:	dc00      	bgt.n	800029e <__aeabi_fsub+0x4e>
 800029c:	e0e9      	b.n	8000472 <__aeabi_fsub+0x222>
 800029e:	2001      	movs	r0, #1
 80002a0:	4663      	mov	r3, ip
 80002a2:	1a18      	subs	r0, r3, r0
 80002a4:	0143      	lsls	r3, r0, #5
 80002a6:	d400      	bmi.n	80002aa <__aeabi_fsub+0x5a>
 80002a8:	e0b4      	b.n	8000414 <__aeabi_fsub+0x1c4>
 80002aa:	0180      	lsls	r0, r0, #6
 80002ac:	0987      	lsrs	r7, r0, #6
 80002ae:	0038      	movs	r0, r7
 80002b0:	f000 f9d6 	bl	8000660 <__clzsi2>
 80002b4:	3805      	subs	r0, #5
 80002b6:	4087      	lsls	r7, r0
 80002b8:	4285      	cmp	r5, r0
 80002ba:	dc00      	bgt.n	80002be <__aeabi_fsub+0x6e>
 80002bc:	e0cc      	b.n	8000458 <__aeabi_fsub+0x208>
 80002be:	1a2d      	subs	r5, r5, r0
 80002c0:	48b5      	ldr	r0, [pc, #724]	; (8000598 <__aeabi_fsub+0x348>)
 80002c2:	4038      	ands	r0, r7
 80002c4:	0743      	lsls	r3, r0, #29
 80002c6:	d004      	beq.n	80002d2 <__aeabi_fsub+0x82>
 80002c8:	230f      	movs	r3, #15
 80002ca:	4003      	ands	r3, r0
 80002cc:	2b04      	cmp	r3, #4
 80002ce:	d000      	beq.n	80002d2 <__aeabi_fsub+0x82>
 80002d0:	3004      	adds	r0, #4
 80002d2:	0143      	lsls	r3, r0, #5
 80002d4:	d400      	bmi.n	80002d8 <__aeabi_fsub+0x88>
 80002d6:	e0a0      	b.n	800041a <__aeabi_fsub+0x1ca>
 80002d8:	1c6a      	adds	r2, r5, #1
 80002da:	2dfe      	cmp	r5, #254	; 0xfe
 80002dc:	d100      	bne.n	80002e0 <__aeabi_fsub+0x90>
 80002de:	e08d      	b.n	80003fc <__aeabi_fsub+0x1ac>
 80002e0:	0180      	lsls	r0, r0, #6
 80002e2:	0a47      	lsrs	r7, r0, #9
 80002e4:	b2d2      	uxtb	r2, r2
 80002e6:	05d0      	lsls	r0, r2, #23
 80002e8:	4338      	orrs	r0, r7
 80002ea:	07e4      	lsls	r4, r4, #31
 80002ec:	4320      	orrs	r0, r4
 80002ee:	bcc0      	pop	{r6, r7}
 80002f0:	46b9      	mov	r9, r7
 80002f2:	46b0      	mov	r8, r6
 80002f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80002f6:	1aa8      	subs	r0, r5, r2
 80002f8:	4680      	mov	r8, r0
 80002fa:	2800      	cmp	r0, #0
 80002fc:	dd45      	ble.n	800038a <__aeabi_fsub+0x13a>
 80002fe:	2a00      	cmp	r2, #0
 8000300:	d070      	beq.n	80003e4 <__aeabi_fsub+0x194>
 8000302:	2dff      	cmp	r5, #255	; 0xff
 8000304:	d100      	bne.n	8000308 <__aeabi_fsub+0xb8>
 8000306:	e09e      	b.n	8000446 <__aeabi_fsub+0x1f6>
 8000308:	2380      	movs	r3, #128	; 0x80
 800030a:	04db      	lsls	r3, r3, #19
 800030c:	431e      	orrs	r6, r3
 800030e:	4643      	mov	r3, r8
 8000310:	2b1b      	cmp	r3, #27
 8000312:	dc00      	bgt.n	8000316 <__aeabi_fsub+0xc6>
 8000314:	e0d2      	b.n	80004bc <__aeabi_fsub+0x26c>
 8000316:	2001      	movs	r0, #1
 8000318:	4460      	add	r0, ip
 800031a:	0143      	lsls	r3, r0, #5
 800031c:	d57a      	bpl.n	8000414 <__aeabi_fsub+0x1c4>
 800031e:	3501      	adds	r5, #1
 8000320:	2dff      	cmp	r5, #255	; 0xff
 8000322:	d06b      	beq.n	80003fc <__aeabi_fsub+0x1ac>
 8000324:	2301      	movs	r3, #1
 8000326:	4a9d      	ldr	r2, [pc, #628]	; (800059c <__aeabi_fsub+0x34c>)
 8000328:	4003      	ands	r3, r0
 800032a:	0840      	lsrs	r0, r0, #1
 800032c:	4010      	ands	r0, r2
 800032e:	4318      	orrs	r0, r3
 8000330:	e7c8      	b.n	80002c4 <__aeabi_fsub+0x74>
 8000332:	2e00      	cmp	r6, #0
 8000334:	d020      	beq.n	8000378 <__aeabi_fsub+0x128>
 8000336:	428c      	cmp	r4, r1
 8000338:	d023      	beq.n	8000382 <__aeabi_fsub+0x132>
 800033a:	0028      	movs	r0, r5
 800033c:	38ff      	subs	r0, #255	; 0xff
 800033e:	2800      	cmp	r0, #0
 8000340:	d039      	beq.n	80003b6 <__aeabi_fsub+0x166>
 8000342:	1b57      	subs	r7, r2, r5
 8000344:	2d00      	cmp	r5, #0
 8000346:	d000      	beq.n	800034a <__aeabi_fsub+0xfa>
 8000348:	e09d      	b.n	8000486 <__aeabi_fsub+0x236>
 800034a:	4663      	mov	r3, ip
 800034c:	2b00      	cmp	r3, #0
 800034e:	d100      	bne.n	8000352 <__aeabi_fsub+0x102>
 8000350:	e0db      	b.n	800050a <__aeabi_fsub+0x2ba>
 8000352:	1e7b      	subs	r3, r7, #1
 8000354:	2f01      	cmp	r7, #1
 8000356:	d100      	bne.n	800035a <__aeabi_fsub+0x10a>
 8000358:	e10d      	b.n	8000576 <__aeabi_fsub+0x326>
 800035a:	2fff      	cmp	r7, #255	; 0xff
 800035c:	d071      	beq.n	8000442 <__aeabi_fsub+0x1f2>
 800035e:	001f      	movs	r7, r3
 8000360:	e098      	b.n	8000494 <__aeabi_fsub+0x244>
 8000362:	2e00      	cmp	r6, #0
 8000364:	d100      	bne.n	8000368 <__aeabi_fsub+0x118>
 8000366:	e0a7      	b.n	80004b8 <__aeabi_fsub+0x268>
 8000368:	1e42      	subs	r2, r0, #1
 800036a:	2801      	cmp	r0, #1
 800036c:	d100      	bne.n	8000370 <__aeabi_fsub+0x120>
 800036e:	e0e6      	b.n	800053e <__aeabi_fsub+0x2ee>
 8000370:	28ff      	cmp	r0, #255	; 0xff
 8000372:	d068      	beq.n	8000446 <__aeabi_fsub+0x1f6>
 8000374:	0010      	movs	r0, r2
 8000376:	e78f      	b.n	8000298 <__aeabi_fsub+0x48>
 8000378:	2001      	movs	r0, #1
 800037a:	4041      	eors	r1, r0
 800037c:	42a1      	cmp	r1, r4
 800037e:	d000      	beq.n	8000382 <__aeabi_fsub+0x132>
 8000380:	e77f      	b.n	8000282 <__aeabi_fsub+0x32>
 8000382:	20ff      	movs	r0, #255	; 0xff
 8000384:	4240      	negs	r0, r0
 8000386:	4680      	mov	r8, r0
 8000388:	44a8      	add	r8, r5
 800038a:	4640      	mov	r0, r8
 800038c:	2800      	cmp	r0, #0
 800038e:	d038      	beq.n	8000402 <__aeabi_fsub+0x1b2>
 8000390:	1b51      	subs	r1, r2, r5
 8000392:	2d00      	cmp	r5, #0
 8000394:	d100      	bne.n	8000398 <__aeabi_fsub+0x148>
 8000396:	e0ae      	b.n	80004f6 <__aeabi_fsub+0x2a6>
 8000398:	2aff      	cmp	r2, #255	; 0xff
 800039a:	d100      	bne.n	800039e <__aeabi_fsub+0x14e>
 800039c:	e0df      	b.n	800055e <__aeabi_fsub+0x30e>
 800039e:	2380      	movs	r3, #128	; 0x80
 80003a0:	4660      	mov	r0, ip
 80003a2:	04db      	lsls	r3, r3, #19
 80003a4:	4318      	orrs	r0, r3
 80003a6:	4684      	mov	ip, r0
 80003a8:	291b      	cmp	r1, #27
 80003aa:	dc00      	bgt.n	80003ae <__aeabi_fsub+0x15e>
 80003ac:	e0d9      	b.n	8000562 <__aeabi_fsub+0x312>
 80003ae:	2001      	movs	r0, #1
 80003b0:	0015      	movs	r5, r2
 80003b2:	1980      	adds	r0, r0, r6
 80003b4:	e7b1      	b.n	800031a <__aeabi_fsub+0xca>
 80003b6:	20fe      	movs	r0, #254	; 0xfe
 80003b8:	1c6a      	adds	r2, r5, #1
 80003ba:	4210      	tst	r0, r2
 80003bc:	d171      	bne.n	80004a2 <__aeabi_fsub+0x252>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d000      	beq.n	80003c4 <__aeabi_fsub+0x174>
 80003c2:	e0a6      	b.n	8000512 <__aeabi_fsub+0x2c2>
 80003c4:	4663      	mov	r3, ip
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d100      	bne.n	80003cc <__aeabi_fsub+0x17c>
 80003ca:	e0d9      	b.n	8000580 <__aeabi_fsub+0x330>
 80003cc:	2200      	movs	r2, #0
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d100      	bne.n	80003d4 <__aeabi_fsub+0x184>
 80003d2:	e788      	b.n	80002e6 <__aeabi_fsub+0x96>
 80003d4:	1b98      	subs	r0, r3, r6
 80003d6:	0143      	lsls	r3, r0, #5
 80003d8:	d400      	bmi.n	80003dc <__aeabi_fsub+0x18c>
 80003da:	e0e1      	b.n	80005a0 <__aeabi_fsub+0x350>
 80003dc:	4663      	mov	r3, ip
 80003de:	000c      	movs	r4, r1
 80003e0:	1af0      	subs	r0, r6, r3
 80003e2:	e76f      	b.n	80002c4 <__aeabi_fsub+0x74>
 80003e4:	2e00      	cmp	r6, #0
 80003e6:	d100      	bne.n	80003ea <__aeabi_fsub+0x19a>
 80003e8:	e0b7      	b.n	800055a <__aeabi_fsub+0x30a>
 80003ea:	0002      	movs	r2, r0
 80003ec:	3a01      	subs	r2, #1
 80003ee:	2801      	cmp	r0, #1
 80003f0:	d100      	bne.n	80003f4 <__aeabi_fsub+0x1a4>
 80003f2:	e09c      	b.n	800052e <__aeabi_fsub+0x2de>
 80003f4:	28ff      	cmp	r0, #255	; 0xff
 80003f6:	d026      	beq.n	8000446 <__aeabi_fsub+0x1f6>
 80003f8:	4690      	mov	r8, r2
 80003fa:	e788      	b.n	800030e <__aeabi_fsub+0xbe>
 80003fc:	22ff      	movs	r2, #255	; 0xff
 80003fe:	2700      	movs	r7, #0
 8000400:	e771      	b.n	80002e6 <__aeabi_fsub+0x96>
 8000402:	20fe      	movs	r0, #254	; 0xfe
 8000404:	1c6a      	adds	r2, r5, #1
 8000406:	4210      	tst	r0, r2
 8000408:	d064      	beq.n	80004d4 <__aeabi_fsub+0x284>
 800040a:	2aff      	cmp	r2, #255	; 0xff
 800040c:	d0f6      	beq.n	80003fc <__aeabi_fsub+0x1ac>
 800040e:	0015      	movs	r5, r2
 8000410:	4466      	add	r6, ip
 8000412:	0870      	lsrs	r0, r6, #1
 8000414:	0743      	lsls	r3, r0, #29
 8000416:	d000      	beq.n	800041a <__aeabi_fsub+0x1ca>
 8000418:	e756      	b.n	80002c8 <__aeabi_fsub+0x78>
 800041a:	08c3      	lsrs	r3, r0, #3
 800041c:	2dff      	cmp	r5, #255	; 0xff
 800041e:	d012      	beq.n	8000446 <__aeabi_fsub+0x1f6>
 8000420:	025b      	lsls	r3, r3, #9
 8000422:	0a5f      	lsrs	r7, r3, #9
 8000424:	b2ea      	uxtb	r2, r5
 8000426:	e75e      	b.n	80002e6 <__aeabi_fsub+0x96>
 8000428:	4662      	mov	r2, ip
 800042a:	2a00      	cmp	r2, #0
 800042c:	d100      	bne.n	8000430 <__aeabi_fsub+0x1e0>
 800042e:	e096      	b.n	800055e <__aeabi_fsub+0x30e>
 8000430:	2e00      	cmp	r6, #0
 8000432:	d008      	beq.n	8000446 <__aeabi_fsub+0x1f6>
 8000434:	2280      	movs	r2, #128	; 0x80
 8000436:	03d2      	lsls	r2, r2, #15
 8000438:	4213      	tst	r3, r2
 800043a:	d004      	beq.n	8000446 <__aeabi_fsub+0x1f6>
 800043c:	4648      	mov	r0, r9
 800043e:	4210      	tst	r0, r2
 8000440:	d101      	bne.n	8000446 <__aeabi_fsub+0x1f6>
 8000442:	000c      	movs	r4, r1
 8000444:	464b      	mov	r3, r9
 8000446:	2b00      	cmp	r3, #0
 8000448:	d0d8      	beq.n	80003fc <__aeabi_fsub+0x1ac>
 800044a:	2780      	movs	r7, #128	; 0x80
 800044c:	03ff      	lsls	r7, r7, #15
 800044e:	431f      	orrs	r7, r3
 8000450:	027f      	lsls	r7, r7, #9
 8000452:	22ff      	movs	r2, #255	; 0xff
 8000454:	0a7f      	lsrs	r7, r7, #9
 8000456:	e746      	b.n	80002e6 <__aeabi_fsub+0x96>
 8000458:	2320      	movs	r3, #32
 800045a:	003a      	movs	r2, r7
 800045c:	1b45      	subs	r5, r0, r5
 800045e:	0038      	movs	r0, r7
 8000460:	3501      	adds	r5, #1
 8000462:	40ea      	lsrs	r2, r5
 8000464:	1b5d      	subs	r5, r3, r5
 8000466:	40a8      	lsls	r0, r5
 8000468:	1e43      	subs	r3, r0, #1
 800046a:	4198      	sbcs	r0, r3
 800046c:	2500      	movs	r5, #0
 800046e:	4310      	orrs	r0, r2
 8000470:	e728      	b.n	80002c4 <__aeabi_fsub+0x74>
 8000472:	2320      	movs	r3, #32
 8000474:	1a1b      	subs	r3, r3, r0
 8000476:	0032      	movs	r2, r6
 8000478:	409e      	lsls	r6, r3
 800047a:	40c2      	lsrs	r2, r0
 800047c:	0030      	movs	r0, r6
 800047e:	1e43      	subs	r3, r0, #1
 8000480:	4198      	sbcs	r0, r3
 8000482:	4310      	orrs	r0, r2
 8000484:	e70c      	b.n	80002a0 <__aeabi_fsub+0x50>
 8000486:	2aff      	cmp	r2, #255	; 0xff
 8000488:	d0db      	beq.n	8000442 <__aeabi_fsub+0x1f2>
 800048a:	2380      	movs	r3, #128	; 0x80
 800048c:	4660      	mov	r0, ip
 800048e:	04db      	lsls	r3, r3, #19
 8000490:	4318      	orrs	r0, r3
 8000492:	4684      	mov	ip, r0
 8000494:	2f1b      	cmp	r7, #27
 8000496:	dd56      	ble.n	8000546 <__aeabi_fsub+0x2f6>
 8000498:	2001      	movs	r0, #1
 800049a:	000c      	movs	r4, r1
 800049c:	0015      	movs	r5, r2
 800049e:	1a30      	subs	r0, r6, r0
 80004a0:	e700      	b.n	80002a4 <__aeabi_fsub+0x54>
 80004a2:	4663      	mov	r3, ip
 80004a4:	1b9f      	subs	r7, r3, r6
 80004a6:	017b      	lsls	r3, r7, #5
 80004a8:	d43d      	bmi.n	8000526 <__aeabi_fsub+0x2d6>
 80004aa:	2f00      	cmp	r7, #0
 80004ac:	d000      	beq.n	80004b0 <__aeabi_fsub+0x260>
 80004ae:	e6fe      	b.n	80002ae <__aeabi_fsub+0x5e>
 80004b0:	2400      	movs	r4, #0
 80004b2:	2200      	movs	r2, #0
 80004b4:	2700      	movs	r7, #0
 80004b6:	e716      	b.n	80002e6 <__aeabi_fsub+0x96>
 80004b8:	0005      	movs	r5, r0
 80004ba:	e7af      	b.n	800041c <__aeabi_fsub+0x1cc>
 80004bc:	0032      	movs	r2, r6
 80004be:	4643      	mov	r3, r8
 80004c0:	4641      	mov	r1, r8
 80004c2:	40da      	lsrs	r2, r3
 80004c4:	2320      	movs	r3, #32
 80004c6:	1a5b      	subs	r3, r3, r1
 80004c8:	409e      	lsls	r6, r3
 80004ca:	0030      	movs	r0, r6
 80004cc:	1e43      	subs	r3, r0, #1
 80004ce:	4198      	sbcs	r0, r3
 80004d0:	4310      	orrs	r0, r2
 80004d2:	e721      	b.n	8000318 <__aeabi_fsub+0xc8>
 80004d4:	2d00      	cmp	r5, #0
 80004d6:	d1a7      	bne.n	8000428 <__aeabi_fsub+0x1d8>
 80004d8:	4663      	mov	r3, ip
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d059      	beq.n	8000592 <__aeabi_fsub+0x342>
 80004de:	2200      	movs	r2, #0
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d100      	bne.n	80004e6 <__aeabi_fsub+0x296>
 80004e4:	e6ff      	b.n	80002e6 <__aeabi_fsub+0x96>
 80004e6:	0030      	movs	r0, r6
 80004e8:	4460      	add	r0, ip
 80004ea:	0143      	lsls	r3, r0, #5
 80004ec:	d592      	bpl.n	8000414 <__aeabi_fsub+0x1c4>
 80004ee:	4b2a      	ldr	r3, [pc, #168]	; (8000598 <__aeabi_fsub+0x348>)
 80004f0:	3501      	adds	r5, #1
 80004f2:	4018      	ands	r0, r3
 80004f4:	e78e      	b.n	8000414 <__aeabi_fsub+0x1c4>
 80004f6:	4663      	mov	r3, ip
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d047      	beq.n	800058c <__aeabi_fsub+0x33c>
 80004fc:	1e4b      	subs	r3, r1, #1
 80004fe:	2901      	cmp	r1, #1
 8000500:	d015      	beq.n	800052e <__aeabi_fsub+0x2de>
 8000502:	29ff      	cmp	r1, #255	; 0xff
 8000504:	d02b      	beq.n	800055e <__aeabi_fsub+0x30e>
 8000506:	0019      	movs	r1, r3
 8000508:	e74e      	b.n	80003a8 <__aeabi_fsub+0x158>
 800050a:	000c      	movs	r4, r1
 800050c:	464b      	mov	r3, r9
 800050e:	003d      	movs	r5, r7
 8000510:	e784      	b.n	800041c <__aeabi_fsub+0x1cc>
 8000512:	4662      	mov	r2, ip
 8000514:	2a00      	cmp	r2, #0
 8000516:	d18b      	bne.n	8000430 <__aeabi_fsub+0x1e0>
 8000518:	2e00      	cmp	r6, #0
 800051a:	d192      	bne.n	8000442 <__aeabi_fsub+0x1f2>
 800051c:	2780      	movs	r7, #128	; 0x80
 800051e:	2400      	movs	r4, #0
 8000520:	22ff      	movs	r2, #255	; 0xff
 8000522:	03ff      	lsls	r7, r7, #15
 8000524:	e6df      	b.n	80002e6 <__aeabi_fsub+0x96>
 8000526:	4663      	mov	r3, ip
 8000528:	000c      	movs	r4, r1
 800052a:	1af7      	subs	r7, r6, r3
 800052c:	e6bf      	b.n	80002ae <__aeabi_fsub+0x5e>
 800052e:	0030      	movs	r0, r6
 8000530:	4460      	add	r0, ip
 8000532:	2501      	movs	r5, #1
 8000534:	0143      	lsls	r3, r0, #5
 8000536:	d400      	bmi.n	800053a <__aeabi_fsub+0x2ea>
 8000538:	e76c      	b.n	8000414 <__aeabi_fsub+0x1c4>
 800053a:	2502      	movs	r5, #2
 800053c:	e6f2      	b.n	8000324 <__aeabi_fsub+0xd4>
 800053e:	4663      	mov	r3, ip
 8000540:	2501      	movs	r5, #1
 8000542:	1b98      	subs	r0, r3, r6
 8000544:	e6ae      	b.n	80002a4 <__aeabi_fsub+0x54>
 8000546:	2320      	movs	r3, #32
 8000548:	4664      	mov	r4, ip
 800054a:	4660      	mov	r0, ip
 800054c:	40fc      	lsrs	r4, r7
 800054e:	1bdf      	subs	r7, r3, r7
 8000550:	40b8      	lsls	r0, r7
 8000552:	1e43      	subs	r3, r0, #1
 8000554:	4198      	sbcs	r0, r3
 8000556:	4320      	orrs	r0, r4
 8000558:	e79f      	b.n	800049a <__aeabi_fsub+0x24a>
 800055a:	0005      	movs	r5, r0
 800055c:	e75e      	b.n	800041c <__aeabi_fsub+0x1cc>
 800055e:	464b      	mov	r3, r9
 8000560:	e771      	b.n	8000446 <__aeabi_fsub+0x1f6>
 8000562:	2320      	movs	r3, #32
 8000564:	4665      	mov	r5, ip
 8000566:	4660      	mov	r0, ip
 8000568:	40cd      	lsrs	r5, r1
 800056a:	1a59      	subs	r1, r3, r1
 800056c:	4088      	lsls	r0, r1
 800056e:	1e43      	subs	r3, r0, #1
 8000570:	4198      	sbcs	r0, r3
 8000572:	4328      	orrs	r0, r5
 8000574:	e71c      	b.n	80003b0 <__aeabi_fsub+0x160>
 8000576:	4663      	mov	r3, ip
 8000578:	000c      	movs	r4, r1
 800057a:	2501      	movs	r5, #1
 800057c:	1af0      	subs	r0, r6, r3
 800057e:	e691      	b.n	80002a4 <__aeabi_fsub+0x54>
 8000580:	2e00      	cmp	r6, #0
 8000582:	d095      	beq.n	80004b0 <__aeabi_fsub+0x260>
 8000584:	000c      	movs	r4, r1
 8000586:	464f      	mov	r7, r9
 8000588:	2200      	movs	r2, #0
 800058a:	e6ac      	b.n	80002e6 <__aeabi_fsub+0x96>
 800058c:	464b      	mov	r3, r9
 800058e:	000d      	movs	r5, r1
 8000590:	e744      	b.n	800041c <__aeabi_fsub+0x1cc>
 8000592:	464f      	mov	r7, r9
 8000594:	2200      	movs	r2, #0
 8000596:	e6a6      	b.n	80002e6 <__aeabi_fsub+0x96>
 8000598:	fbffffff 	.word	0xfbffffff
 800059c:	7dffffff 	.word	0x7dffffff
 80005a0:	2800      	cmp	r0, #0
 80005a2:	d000      	beq.n	80005a6 <__aeabi_fsub+0x356>
 80005a4:	e736      	b.n	8000414 <__aeabi_fsub+0x1c4>
 80005a6:	2400      	movs	r4, #0
 80005a8:	2700      	movs	r7, #0
 80005aa:	e69c      	b.n	80002e6 <__aeabi_fsub+0x96>

080005ac <__aeabi_f2iz>:
 80005ac:	0241      	lsls	r1, r0, #9
 80005ae:	0042      	lsls	r2, r0, #1
 80005b0:	0fc3      	lsrs	r3, r0, #31
 80005b2:	0a49      	lsrs	r1, r1, #9
 80005b4:	2000      	movs	r0, #0
 80005b6:	0e12      	lsrs	r2, r2, #24
 80005b8:	2a7e      	cmp	r2, #126	; 0x7e
 80005ba:	dd03      	ble.n	80005c4 <__aeabi_f2iz+0x18>
 80005bc:	2a9d      	cmp	r2, #157	; 0x9d
 80005be:	dd02      	ble.n	80005c6 <__aeabi_f2iz+0x1a>
 80005c0:	4a09      	ldr	r2, [pc, #36]	; (80005e8 <__aeabi_f2iz+0x3c>)
 80005c2:	1898      	adds	r0, r3, r2
 80005c4:	4770      	bx	lr
 80005c6:	2080      	movs	r0, #128	; 0x80
 80005c8:	0400      	lsls	r0, r0, #16
 80005ca:	4301      	orrs	r1, r0
 80005cc:	2a95      	cmp	r2, #149	; 0x95
 80005ce:	dc07      	bgt.n	80005e0 <__aeabi_f2iz+0x34>
 80005d0:	2096      	movs	r0, #150	; 0x96
 80005d2:	1a82      	subs	r2, r0, r2
 80005d4:	40d1      	lsrs	r1, r2
 80005d6:	4248      	negs	r0, r1
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d1f3      	bne.n	80005c4 <__aeabi_f2iz+0x18>
 80005dc:	0008      	movs	r0, r1
 80005de:	e7f1      	b.n	80005c4 <__aeabi_f2iz+0x18>
 80005e0:	3a96      	subs	r2, #150	; 0x96
 80005e2:	4091      	lsls	r1, r2
 80005e4:	e7f7      	b.n	80005d6 <__aeabi_f2iz+0x2a>
 80005e6:	46c0      	nop			; (mov r8, r8)
 80005e8:	7fffffff 	.word	0x7fffffff

080005ec <__aeabi_cfrcmple>:
 80005ec:	4684      	mov	ip, r0
 80005ee:	0008      	movs	r0, r1
 80005f0:	4661      	mov	r1, ip
 80005f2:	e7ff      	b.n	80005f4 <__aeabi_cfcmpeq>

080005f4 <__aeabi_cfcmpeq>:
 80005f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80005f6:	f000 f8bd 	bl	8000774 <__lesf2>
 80005fa:	2800      	cmp	r0, #0
 80005fc:	d401      	bmi.n	8000602 <__aeabi_cfcmpeq+0xe>
 80005fe:	2100      	movs	r1, #0
 8000600:	42c8      	cmn	r0, r1
 8000602:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000604 <__aeabi_fcmpeq>:
 8000604:	b510      	push	{r4, lr}
 8000606:	f000 f849 	bl	800069c <__eqsf2>
 800060a:	4240      	negs	r0, r0
 800060c:	3001      	adds	r0, #1
 800060e:	bd10      	pop	{r4, pc}

08000610 <__aeabi_fcmplt>:
 8000610:	b510      	push	{r4, lr}
 8000612:	f000 f8af 	bl	8000774 <__lesf2>
 8000616:	2800      	cmp	r0, #0
 8000618:	db01      	blt.n	800061e <__aeabi_fcmplt+0xe>
 800061a:	2000      	movs	r0, #0
 800061c:	bd10      	pop	{r4, pc}
 800061e:	2001      	movs	r0, #1
 8000620:	bd10      	pop	{r4, pc}
 8000622:	46c0      	nop			; (mov r8, r8)

08000624 <__aeabi_fcmple>:
 8000624:	b510      	push	{r4, lr}
 8000626:	f000 f8a5 	bl	8000774 <__lesf2>
 800062a:	2800      	cmp	r0, #0
 800062c:	dd01      	ble.n	8000632 <__aeabi_fcmple+0xe>
 800062e:	2000      	movs	r0, #0
 8000630:	bd10      	pop	{r4, pc}
 8000632:	2001      	movs	r0, #1
 8000634:	bd10      	pop	{r4, pc}
 8000636:	46c0      	nop			; (mov r8, r8)

08000638 <__aeabi_fcmpgt>:
 8000638:	b510      	push	{r4, lr}
 800063a:	f000 f855 	bl	80006e8 <__gesf2>
 800063e:	2800      	cmp	r0, #0
 8000640:	dc01      	bgt.n	8000646 <__aeabi_fcmpgt+0xe>
 8000642:	2000      	movs	r0, #0
 8000644:	bd10      	pop	{r4, pc}
 8000646:	2001      	movs	r0, #1
 8000648:	bd10      	pop	{r4, pc}
 800064a:	46c0      	nop			; (mov r8, r8)

0800064c <__aeabi_fcmpge>:
 800064c:	b510      	push	{r4, lr}
 800064e:	f000 f84b 	bl	80006e8 <__gesf2>
 8000652:	2800      	cmp	r0, #0
 8000654:	da01      	bge.n	800065a <__aeabi_fcmpge+0xe>
 8000656:	2000      	movs	r0, #0
 8000658:	bd10      	pop	{r4, pc}
 800065a:	2001      	movs	r0, #1
 800065c:	bd10      	pop	{r4, pc}
 800065e:	46c0      	nop			; (mov r8, r8)

08000660 <__clzsi2>:
 8000660:	211c      	movs	r1, #28
 8000662:	2301      	movs	r3, #1
 8000664:	041b      	lsls	r3, r3, #16
 8000666:	4298      	cmp	r0, r3
 8000668:	d301      	bcc.n	800066e <__clzsi2+0xe>
 800066a:	0c00      	lsrs	r0, r0, #16
 800066c:	3910      	subs	r1, #16
 800066e:	0a1b      	lsrs	r3, r3, #8
 8000670:	4298      	cmp	r0, r3
 8000672:	d301      	bcc.n	8000678 <__clzsi2+0x18>
 8000674:	0a00      	lsrs	r0, r0, #8
 8000676:	3908      	subs	r1, #8
 8000678:	091b      	lsrs	r3, r3, #4
 800067a:	4298      	cmp	r0, r3
 800067c:	d301      	bcc.n	8000682 <__clzsi2+0x22>
 800067e:	0900      	lsrs	r0, r0, #4
 8000680:	3904      	subs	r1, #4
 8000682:	a202      	add	r2, pc, #8	; (adr r2, 800068c <__clzsi2+0x2c>)
 8000684:	5c10      	ldrb	r0, [r2, r0]
 8000686:	1840      	adds	r0, r0, r1
 8000688:	4770      	bx	lr
 800068a:	46c0      	nop			; (mov r8, r8)
 800068c:	02020304 	.word	0x02020304
 8000690:	01010101 	.word	0x01010101
	...

0800069c <__eqsf2>:
 800069c:	b570      	push	{r4, r5, r6, lr}
 800069e:	0042      	lsls	r2, r0, #1
 80006a0:	0245      	lsls	r5, r0, #9
 80006a2:	024e      	lsls	r6, r1, #9
 80006a4:	004c      	lsls	r4, r1, #1
 80006a6:	0fc3      	lsrs	r3, r0, #31
 80006a8:	0a6d      	lsrs	r5, r5, #9
 80006aa:	2001      	movs	r0, #1
 80006ac:	0e12      	lsrs	r2, r2, #24
 80006ae:	0a76      	lsrs	r6, r6, #9
 80006b0:	0e24      	lsrs	r4, r4, #24
 80006b2:	0fc9      	lsrs	r1, r1, #31
 80006b4:	2aff      	cmp	r2, #255	; 0xff
 80006b6:	d006      	beq.n	80006c6 <__eqsf2+0x2a>
 80006b8:	2cff      	cmp	r4, #255	; 0xff
 80006ba:	d003      	beq.n	80006c4 <__eqsf2+0x28>
 80006bc:	42a2      	cmp	r2, r4
 80006be:	d101      	bne.n	80006c4 <__eqsf2+0x28>
 80006c0:	42b5      	cmp	r5, r6
 80006c2:	d006      	beq.n	80006d2 <__eqsf2+0x36>
 80006c4:	bd70      	pop	{r4, r5, r6, pc}
 80006c6:	2d00      	cmp	r5, #0
 80006c8:	d1fc      	bne.n	80006c4 <__eqsf2+0x28>
 80006ca:	2cff      	cmp	r4, #255	; 0xff
 80006cc:	d1fa      	bne.n	80006c4 <__eqsf2+0x28>
 80006ce:	2e00      	cmp	r6, #0
 80006d0:	d1f8      	bne.n	80006c4 <__eqsf2+0x28>
 80006d2:	428b      	cmp	r3, r1
 80006d4:	d006      	beq.n	80006e4 <__eqsf2+0x48>
 80006d6:	2001      	movs	r0, #1
 80006d8:	2a00      	cmp	r2, #0
 80006da:	d1f3      	bne.n	80006c4 <__eqsf2+0x28>
 80006dc:	0028      	movs	r0, r5
 80006de:	1e43      	subs	r3, r0, #1
 80006e0:	4198      	sbcs	r0, r3
 80006e2:	e7ef      	b.n	80006c4 <__eqsf2+0x28>
 80006e4:	2000      	movs	r0, #0
 80006e6:	e7ed      	b.n	80006c4 <__eqsf2+0x28>

080006e8 <__gesf2>:
 80006e8:	b570      	push	{r4, r5, r6, lr}
 80006ea:	0042      	lsls	r2, r0, #1
 80006ec:	0245      	lsls	r5, r0, #9
 80006ee:	024e      	lsls	r6, r1, #9
 80006f0:	004c      	lsls	r4, r1, #1
 80006f2:	0fc3      	lsrs	r3, r0, #31
 80006f4:	0a6d      	lsrs	r5, r5, #9
 80006f6:	0e12      	lsrs	r2, r2, #24
 80006f8:	0a76      	lsrs	r6, r6, #9
 80006fa:	0e24      	lsrs	r4, r4, #24
 80006fc:	0fc8      	lsrs	r0, r1, #31
 80006fe:	2aff      	cmp	r2, #255	; 0xff
 8000700:	d01b      	beq.n	800073a <__gesf2+0x52>
 8000702:	2cff      	cmp	r4, #255	; 0xff
 8000704:	d00e      	beq.n	8000724 <__gesf2+0x3c>
 8000706:	2a00      	cmp	r2, #0
 8000708:	d11b      	bne.n	8000742 <__gesf2+0x5a>
 800070a:	2c00      	cmp	r4, #0
 800070c:	d101      	bne.n	8000712 <__gesf2+0x2a>
 800070e:	2e00      	cmp	r6, #0
 8000710:	d01c      	beq.n	800074c <__gesf2+0x64>
 8000712:	2d00      	cmp	r5, #0
 8000714:	d00c      	beq.n	8000730 <__gesf2+0x48>
 8000716:	4283      	cmp	r3, r0
 8000718:	d01c      	beq.n	8000754 <__gesf2+0x6c>
 800071a:	2102      	movs	r1, #2
 800071c:	1e58      	subs	r0, r3, #1
 800071e:	4008      	ands	r0, r1
 8000720:	3801      	subs	r0, #1
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	2e00      	cmp	r6, #0
 8000726:	d122      	bne.n	800076e <__gesf2+0x86>
 8000728:	2a00      	cmp	r2, #0
 800072a:	d1f4      	bne.n	8000716 <__gesf2+0x2e>
 800072c:	2d00      	cmp	r5, #0
 800072e:	d1f2      	bne.n	8000716 <__gesf2+0x2e>
 8000730:	2800      	cmp	r0, #0
 8000732:	d1f6      	bne.n	8000722 <__gesf2+0x3a>
 8000734:	2001      	movs	r0, #1
 8000736:	4240      	negs	r0, r0
 8000738:	e7f3      	b.n	8000722 <__gesf2+0x3a>
 800073a:	2d00      	cmp	r5, #0
 800073c:	d117      	bne.n	800076e <__gesf2+0x86>
 800073e:	2cff      	cmp	r4, #255	; 0xff
 8000740:	d0f0      	beq.n	8000724 <__gesf2+0x3c>
 8000742:	2c00      	cmp	r4, #0
 8000744:	d1e7      	bne.n	8000716 <__gesf2+0x2e>
 8000746:	2e00      	cmp	r6, #0
 8000748:	d1e5      	bne.n	8000716 <__gesf2+0x2e>
 800074a:	e7e6      	b.n	800071a <__gesf2+0x32>
 800074c:	2000      	movs	r0, #0
 800074e:	2d00      	cmp	r5, #0
 8000750:	d0e7      	beq.n	8000722 <__gesf2+0x3a>
 8000752:	e7e2      	b.n	800071a <__gesf2+0x32>
 8000754:	42a2      	cmp	r2, r4
 8000756:	dc05      	bgt.n	8000764 <__gesf2+0x7c>
 8000758:	dbea      	blt.n	8000730 <__gesf2+0x48>
 800075a:	42b5      	cmp	r5, r6
 800075c:	d802      	bhi.n	8000764 <__gesf2+0x7c>
 800075e:	d3e7      	bcc.n	8000730 <__gesf2+0x48>
 8000760:	2000      	movs	r0, #0
 8000762:	e7de      	b.n	8000722 <__gesf2+0x3a>
 8000764:	4243      	negs	r3, r0
 8000766:	4158      	adcs	r0, r3
 8000768:	0040      	lsls	r0, r0, #1
 800076a:	3801      	subs	r0, #1
 800076c:	e7d9      	b.n	8000722 <__gesf2+0x3a>
 800076e:	2002      	movs	r0, #2
 8000770:	4240      	negs	r0, r0
 8000772:	e7d6      	b.n	8000722 <__gesf2+0x3a>

08000774 <__lesf2>:
 8000774:	b570      	push	{r4, r5, r6, lr}
 8000776:	0042      	lsls	r2, r0, #1
 8000778:	0245      	lsls	r5, r0, #9
 800077a:	024e      	lsls	r6, r1, #9
 800077c:	004c      	lsls	r4, r1, #1
 800077e:	0fc3      	lsrs	r3, r0, #31
 8000780:	0a6d      	lsrs	r5, r5, #9
 8000782:	0e12      	lsrs	r2, r2, #24
 8000784:	0a76      	lsrs	r6, r6, #9
 8000786:	0e24      	lsrs	r4, r4, #24
 8000788:	0fc8      	lsrs	r0, r1, #31
 800078a:	2aff      	cmp	r2, #255	; 0xff
 800078c:	d00b      	beq.n	80007a6 <__lesf2+0x32>
 800078e:	2cff      	cmp	r4, #255	; 0xff
 8000790:	d00d      	beq.n	80007ae <__lesf2+0x3a>
 8000792:	2a00      	cmp	r2, #0
 8000794:	d11f      	bne.n	80007d6 <__lesf2+0x62>
 8000796:	2c00      	cmp	r4, #0
 8000798:	d116      	bne.n	80007c8 <__lesf2+0x54>
 800079a:	2e00      	cmp	r6, #0
 800079c:	d114      	bne.n	80007c8 <__lesf2+0x54>
 800079e:	2000      	movs	r0, #0
 80007a0:	2d00      	cmp	r5, #0
 80007a2:	d010      	beq.n	80007c6 <__lesf2+0x52>
 80007a4:	e009      	b.n	80007ba <__lesf2+0x46>
 80007a6:	2d00      	cmp	r5, #0
 80007a8:	d10c      	bne.n	80007c4 <__lesf2+0x50>
 80007aa:	2cff      	cmp	r4, #255	; 0xff
 80007ac:	d113      	bne.n	80007d6 <__lesf2+0x62>
 80007ae:	2e00      	cmp	r6, #0
 80007b0:	d108      	bne.n	80007c4 <__lesf2+0x50>
 80007b2:	2a00      	cmp	r2, #0
 80007b4:	d008      	beq.n	80007c8 <__lesf2+0x54>
 80007b6:	4283      	cmp	r3, r0
 80007b8:	d012      	beq.n	80007e0 <__lesf2+0x6c>
 80007ba:	2102      	movs	r1, #2
 80007bc:	1e58      	subs	r0, r3, #1
 80007be:	4008      	ands	r0, r1
 80007c0:	3801      	subs	r0, #1
 80007c2:	e000      	b.n	80007c6 <__lesf2+0x52>
 80007c4:	2002      	movs	r0, #2
 80007c6:	bd70      	pop	{r4, r5, r6, pc}
 80007c8:	2d00      	cmp	r5, #0
 80007ca:	d1f4      	bne.n	80007b6 <__lesf2+0x42>
 80007cc:	2800      	cmp	r0, #0
 80007ce:	d1fa      	bne.n	80007c6 <__lesf2+0x52>
 80007d0:	2001      	movs	r0, #1
 80007d2:	4240      	negs	r0, r0
 80007d4:	e7f7      	b.n	80007c6 <__lesf2+0x52>
 80007d6:	2c00      	cmp	r4, #0
 80007d8:	d1ed      	bne.n	80007b6 <__lesf2+0x42>
 80007da:	2e00      	cmp	r6, #0
 80007dc:	d1eb      	bne.n	80007b6 <__lesf2+0x42>
 80007de:	e7ec      	b.n	80007ba <__lesf2+0x46>
 80007e0:	42a2      	cmp	r2, r4
 80007e2:	dc05      	bgt.n	80007f0 <__lesf2+0x7c>
 80007e4:	dbf2      	blt.n	80007cc <__lesf2+0x58>
 80007e6:	42b5      	cmp	r5, r6
 80007e8:	d802      	bhi.n	80007f0 <__lesf2+0x7c>
 80007ea:	d3ef      	bcc.n	80007cc <__lesf2+0x58>
 80007ec:	2000      	movs	r0, #0
 80007ee:	e7ea      	b.n	80007c6 <__lesf2+0x52>
 80007f0:	4243      	negs	r3, r0
 80007f2:	4158      	adcs	r0, r3
 80007f4:	0040      	lsls	r0, r0, #1
 80007f6:	3801      	subs	r0, #1
 80007f8:	e7e5      	b.n	80007c6 <__lesf2+0x52>
 80007fa:	46c0      	nop			; (mov r8, r8)

080007fc <HAL_UART_RxCpltCallback>:
float dispenser_a_pwms[pwm_size] = { 40.25 , 62.75 , 85.25 , 107.75 , 24.0};
float dispenser_b_pwms[pwm_size] = { 107.75 , 85.25 , 62.75 , 40.25 , 24.0};
float toggle_pwms[2] = { 24 , 74}; // {open , close}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80007fc:	b5b0      	push	{r4, r5, r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  uint8_t action = RXbuffer[ACTION_INDEX];
 8000804:	210f      	movs	r1, #15
 8000806:	187b      	adds	r3, r7, r1
 8000808:	4a61      	ldr	r2, [pc, #388]	; (8000990 <HAL_UART_RxCpltCallback+0x194>)
 800080a:	7812      	ldrb	r2, [r2, #0]
 800080c:	701a      	strb	r2, [r3, #0]
  uint8_t amount = RXbuffer[AMOUNT_INDEX];
 800080e:	250e      	movs	r5, #14
 8000810:	197b      	adds	r3, r7, r5
 8000812:	4a5f      	ldr	r2, [pc, #380]	; (8000990 <HAL_UART_RxCpltCallback+0x194>)
 8000814:	7852      	ldrb	r2, [r2, #1]
 8000816:	701a      	strb	r2, [r3, #0]
  TXbuffer[ACTION_INDEX] = action;
 8000818:	4b5e      	ldr	r3, [pc, #376]	; (8000994 <HAL_UART_RxCpltCallback+0x198>)
 800081a:	187a      	adds	r2, r7, r1
 800081c:	7812      	ldrb	r2, [r2, #0]
 800081e:	701a      	strb	r2, [r3, #0]
  TXbuffer[AMOUNT_INDEX] = amount;
 8000820:	4b5c      	ldr	r3, [pc, #368]	; (8000994 <HAL_UART_RxCpltCallback+0x198>)
 8000822:	197a      	adds	r2, r7, r5
 8000824:	7812      	ldrb	r2, [r2, #0]
 8000826:	705a      	strb	r2, [r3, #1]
  if (action >= 0x00 && action <= 0x03)
 8000828:	187b      	adds	r3, r7, r1
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	2b03      	cmp	r3, #3
 800082e:	d828      	bhi.n	8000882 <HAL_UART_RxCpltCallback+0x86>
	   * 0x00 = Slot 1 Chamber 1
	   * 0x01 = Slot 2 Chamber 2
	   * 0x02 = Slot 3 Chamber 3
	   * 0x03 = Slot 4 Chamber 4
	   */
	  __HAL_TIM_SetCompare(&htim2 , TIM_CHANNEL_2 , dispenser_a_pwms[action % 4]);
 8000830:	187b      	adds	r3, r7, r1
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2203      	movs	r2, #3
 8000836:	401a      	ands	r2, r3
 8000838:	4b57      	ldr	r3, [pc, #348]	; (8000998 <HAL_UART_RxCpltCallback+0x19c>)
 800083a:	0092      	lsls	r2, r2, #2
 800083c:	58d2      	ldr	r2, [r2, r3]
 800083e:	4b57      	ldr	r3, [pc, #348]	; (800099c <HAL_UART_RxCpltCallback+0x1a0>)
 8000840:	681c      	ldr	r4, [r3, #0]
 8000842:	1c10      	adds	r0, r2, #0
 8000844:	f7ff fcec 	bl	8000220 <__aeabi_f2uiz>
 8000848:	0003      	movs	r3, r0
 800084a:	63a3      	str	r3, [r4, #56]	; 0x38
	  HAL_Delay(500 * amount);
 800084c:	197b      	adds	r3, r7, r5
 800084e:	781a      	ldrb	r2, [r3, #0]
 8000850:	0013      	movs	r3, r2
 8000852:	015b      	lsls	r3, r3, #5
 8000854:	1a9b      	subs	r3, r3, r2
 8000856:	009b      	lsls	r3, r3, #2
 8000858:	189b      	adds	r3, r3, r2
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	0018      	movs	r0, r3
 800085e:	f000 fc2f 	bl	80010c0 <HAL_Delay>
	  __HAL_TIM_SetCompare(&htim2 , TIM_CHANNEL_2 , dispenser_a_pwms[pwm_size - 1]);
 8000862:	4b4d      	ldr	r3, [pc, #308]	; (8000998 <HAL_UART_RxCpltCallback+0x19c>)
 8000864:	691a      	ldr	r2, [r3, #16]
 8000866:	4b4d      	ldr	r3, [pc, #308]	; (800099c <HAL_UART_RxCpltCallback+0x1a0>)
 8000868:	681c      	ldr	r4, [r3, #0]
 800086a:	1c10      	adds	r0, r2, #0
 800086c:	f7ff fcd8 	bl	8000220 <__aeabi_f2uiz>
 8000870:	0003      	movs	r3, r0
 8000872:	63a3      	str	r3, [r4, #56]	; 0x38
	  HAL_UART_Transmit(huart , TXbuffer , TXsize , HAL_MAX_DELAY);
 8000874:	2301      	movs	r3, #1
 8000876:	425b      	negs	r3, r3
 8000878:	4946      	ldr	r1, [pc, #280]	; (8000994 <HAL_UART_RxCpltCallback+0x198>)
 800087a:	6878      	ldr	r0, [r7, #4]
 800087c:	2202      	movs	r2, #2
 800087e:	f002 fbd1 	bl	8003024 <HAL_UART_Transmit>
  }
  if (action >= 0x04 && action <= 0x07)
 8000882:	220f      	movs	r2, #15
 8000884:	18bb      	adds	r3, r7, r2
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2b03      	cmp	r3, #3
 800088a:	d92d      	bls.n	80008e8 <HAL_UART_RxCpltCallback+0xec>
 800088c:	18bb      	adds	r3, r7, r2
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	2b07      	cmp	r3, #7
 8000892:	d829      	bhi.n	80008e8 <HAL_UART_RxCpltCallback+0xec>
	   * 0x04 = Slot 1 Chamber 2
	   * 0x05 = Slot 2 Chamber 2
	   * 0x06 = Slot 3 Chamber 2
	   * 0x07 = Slot 4 Chamber 2
	   */
	  __HAL_TIM_SetCompare(&htim2 , TIM_CHANNEL_3 , dispenser_b_pwms[action % 4]);
 8000894:	18bb      	adds	r3, r7, r2
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	2203      	movs	r2, #3
 800089a:	401a      	ands	r2, r3
 800089c:	4b40      	ldr	r3, [pc, #256]	; (80009a0 <HAL_UART_RxCpltCallback+0x1a4>)
 800089e:	0092      	lsls	r2, r2, #2
 80008a0:	58d2      	ldr	r2, [r2, r3]
 80008a2:	4b3e      	ldr	r3, [pc, #248]	; (800099c <HAL_UART_RxCpltCallback+0x1a0>)
 80008a4:	681c      	ldr	r4, [r3, #0]
 80008a6:	1c10      	adds	r0, r2, #0
 80008a8:	f7ff fcba 	bl	8000220 <__aeabi_f2uiz>
 80008ac:	0003      	movs	r3, r0
 80008ae:	63e3      	str	r3, [r4, #60]	; 0x3c
	  HAL_Delay(500 * amount);
 80008b0:	230e      	movs	r3, #14
 80008b2:	18fb      	adds	r3, r7, r3
 80008b4:	781a      	ldrb	r2, [r3, #0]
 80008b6:	0013      	movs	r3, r2
 80008b8:	015b      	lsls	r3, r3, #5
 80008ba:	1a9b      	subs	r3, r3, r2
 80008bc:	009b      	lsls	r3, r3, #2
 80008be:	189b      	adds	r3, r3, r2
 80008c0:	009b      	lsls	r3, r3, #2
 80008c2:	0018      	movs	r0, r3
 80008c4:	f000 fbfc 	bl	80010c0 <HAL_Delay>
	  __HAL_TIM_SetCompare(&htim2 , TIM_CHANNEL_3 , dispenser_b_pwms[pwm_size - 1]);
 80008c8:	4b35      	ldr	r3, [pc, #212]	; (80009a0 <HAL_UART_RxCpltCallback+0x1a4>)
 80008ca:	691a      	ldr	r2, [r3, #16]
 80008cc:	4b33      	ldr	r3, [pc, #204]	; (800099c <HAL_UART_RxCpltCallback+0x1a0>)
 80008ce:	681c      	ldr	r4, [r3, #0]
 80008d0:	1c10      	adds	r0, r2, #0
 80008d2:	f7ff fca5 	bl	8000220 <__aeabi_f2uiz>
 80008d6:	0003      	movs	r3, r0
 80008d8:	63e3      	str	r3, [r4, #60]	; 0x3c
	  HAL_UART_Transmit(huart , TXbuffer , TXsize , HAL_MAX_DELAY);
 80008da:	2301      	movs	r3, #1
 80008dc:	425b      	negs	r3, r3
 80008de:	492d      	ldr	r1, [pc, #180]	; (8000994 <HAL_UART_RxCpltCallback+0x198>)
 80008e0:	6878      	ldr	r0, [r7, #4]
 80008e2:	2202      	movs	r2, #2
 80008e4:	f002 fb9e 	bl	8003024 <HAL_UART_Transmit>
  }
  if (action == 0x08)
 80008e8:	230f      	movs	r3, #15
 80008ea:	18fb      	adds	r3, r7, r3
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	2b08      	cmp	r3, #8
 80008f0:	d11f      	bne.n	8000932 <HAL_UART_RxCpltCallback+0x136>
  {
	  /*
	   * 0x08 = Interact Medicine Chambers
	   */
	  __HAL_TIM_SetCompare(&htim2 , TIM_CHANNEL_2 , toggle_pwms[amount]);
 80008f2:	250e      	movs	r5, #14
 80008f4:	197b      	adds	r3, r7, r5
 80008f6:	781a      	ldrb	r2, [r3, #0]
 80008f8:	4b2a      	ldr	r3, [pc, #168]	; (80009a4 <HAL_UART_RxCpltCallback+0x1a8>)
 80008fa:	0092      	lsls	r2, r2, #2
 80008fc:	58d2      	ldr	r2, [r2, r3]
 80008fe:	4b27      	ldr	r3, [pc, #156]	; (800099c <HAL_UART_RxCpltCallback+0x1a0>)
 8000900:	681c      	ldr	r4, [r3, #0]
 8000902:	1c10      	adds	r0, r2, #0
 8000904:	f7ff fc8c 	bl	8000220 <__aeabi_f2uiz>
 8000908:	0003      	movs	r3, r0
 800090a:	63a3      	str	r3, [r4, #56]	; 0x38
	  __HAL_TIM_SetCompare(&htim2 , TIM_CHANNEL_3 , toggle_pwms[amount]);
 800090c:	197b      	adds	r3, r7, r5
 800090e:	781a      	ldrb	r2, [r3, #0]
 8000910:	4b24      	ldr	r3, [pc, #144]	; (80009a4 <HAL_UART_RxCpltCallback+0x1a8>)
 8000912:	0092      	lsls	r2, r2, #2
 8000914:	58d2      	ldr	r2, [r2, r3]
 8000916:	4b21      	ldr	r3, [pc, #132]	; (800099c <HAL_UART_RxCpltCallback+0x1a0>)
 8000918:	681c      	ldr	r4, [r3, #0]
 800091a:	1c10      	adds	r0, r2, #0
 800091c:	f7ff fc80 	bl	8000220 <__aeabi_f2uiz>
 8000920:	0003      	movs	r3, r0
 8000922:	63e3      	str	r3, [r4, #60]	; 0x3c
	  HAL_UART_Transmit(huart , TXbuffer , TXsize , HAL_MAX_DELAY);
 8000924:	2301      	movs	r3, #1
 8000926:	425b      	negs	r3, r3
 8000928:	491a      	ldr	r1, [pc, #104]	; (8000994 <HAL_UART_RxCpltCallback+0x198>)
 800092a:	6878      	ldr	r0, [r7, #4]
 800092c:	2202      	movs	r2, #2
 800092e:	f002 fb79 	bl	8003024 <HAL_UART_Transmit>
  }
  if (action == 0x09)
 8000932:	230f      	movs	r3, #15
 8000934:	18fb      	adds	r3, r7, r3
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	2b09      	cmp	r3, #9
 800093a:	d113      	bne.n	8000964 <HAL_UART_RxCpltCallback+0x168>
  {
	  /*
	   * 0x09 = Interact Medicine Tray
	   */
	  __HAL_TIM_SetCompare(&htim2 , TIM_CHANNEL_4 , toggle_pwms[amount]);
 800093c:	230e      	movs	r3, #14
 800093e:	18fb      	adds	r3, r7, r3
 8000940:	781a      	ldrb	r2, [r3, #0]
 8000942:	4b18      	ldr	r3, [pc, #96]	; (80009a4 <HAL_UART_RxCpltCallback+0x1a8>)
 8000944:	0092      	lsls	r2, r2, #2
 8000946:	58d2      	ldr	r2, [r2, r3]
 8000948:	4b14      	ldr	r3, [pc, #80]	; (800099c <HAL_UART_RxCpltCallback+0x1a0>)
 800094a:	681c      	ldr	r4, [r3, #0]
 800094c:	1c10      	adds	r0, r2, #0
 800094e:	f7ff fc67 	bl	8000220 <__aeabi_f2uiz>
 8000952:	0003      	movs	r3, r0
 8000954:	6423      	str	r3, [r4, #64]	; 0x40
	  HAL_UART_Transmit(huart , TXbuffer , TXsize , HAL_MAX_DELAY);
 8000956:	2301      	movs	r3, #1
 8000958:	425b      	negs	r3, r3
 800095a:	490e      	ldr	r1, [pc, #56]	; (8000994 <HAL_UART_RxCpltCallback+0x198>)
 800095c:	6878      	ldr	r0, [r7, #4]
 800095e:	2202      	movs	r2, #2
 8000960:	f002 fb60 	bl	8003024 <HAL_UART_Transmit>
  }
  RXbuffer[ACTION_INDEX] = 0x00;
 8000964:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <HAL_UART_RxCpltCallback+0x194>)
 8000966:	2200      	movs	r2, #0
 8000968:	701a      	strb	r2, [r3, #0]
  RXbuffer[AMOUNT_INDEX] = 0x00;
 800096a:	4b09      	ldr	r3, [pc, #36]	; (8000990 <HAL_UART_RxCpltCallback+0x194>)
 800096c:	2200      	movs	r2, #0
 800096e:	705a      	strb	r2, [r3, #1]
  TXbuffer[ACTION_INDEX] = 0x00;
 8000970:	4b08      	ldr	r3, [pc, #32]	; (8000994 <HAL_UART_RxCpltCallback+0x198>)
 8000972:	2200      	movs	r2, #0
 8000974:	701a      	strb	r2, [r3, #0]
  TXbuffer[AMOUNT_INDEX] = 0x00;
 8000976:	4b07      	ldr	r3, [pc, #28]	; (8000994 <HAL_UART_RxCpltCallback+0x198>)
 8000978:	2200      	movs	r2, #0
 800097a:	705a      	strb	r2, [r3, #1]
  HAL_UART_Receive_IT(&huart1, RXbuffer, RXsize);
 800097c:	4904      	ldr	r1, [pc, #16]	; (8000990 <HAL_UART_RxCpltCallback+0x194>)
 800097e:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <HAL_UART_RxCpltCallback+0x1ac>)
 8000980:	2202      	movs	r2, #2
 8000982:	0018      	movs	r0, r3
 8000984:	f002 fbee 	bl	8003164 <HAL_UART_Receive_IT>
}
 8000988:	46c0      	nop			; (mov r8, r8)
 800098a:	46bd      	mov	sp, r7
 800098c:	b004      	add	sp, #16
 800098e:	bdb0      	pop	{r4, r5, r7, pc}
 8000990:	2000012c 	.word	0x2000012c
 8000994:	20000128 	.word	0x20000128
 8000998:	20000000 	.word	0x20000000
 800099c:	20000058 	.word	0x20000058
 80009a0:	20000014 	.word	0x20000014
 80009a4:	20000028 	.word	0x20000028
 80009a8:	200000a0 	.word	0x200000a0

080009ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009ac:	b5b0      	push	{r4, r5, r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b0:	f000 fb22 	bl	8000ff8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009b4:	f000 f85a 	bl	8000a6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009b8:	f000 f988 	bl	8000ccc <MX_GPIO_Init>
  MX_TIM2_Init();
 80009bc:	f000 f8b8 	bl	8000b30 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80009c0:	f000 f954 	bl	8000c6c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 80009c4:	4b24      	ldr	r3, [pc, #144]	; (8000a58 <main+0xac>)
 80009c6:	0018      	movs	r0, r3
 80009c8:	f001 fc4c 	bl	8002264 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);
 80009cc:	4b22      	ldr	r3, [pc, #136]	; (8000a58 <main+0xac>)
 80009ce:	2104      	movs	r1, #4
 80009d0:	0018      	movs	r0, r3
 80009d2:	f001 fce9 	bl	80023a8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_3);
 80009d6:	4b20      	ldr	r3, [pc, #128]	; (8000a58 <main+0xac>)
 80009d8:	2108      	movs	r1, #8
 80009da:	0018      	movs	r0, r3
 80009dc:	f001 fce4 	bl	80023a8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 80009e0:	4b1d      	ldr	r3, [pc, #116]	; (8000a58 <main+0xac>)
 80009e2:	210c      	movs	r1, #12
 80009e4:	0018      	movs	r0, r3
 80009e6:	f001 fcdf 	bl	80023a8 <HAL_TIM_PWM_Start>
  __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_2, toggle_pwms[0]);
 80009ea:	4b1c      	ldr	r3, [pc, #112]	; (8000a5c <main+0xb0>)
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	4b1a      	ldr	r3, [pc, #104]	; (8000a58 <main+0xac>)
 80009f0:	681c      	ldr	r4, [r3, #0]
 80009f2:	1c10      	adds	r0, r2, #0
 80009f4:	f7ff fc14 	bl	8000220 <__aeabi_f2uiz>
 80009f8:	0003      	movs	r3, r0
 80009fa:	63a3      	str	r3, [r4, #56]	; 0x38
  __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, toggle_pwms[0]);
 80009fc:	4b17      	ldr	r3, [pc, #92]	; (8000a5c <main+0xb0>)
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	4b15      	ldr	r3, [pc, #84]	; (8000a58 <main+0xac>)
 8000a02:	681c      	ldr	r4, [r3, #0]
 8000a04:	1c10      	adds	r0, r2, #0
 8000a06:	f7ff fc0b 	bl	8000220 <__aeabi_f2uiz>
 8000a0a:	0003      	movs	r3, r0
 8000a0c:	63e3      	str	r3, [r4, #60]	; 0x3c
  __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4, toggle_pwms[0]);
 8000a0e:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <main+0xb0>)
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <main+0xac>)
 8000a14:	681c      	ldr	r4, [r3, #0]
 8000a16:	1c10      	adds	r0, r2, #0
 8000a18:	f7ff fc02 	bl	8000220 <__aeabi_f2uiz>
 8000a1c:	0003      	movs	r3, r0
 8000a1e:	6423      	str	r3, [r4, #64]	; 0x40
  HAL_UART_Receive_IT(&huart1, RXbuffer, RXsize);
 8000a20:	490f      	ldr	r1, [pc, #60]	; (8000a60 <main+0xb4>)
 8000a22:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <main+0xb8>)
 8000a24:	2202      	movs	r2, #2
 8000a26:	0018      	movs	r0, r3
 8000a28:	f002 fb9c 	bl	8003164 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (HAL_GPIO_ReadPin(GPIOA,User_Pin) == GPIO_PIN_SET)
 8000a2c:	2390      	movs	r3, #144	; 0x90
 8000a2e:	05db      	lsls	r3, r3, #23
 8000a30:	2101      	movs	r1, #1
 8000a32:	0018      	movs	r0, r3
 8000a34:	f000 fe34 	bl	80016a0 <HAL_GPIO_ReadPin>
 8000a38:	0003      	movs	r3, r0
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d1f6      	bne.n	8000a2c <main+0x80>
	  {
		  HAL_GPIO_TogglePin(GPIOC , Blink_Pin);
 8000a3e:	2380      	movs	r3, #128	; 0x80
 8000a40:	005b      	lsls	r3, r3, #1
 8000a42:	4a09      	ldr	r2, [pc, #36]	; (8000a68 <main+0xbc>)
 8000a44:	0019      	movs	r1, r3
 8000a46:	0010      	movs	r0, r2
 8000a48:	f000 fe64 	bl	8001714 <HAL_GPIO_TogglePin>
		  HAL_Delay(500);
 8000a4c:	23fa      	movs	r3, #250	; 0xfa
 8000a4e:	005b      	lsls	r3, r3, #1
 8000a50:	0018      	movs	r0, r3
 8000a52:	f000 fb35 	bl	80010c0 <HAL_Delay>
	  if (HAL_GPIO_ReadPin(GPIOA,User_Pin) == GPIO_PIN_SET)
 8000a56:	e7e9      	b.n	8000a2c <main+0x80>
 8000a58:	20000058 	.word	0x20000058
 8000a5c:	20000028 	.word	0x20000028
 8000a60:	2000012c 	.word	0x2000012c
 8000a64:	200000a0 	.word	0x200000a0
 8000a68:	48000800 	.word	0x48000800

08000a6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a6c:	b590      	push	{r4, r7, lr}
 8000a6e:	b097      	sub	sp, #92	; 0x5c
 8000a70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a72:	2428      	movs	r4, #40	; 0x28
 8000a74:	193b      	adds	r3, r7, r4
 8000a76:	0018      	movs	r0, r3
 8000a78:	2330      	movs	r3, #48	; 0x30
 8000a7a:	001a      	movs	r2, r3
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	f003 fd0b 	bl	8004498 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a82:	2318      	movs	r3, #24
 8000a84:	18fb      	adds	r3, r7, r3
 8000a86:	0018      	movs	r0, r3
 8000a88:	2310      	movs	r3, #16
 8000a8a:	001a      	movs	r2, r3
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	f003 fd03 	bl	8004498 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a92:	1d3b      	adds	r3, r7, #4
 8000a94:	0018      	movs	r0, r3
 8000a96:	2314      	movs	r3, #20
 8000a98:	001a      	movs	r2, r3
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	f003 fcfc 	bl	8004498 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000aa0:	0021      	movs	r1, r4
 8000aa2:	187b      	adds	r3, r7, r1
 8000aa4:	2202      	movs	r2, #2
 8000aa6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aa8:	187b      	adds	r3, r7, r1
 8000aaa:	2201      	movs	r2, #1
 8000aac:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aae:	187b      	adds	r3, r7, r1
 8000ab0:	2210      	movs	r2, #16
 8000ab2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ab4:	187b      	adds	r3, r7, r1
 8000ab6:	2202      	movs	r2, #2
 8000ab8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000aba:	187b      	adds	r3, r7, r1
 8000abc:	2200      	movs	r2, #0
 8000abe:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000ac0:	187b      	adds	r3, r7, r1
 8000ac2:	22a0      	movs	r2, #160	; 0xa0
 8000ac4:	0392      	lsls	r2, r2, #14
 8000ac6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000ac8:	187b      	adds	r3, r7, r1
 8000aca:	2200      	movs	r2, #0
 8000acc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ace:	187b      	adds	r3, r7, r1
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	f000 fe3b 	bl	800174c <HAL_RCC_OscConfig>
 8000ad6:	1e03      	subs	r3, r0, #0
 8000ad8:	d001      	beq.n	8000ade <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000ada:	f000 f95f 	bl	8000d9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ade:	2118      	movs	r1, #24
 8000ae0:	187b      	adds	r3, r7, r1
 8000ae2:	2207      	movs	r2, #7
 8000ae4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ae6:	187b      	adds	r3, r7, r1
 8000ae8:	2202      	movs	r2, #2
 8000aea:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aec:	187b      	adds	r3, r7, r1
 8000aee:	2200      	movs	r2, #0
 8000af0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000af2:	187b      	adds	r3, r7, r1
 8000af4:	2200      	movs	r2, #0
 8000af6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000af8:	187b      	adds	r3, r7, r1
 8000afa:	2101      	movs	r1, #1
 8000afc:	0018      	movs	r0, r3
 8000afe:	f001 f93f 	bl	8001d80 <HAL_RCC_ClockConfig>
 8000b02:	1e03      	subs	r3, r0, #0
 8000b04:	d001      	beq.n	8000b0a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000b06:	f000 f949 	bl	8000d9c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b0a:	1d3b      	adds	r3, r7, #4
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b16:	1d3b      	adds	r3, r7, #4
 8000b18:	0018      	movs	r0, r3
 8000b1a:	f001 fa75 	bl	8002008 <HAL_RCCEx_PeriphCLKConfig>
 8000b1e:	1e03      	subs	r3, r0, #0
 8000b20:	d001      	beq.n	8000b26 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000b22:	f000 f93b 	bl	8000d9c <Error_Handler>
  }
}
 8000b26:	46c0      	nop			; (mov r8, r8)
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	b017      	add	sp, #92	; 0x5c
 8000b2c:	bd90      	pop	{r4, r7, pc}
	...

08000b30 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08e      	sub	sp, #56	; 0x38
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b36:	2328      	movs	r3, #40	; 0x28
 8000b38:	18fb      	adds	r3, r7, r3
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	2310      	movs	r3, #16
 8000b3e:	001a      	movs	r2, r3
 8000b40:	2100      	movs	r1, #0
 8000b42:	f003 fca9 	bl	8004498 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b46:	2320      	movs	r3, #32
 8000b48:	18fb      	adds	r3, r7, r3
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	2308      	movs	r3, #8
 8000b4e:	001a      	movs	r2, r3
 8000b50:	2100      	movs	r1, #0
 8000b52:	f003 fca1 	bl	8004498 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b56:	1d3b      	adds	r3, r7, #4
 8000b58:	0018      	movs	r0, r3
 8000b5a:	231c      	movs	r3, #28
 8000b5c:	001a      	movs	r2, r3
 8000b5e:	2100      	movs	r1, #0
 8000b60:	f003 fc9a 	bl	8004498 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b64:	4b40      	ldr	r3, [pc, #256]	; (8000c68 <MX_TIM2_Init+0x138>)
 8000b66:	2280      	movs	r2, #128	; 0x80
 8000b68:	05d2      	lsls	r2, r2, #23
 8000b6a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 960;
 8000b6c:	4b3e      	ldr	r3, [pc, #248]	; (8000c68 <MX_TIM2_Init+0x138>)
 8000b6e:	22f0      	movs	r2, #240	; 0xf0
 8000b70:	0092      	lsls	r2, r2, #2
 8000b72:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b74:	4b3c      	ldr	r3, [pc, #240]	; (8000c68 <MX_TIM2_Init+0x138>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8000b7a:	4b3b      	ldr	r3, [pc, #236]	; (8000c68 <MX_TIM2_Init+0x138>)
 8000b7c:	22fa      	movs	r2, #250	; 0xfa
 8000b7e:	0092      	lsls	r2, r2, #2
 8000b80:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b82:	4b39      	ldr	r3, [pc, #228]	; (8000c68 <MX_TIM2_Init+0x138>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b88:	4b37      	ldr	r3, [pc, #220]	; (8000c68 <MX_TIM2_Init+0x138>)
 8000b8a:	2280      	movs	r2, #128	; 0x80
 8000b8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b8e:	4b36      	ldr	r3, [pc, #216]	; (8000c68 <MX_TIM2_Init+0x138>)
 8000b90:	0018      	movs	r0, r3
 8000b92:	f001 fb17 	bl	80021c4 <HAL_TIM_Base_Init>
 8000b96:	1e03      	subs	r3, r0, #0
 8000b98:	d001      	beq.n	8000b9e <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000b9a:	f000 f8ff 	bl	8000d9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b9e:	2128      	movs	r1, #40	; 0x28
 8000ba0:	187b      	adds	r3, r7, r1
 8000ba2:	2280      	movs	r2, #128	; 0x80
 8000ba4:	0152      	lsls	r2, r2, #5
 8000ba6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ba8:	187a      	adds	r2, r7, r1
 8000baa:	4b2f      	ldr	r3, [pc, #188]	; (8000c68 <MX_TIM2_Init+0x138>)
 8000bac:	0011      	movs	r1, r2
 8000bae:	0018      	movs	r0, r3
 8000bb0:	f001 fd78 	bl	80026a4 <HAL_TIM_ConfigClockSource>
 8000bb4:	1e03      	subs	r3, r0, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000bb8:	f000 f8f0 	bl	8000d9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000bbc:	4b2a      	ldr	r3, [pc, #168]	; (8000c68 <MX_TIM2_Init+0x138>)
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	f001 fb9a 	bl	80022f8 <HAL_TIM_PWM_Init>
 8000bc4:	1e03      	subs	r3, r0, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000bc8:	f000 f8e8 	bl	8000d9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bcc:	2120      	movs	r1, #32
 8000bce:	187b      	adds	r3, r7, r1
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bd4:	187b      	adds	r3, r7, r1
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bda:	187a      	adds	r2, r7, r1
 8000bdc:	4b22      	ldr	r3, [pc, #136]	; (8000c68 <MX_TIM2_Init+0x138>)
 8000bde:	0011      	movs	r1, r2
 8000be0:	0018      	movs	r0, r3
 8000be2:	f002 f96d 	bl	8002ec0 <HAL_TIMEx_MasterConfigSynchronization>
 8000be6:	1e03      	subs	r3, r0, #0
 8000be8:	d001      	beq.n	8000bee <MX_TIM2_Init+0xbe>
  {
    Error_Handler();
 8000bea:	f000 f8d7 	bl	8000d9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	2260      	movs	r2, #96	; 0x60
 8000bf2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000bf4:	1d3b      	adds	r3, r7, #4
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bfa:	1d3b      	adds	r3, r7, #4
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c00:	1d3b      	adds	r3, r7, #4
 8000c02:	2200      	movs	r2, #0
 8000c04:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c06:	1d39      	adds	r1, r7, #4
 8000c08:	4b17      	ldr	r3, [pc, #92]	; (8000c68 <MX_TIM2_Init+0x138>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f001 fc83 	bl	8002518 <HAL_TIM_PWM_ConfigChannel>
 8000c12:	1e03      	subs	r3, r0, #0
 8000c14:	d001      	beq.n	8000c1a <MX_TIM2_Init+0xea>
  {
    Error_Handler();
 8000c16:	f000 f8c1 	bl	8000d9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c1a:	1d39      	adds	r1, r7, #4
 8000c1c:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <MX_TIM2_Init+0x138>)
 8000c1e:	2204      	movs	r2, #4
 8000c20:	0018      	movs	r0, r3
 8000c22:	f001 fc79 	bl	8002518 <HAL_TIM_PWM_ConfigChannel>
 8000c26:	1e03      	subs	r3, r0, #0
 8000c28:	d001      	beq.n	8000c2e <MX_TIM2_Init+0xfe>
  {
    Error_Handler();
 8000c2a:	f000 f8b7 	bl	8000d9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c2e:	1d39      	adds	r1, r7, #4
 8000c30:	4b0d      	ldr	r3, [pc, #52]	; (8000c68 <MX_TIM2_Init+0x138>)
 8000c32:	2208      	movs	r2, #8
 8000c34:	0018      	movs	r0, r3
 8000c36:	f001 fc6f 	bl	8002518 <HAL_TIM_PWM_ConfigChannel>
 8000c3a:	1e03      	subs	r3, r0, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_TIM2_Init+0x112>
  {
    Error_Handler();
 8000c3e:	f000 f8ad 	bl	8000d9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c42:	1d39      	adds	r1, r7, #4
 8000c44:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <MX_TIM2_Init+0x138>)
 8000c46:	220c      	movs	r2, #12
 8000c48:	0018      	movs	r0, r3
 8000c4a:	f001 fc65 	bl	8002518 <HAL_TIM_PWM_ConfigChannel>
 8000c4e:	1e03      	subs	r3, r0, #0
 8000c50:	d001      	beq.n	8000c56 <MX_TIM2_Init+0x126>
  {
    Error_Handler();
 8000c52:	f000 f8a3 	bl	8000d9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c56:	4b04      	ldr	r3, [pc, #16]	; (8000c68 <MX_TIM2_Init+0x138>)
 8000c58:	0018      	movs	r0, r3
 8000c5a:	f000 f8e5 	bl	8000e28 <HAL_TIM_MspPostInit>

}
 8000c5e:	46c0      	nop			; (mov r8, r8)
 8000c60:	46bd      	mov	sp, r7
 8000c62:	b00e      	add	sp, #56	; 0x38
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	46c0      	nop			; (mov r8, r8)
 8000c68:	20000058 	.word	0x20000058

08000c6c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c70:	4b14      	ldr	r3, [pc, #80]	; (8000cc4 <MX_USART1_UART_Init+0x58>)
 8000c72:	4a15      	ldr	r2, [pc, #84]	; (8000cc8 <MX_USART1_UART_Init+0x5c>)
 8000c74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000c76:	4b13      	ldr	r3, [pc, #76]	; (8000cc4 <MX_USART1_UART_Init+0x58>)
 8000c78:	2296      	movs	r2, #150	; 0x96
 8000c7a:	0192      	lsls	r2, r2, #6
 8000c7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c7e:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <MX_USART1_UART_Init+0x58>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c84:	4b0f      	ldr	r3, [pc, #60]	; (8000cc4 <MX_USART1_UART_Init+0x58>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c8a:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <MX_USART1_UART_Init+0x58>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c90:	4b0c      	ldr	r3, [pc, #48]	; (8000cc4 <MX_USART1_UART_Init+0x58>)
 8000c92:	220c      	movs	r2, #12
 8000c94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c96:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <MX_USART1_UART_Init+0x58>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c9c:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <MX_USART1_UART_Init+0x58>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ca2:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <MX_USART1_UART_Init+0x58>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <MX_USART1_UART_Init+0x58>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cae:	4b05      	ldr	r3, [pc, #20]	; (8000cc4 <MX_USART1_UART_Init+0x58>)
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	f002 f963 	bl	8002f7c <HAL_UART_Init>
 8000cb6:	1e03      	subs	r3, r0, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000cba:	f000 f86f 	bl	8000d9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	200000a0 	.word	0x200000a0
 8000cc8:	40013800 	.word	0x40013800

08000ccc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ccc:	b590      	push	{r4, r7, lr}
 8000cce:	b089      	sub	sp, #36	; 0x24
 8000cd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd2:	240c      	movs	r4, #12
 8000cd4:	193b      	adds	r3, r7, r4
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	2314      	movs	r3, #20
 8000cda:	001a      	movs	r2, r3
 8000cdc:	2100      	movs	r1, #0
 8000cde:	f003 fbdb 	bl	8004498 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce2:	4b2c      	ldr	r3, [pc, #176]	; (8000d94 <MX_GPIO_Init+0xc8>)
 8000ce4:	695a      	ldr	r2, [r3, #20]
 8000ce6:	4b2b      	ldr	r3, [pc, #172]	; (8000d94 <MX_GPIO_Init+0xc8>)
 8000ce8:	2180      	movs	r1, #128	; 0x80
 8000cea:	0289      	lsls	r1, r1, #10
 8000cec:	430a      	orrs	r2, r1
 8000cee:	615a      	str	r2, [r3, #20]
 8000cf0:	4b28      	ldr	r3, [pc, #160]	; (8000d94 <MX_GPIO_Init+0xc8>)
 8000cf2:	695a      	ldr	r2, [r3, #20]
 8000cf4:	2380      	movs	r3, #128	; 0x80
 8000cf6:	029b      	lsls	r3, r3, #10
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	60bb      	str	r3, [r7, #8]
 8000cfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cfe:	4b25      	ldr	r3, [pc, #148]	; (8000d94 <MX_GPIO_Init+0xc8>)
 8000d00:	695a      	ldr	r2, [r3, #20]
 8000d02:	4b24      	ldr	r3, [pc, #144]	; (8000d94 <MX_GPIO_Init+0xc8>)
 8000d04:	2180      	movs	r1, #128	; 0x80
 8000d06:	0309      	lsls	r1, r1, #12
 8000d08:	430a      	orrs	r2, r1
 8000d0a:	615a      	str	r2, [r3, #20]
 8000d0c:	4b21      	ldr	r3, [pc, #132]	; (8000d94 <MX_GPIO_Init+0xc8>)
 8000d0e:	695a      	ldr	r2, [r3, #20]
 8000d10:	2380      	movs	r3, #128	; 0x80
 8000d12:	031b      	lsls	r3, r3, #12
 8000d14:	4013      	ands	r3, r2
 8000d16:	607b      	str	r3, [r7, #4]
 8000d18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1a:	4b1e      	ldr	r3, [pc, #120]	; (8000d94 <MX_GPIO_Init+0xc8>)
 8000d1c:	695a      	ldr	r2, [r3, #20]
 8000d1e:	4b1d      	ldr	r3, [pc, #116]	; (8000d94 <MX_GPIO_Init+0xc8>)
 8000d20:	2180      	movs	r1, #128	; 0x80
 8000d22:	02c9      	lsls	r1, r1, #11
 8000d24:	430a      	orrs	r2, r1
 8000d26:	615a      	str	r2, [r3, #20]
 8000d28:	4b1a      	ldr	r3, [pc, #104]	; (8000d94 <MX_GPIO_Init+0xc8>)
 8000d2a:	695a      	ldr	r2, [r3, #20]
 8000d2c:	2380      	movs	r3, #128	; 0x80
 8000d2e:	02db      	lsls	r3, r3, #11
 8000d30:	4013      	ands	r3, r2
 8000d32:	603b      	str	r3, [r7, #0]
 8000d34:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Blink_GPIO_Port, Blink_Pin, GPIO_PIN_SET);
 8000d36:	2380      	movs	r3, #128	; 0x80
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	4817      	ldr	r0, [pc, #92]	; (8000d98 <MX_GPIO_Init+0xcc>)
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	0019      	movs	r1, r3
 8000d40:	f000 fccb 	bl	80016da <HAL_GPIO_WritePin>

  /*Configure GPIO pin : User_Pin */
  GPIO_InitStruct.Pin = User_Pin;
 8000d44:	193b      	adds	r3, r7, r4
 8000d46:	2201      	movs	r2, #1
 8000d48:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d4a:	193b      	adds	r3, r7, r4
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	193b      	adds	r3, r7, r4
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_GPIO_Port, &GPIO_InitStruct);
 8000d56:	193a      	adds	r2, r7, r4
 8000d58:	2390      	movs	r3, #144	; 0x90
 8000d5a:	05db      	lsls	r3, r3, #23
 8000d5c:	0011      	movs	r1, r2
 8000d5e:	0018      	movs	r0, r3
 8000d60:	f000 fb2e 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Blink_Pin */
  GPIO_InitStruct.Pin = Blink_Pin;
 8000d64:	0021      	movs	r1, r4
 8000d66:	187b      	adds	r3, r7, r1
 8000d68:	2280      	movs	r2, #128	; 0x80
 8000d6a:	0052      	lsls	r2, r2, #1
 8000d6c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6e:	187b      	adds	r3, r7, r1
 8000d70:	2201      	movs	r2, #1
 8000d72:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	187b      	adds	r3, r7, r1
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d7a:	187b      	adds	r3, r7, r1
 8000d7c:	2203      	movs	r2, #3
 8000d7e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Blink_GPIO_Port, &GPIO_InitStruct);
 8000d80:	187b      	adds	r3, r7, r1
 8000d82:	4a05      	ldr	r2, [pc, #20]	; (8000d98 <MX_GPIO_Init+0xcc>)
 8000d84:	0019      	movs	r1, r3
 8000d86:	0010      	movs	r0, r2
 8000d88:	f000 fb1a 	bl	80013c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d8c:	46c0      	nop			; (mov r8, r8)
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	b009      	add	sp, #36	; 0x24
 8000d92:	bd90      	pop	{r4, r7, pc}
 8000d94:	40021000 	.word	0x40021000
 8000d98:	48000800 	.word	0x48000800

08000d9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000da0:	b672      	cpsid	i
}
 8000da2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <Error_Handler+0x8>
	...

08000da8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dae:	4b0f      	ldr	r3, [pc, #60]	; (8000dec <HAL_MspInit+0x44>)
 8000db0:	699a      	ldr	r2, [r3, #24]
 8000db2:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <HAL_MspInit+0x44>)
 8000db4:	2101      	movs	r1, #1
 8000db6:	430a      	orrs	r2, r1
 8000db8:	619a      	str	r2, [r3, #24]
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <HAL_MspInit+0x44>)
 8000dbc:	699b      	ldr	r3, [r3, #24]
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	607b      	str	r3, [r7, #4]
 8000dc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc6:	4b09      	ldr	r3, [pc, #36]	; (8000dec <HAL_MspInit+0x44>)
 8000dc8:	69da      	ldr	r2, [r3, #28]
 8000dca:	4b08      	ldr	r3, [pc, #32]	; (8000dec <HAL_MspInit+0x44>)
 8000dcc:	2180      	movs	r1, #128	; 0x80
 8000dce:	0549      	lsls	r1, r1, #21
 8000dd0:	430a      	orrs	r2, r1
 8000dd2:	61da      	str	r2, [r3, #28]
 8000dd4:	4b05      	ldr	r3, [pc, #20]	; (8000dec <HAL_MspInit+0x44>)
 8000dd6:	69da      	ldr	r2, [r3, #28]
 8000dd8:	2380      	movs	r3, #128	; 0x80
 8000dda:	055b      	lsls	r3, r3, #21
 8000ddc:	4013      	ands	r3, r2
 8000dde:	603b      	str	r3, [r7, #0]
 8000de0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000de2:	46c0      	nop			; (mov r8, r8)
 8000de4:	46bd      	mov	sp, r7
 8000de6:	b002      	add	sp, #8
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	46c0      	nop			; (mov r8, r8)
 8000dec:	40021000 	.word	0x40021000

08000df0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	2380      	movs	r3, #128	; 0x80
 8000dfe:	05db      	lsls	r3, r3, #23
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d10b      	bne.n	8000e1c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e04:	4b07      	ldr	r3, [pc, #28]	; (8000e24 <HAL_TIM_Base_MspInit+0x34>)
 8000e06:	69da      	ldr	r2, [r3, #28]
 8000e08:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <HAL_TIM_Base_MspInit+0x34>)
 8000e0a:	2101      	movs	r1, #1
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	61da      	str	r2, [r3, #28]
 8000e10:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <HAL_TIM_Base_MspInit+0x34>)
 8000e12:	69db      	ldr	r3, [r3, #28]
 8000e14:	2201      	movs	r2, #1
 8000e16:	4013      	ands	r3, r2
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e1c:	46c0      	nop			; (mov r8, r8)
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	b004      	add	sp, #16
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40021000 	.word	0x40021000

08000e28 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e28:	b590      	push	{r4, r7, lr}
 8000e2a:	b089      	sub	sp, #36	; 0x24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	240c      	movs	r4, #12
 8000e32:	193b      	adds	r3, r7, r4
 8000e34:	0018      	movs	r0, r3
 8000e36:	2314      	movs	r3, #20
 8000e38:	001a      	movs	r2, r3
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	f003 fb2c 	bl	8004498 <memset>
  if(htim->Instance==TIM2)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	2380      	movs	r3, #128	; 0x80
 8000e46:	05db      	lsls	r3, r3, #23
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d124      	bne.n	8000e96 <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4c:	4b14      	ldr	r3, [pc, #80]	; (8000ea0 <HAL_TIM_MspPostInit+0x78>)
 8000e4e:	695a      	ldr	r2, [r3, #20]
 8000e50:	4b13      	ldr	r3, [pc, #76]	; (8000ea0 <HAL_TIM_MspPostInit+0x78>)
 8000e52:	2180      	movs	r1, #128	; 0x80
 8000e54:	0289      	lsls	r1, r1, #10
 8000e56:	430a      	orrs	r2, r1
 8000e58:	615a      	str	r2, [r3, #20]
 8000e5a:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <HAL_TIM_MspPostInit+0x78>)
 8000e5c:	695a      	ldr	r2, [r3, #20]
 8000e5e:	2380      	movs	r3, #128	; 0x80
 8000e60:	029b      	lsls	r3, r3, #10
 8000e62:	4013      	ands	r3, r2
 8000e64:	60bb      	str	r3, [r7, #8]
 8000e66:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = Dispenser_A_Pin|Dispenser_B_Pin|Lock_Pin|Speaker_Pin;
 8000e68:	0021      	movs	r1, r4
 8000e6a:	187b      	adds	r3, r7, r1
 8000e6c:	222e      	movs	r2, #46	; 0x2e
 8000e6e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e70:	187b      	adds	r3, r7, r1
 8000e72:	2202      	movs	r2, #2
 8000e74:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	187b      	adds	r3, r7, r1
 8000e78:	2200      	movs	r2, #0
 8000e7a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7c:	187b      	adds	r3, r7, r1
 8000e7e:	2200      	movs	r2, #0
 8000e80:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000e82:	187b      	adds	r3, r7, r1
 8000e84:	2202      	movs	r2, #2
 8000e86:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e88:	187a      	adds	r2, r7, r1
 8000e8a:	2390      	movs	r3, #144	; 0x90
 8000e8c:	05db      	lsls	r3, r3, #23
 8000e8e:	0011      	movs	r1, r2
 8000e90:	0018      	movs	r0, r3
 8000e92:	f000 fa95 	bl	80013c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000e96:	46c0      	nop			; (mov r8, r8)
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	b009      	add	sp, #36	; 0x24
 8000e9c:	bd90      	pop	{r4, r7, pc}
 8000e9e:	46c0      	nop			; (mov r8, r8)
 8000ea0:	40021000 	.word	0x40021000

08000ea4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ea4:	b590      	push	{r4, r7, lr}
 8000ea6:	b08b      	sub	sp, #44	; 0x2c
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eac:	2414      	movs	r4, #20
 8000eae:	193b      	adds	r3, r7, r4
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	2314      	movs	r3, #20
 8000eb4:	001a      	movs	r2, r3
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	f003 faee 	bl	8004498 <memset>
  if(huart->Instance==USART1)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a20      	ldr	r2, [pc, #128]	; (8000f44 <HAL_UART_MspInit+0xa0>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d139      	bne.n	8000f3a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ec6:	4b20      	ldr	r3, [pc, #128]	; (8000f48 <HAL_UART_MspInit+0xa4>)
 8000ec8:	699a      	ldr	r2, [r3, #24]
 8000eca:	4b1f      	ldr	r3, [pc, #124]	; (8000f48 <HAL_UART_MspInit+0xa4>)
 8000ecc:	2180      	movs	r1, #128	; 0x80
 8000ece:	01c9      	lsls	r1, r1, #7
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	619a      	str	r2, [r3, #24]
 8000ed4:	4b1c      	ldr	r3, [pc, #112]	; (8000f48 <HAL_UART_MspInit+0xa4>)
 8000ed6:	699a      	ldr	r2, [r3, #24]
 8000ed8:	2380      	movs	r3, #128	; 0x80
 8000eda:	01db      	lsls	r3, r3, #7
 8000edc:	4013      	ands	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
 8000ee0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee2:	4b19      	ldr	r3, [pc, #100]	; (8000f48 <HAL_UART_MspInit+0xa4>)
 8000ee4:	695a      	ldr	r2, [r3, #20]
 8000ee6:	4b18      	ldr	r3, [pc, #96]	; (8000f48 <HAL_UART_MspInit+0xa4>)
 8000ee8:	2180      	movs	r1, #128	; 0x80
 8000eea:	02c9      	lsls	r1, r1, #11
 8000eec:	430a      	orrs	r2, r1
 8000eee:	615a      	str	r2, [r3, #20]
 8000ef0:	4b15      	ldr	r3, [pc, #84]	; (8000f48 <HAL_UART_MspInit+0xa4>)
 8000ef2:	695a      	ldr	r2, [r3, #20]
 8000ef4:	2380      	movs	r3, #128	; 0x80
 8000ef6:	02db      	lsls	r3, r3, #11
 8000ef8:	4013      	ands	r3, r2
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = RPI_TX_Pin|RPI_RX_Pin;
 8000efe:	0021      	movs	r1, r4
 8000f00:	187b      	adds	r3, r7, r1
 8000f02:	22c0      	movs	r2, #192	; 0xc0
 8000f04:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f06:	187b      	adds	r3, r7, r1
 8000f08:	2202      	movs	r2, #2
 8000f0a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	187b      	adds	r3, r7, r1
 8000f0e:	2200      	movs	r2, #0
 8000f10:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f12:	187b      	adds	r3, r7, r1
 8000f14:	2203      	movs	r2, #3
 8000f16:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000f18:	187b      	adds	r3, r7, r1
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f1e:	187b      	adds	r3, r7, r1
 8000f20:	4a0a      	ldr	r2, [pc, #40]	; (8000f4c <HAL_UART_MspInit+0xa8>)
 8000f22:	0019      	movs	r1, r3
 8000f24:	0010      	movs	r0, r2
 8000f26:	f000 fa4b 	bl	80013c0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	201b      	movs	r0, #27
 8000f30:	f000 f996 	bl	8001260 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f34:	201b      	movs	r0, #27
 8000f36:	f000 f9a8 	bl	800128a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f3a:	46c0      	nop			; (mov r8, r8)
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	b00b      	add	sp, #44	; 0x2c
 8000f40:	bd90      	pop	{r4, r7, pc}
 8000f42:	46c0      	nop			; (mov r8, r8)
 8000f44:	40013800 	.word	0x40013800
 8000f48:	40021000 	.word	0x40021000
 8000f4c:	48000400 	.word	0x48000400

08000f50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <NMI_Handler+0x4>

08000f56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f5a:	e7fe      	b.n	8000f5a <HardFault_Handler+0x4>

08000f5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f60:	46c0      	nop			; (mov r8, r8)
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f6a:	46c0      	nop			; (mov r8, r8)
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f74:	f000 f888 	bl	8001088 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f78:	46c0      	nop			; (mov r8, r8)
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
	...

08000f80 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f84:	4b03      	ldr	r3, [pc, #12]	; (8000f94 <USART1_IRQHandler+0x14>)
 8000f86:	0018      	movs	r0, r3
 8000f88:	f002 f944 	bl	8003214 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f8c:	46c0      	nop			; (mov r8, r8)
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	46c0      	nop			; (mov r8, r8)
 8000f94:	200000a0 	.word	0x200000a0

08000f98 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000f9c:	46c0      	nop			; (mov r8, r8)
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
	...

08000fa4 <Reset_Handler>:
 8000fa4:	480d      	ldr	r0, [pc, #52]	; (8000fdc <LoopForever+0x2>)
 8000fa6:	4685      	mov	sp, r0
 8000fa8:	480d      	ldr	r0, [pc, #52]	; (8000fe0 <LoopForever+0x6>)
 8000faa:	490e      	ldr	r1, [pc, #56]	; (8000fe4 <LoopForever+0xa>)
 8000fac:	4a0e      	ldr	r2, [pc, #56]	; (8000fe8 <LoopForever+0xe>)
 8000fae:	2300      	movs	r3, #0
 8000fb0:	e002      	b.n	8000fb8 <LoopCopyDataInit>

08000fb2 <CopyDataInit>:
 8000fb2:	58d4      	ldr	r4, [r2, r3]
 8000fb4:	50c4      	str	r4, [r0, r3]
 8000fb6:	3304      	adds	r3, #4

08000fb8 <LoopCopyDataInit>:
 8000fb8:	18c4      	adds	r4, r0, r3
 8000fba:	428c      	cmp	r4, r1
 8000fbc:	d3f9      	bcc.n	8000fb2 <CopyDataInit>
 8000fbe:	4a0b      	ldr	r2, [pc, #44]	; (8000fec <LoopForever+0x12>)
 8000fc0:	4c0b      	ldr	r4, [pc, #44]	; (8000ff0 <LoopForever+0x16>)
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	e001      	b.n	8000fca <LoopFillZerobss>

08000fc6 <FillZerobss>:
 8000fc6:	6013      	str	r3, [r2, #0]
 8000fc8:	3204      	adds	r2, #4

08000fca <LoopFillZerobss>:
 8000fca:	42a2      	cmp	r2, r4
 8000fcc:	d3fb      	bcc.n	8000fc6 <FillZerobss>
 8000fce:	f7ff ffe3 	bl	8000f98 <SystemInit>
 8000fd2:	f003 fa3d 	bl	8004450 <__libc_init_array>
 8000fd6:	f7ff fce9 	bl	80009ac <main>

08000fda <LoopForever>:
 8000fda:	e7fe      	b.n	8000fda <LoopForever>
 8000fdc:	20002000 	.word	0x20002000
 8000fe0:	20000000 	.word	0x20000000
 8000fe4:	2000003c 	.word	0x2000003c
 8000fe8:	08004500 	.word	0x08004500
 8000fec:	2000003c 	.word	0x2000003c
 8000ff0:	20000134 	.word	0x20000134

08000ff4 <ADC1_COMP_IRQHandler>:
 8000ff4:	e7fe      	b.n	8000ff4 <ADC1_COMP_IRQHandler>
	...

08000ff8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ffc:	4b07      	ldr	r3, [pc, #28]	; (800101c <HAL_Init+0x24>)
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	4b06      	ldr	r3, [pc, #24]	; (800101c <HAL_Init+0x24>)
 8001002:	2110      	movs	r1, #16
 8001004:	430a      	orrs	r2, r1
 8001006:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001008:	2000      	movs	r0, #0
 800100a:	f000 f809 	bl	8001020 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800100e:	f7ff fecb 	bl	8000da8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001012:	2300      	movs	r3, #0
}
 8001014:	0018      	movs	r0, r3
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	46c0      	nop			; (mov r8, r8)
 800101c:	40022000 	.word	0x40022000

08001020 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001020:	b590      	push	{r4, r7, lr}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001028:	4b14      	ldr	r3, [pc, #80]	; (800107c <HAL_InitTick+0x5c>)
 800102a:	681c      	ldr	r4, [r3, #0]
 800102c:	4b14      	ldr	r3, [pc, #80]	; (8001080 <HAL_InitTick+0x60>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	0019      	movs	r1, r3
 8001032:	23fa      	movs	r3, #250	; 0xfa
 8001034:	0098      	lsls	r0, r3, #2
 8001036:	f7ff f867 	bl	8000108 <__udivsi3>
 800103a:	0003      	movs	r3, r0
 800103c:	0019      	movs	r1, r3
 800103e:	0020      	movs	r0, r4
 8001040:	f7ff f862 	bl	8000108 <__udivsi3>
 8001044:	0003      	movs	r3, r0
 8001046:	0018      	movs	r0, r3
 8001048:	f000 f92f 	bl	80012aa <HAL_SYSTICK_Config>
 800104c:	1e03      	subs	r3, r0, #0
 800104e:	d001      	beq.n	8001054 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	e00f      	b.n	8001074 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2b03      	cmp	r3, #3
 8001058:	d80b      	bhi.n	8001072 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800105a:	6879      	ldr	r1, [r7, #4]
 800105c:	2301      	movs	r3, #1
 800105e:	425b      	negs	r3, r3
 8001060:	2200      	movs	r2, #0
 8001062:	0018      	movs	r0, r3
 8001064:	f000 f8fc 	bl	8001260 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001068:	4b06      	ldr	r3, [pc, #24]	; (8001084 <HAL_InitTick+0x64>)
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800106e:	2300      	movs	r3, #0
 8001070:	e000      	b.n	8001074 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
}
 8001074:	0018      	movs	r0, r3
 8001076:	46bd      	mov	sp, r7
 8001078:	b003      	add	sp, #12
 800107a:	bd90      	pop	{r4, r7, pc}
 800107c:	20000030 	.word	0x20000030
 8001080:	20000038 	.word	0x20000038
 8001084:	20000034 	.word	0x20000034

08001088 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <HAL_IncTick+0x1c>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	001a      	movs	r2, r3
 8001092:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <HAL_IncTick+0x20>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	18d2      	adds	r2, r2, r3
 8001098:	4b03      	ldr	r3, [pc, #12]	; (80010a8 <HAL_IncTick+0x20>)
 800109a:	601a      	str	r2, [r3, #0]
}
 800109c:	46c0      	nop			; (mov r8, r8)
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	46c0      	nop			; (mov r8, r8)
 80010a4:	20000038 	.word	0x20000038
 80010a8:	20000130 	.word	0x20000130

080010ac <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  return uwTick;
 80010b0:	4b02      	ldr	r3, [pc, #8]	; (80010bc <HAL_GetTick+0x10>)
 80010b2:	681b      	ldr	r3, [r3, #0]
}
 80010b4:	0018      	movs	r0, r3
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	46c0      	nop			; (mov r8, r8)
 80010bc:	20000130 	.word	0x20000130

080010c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010c8:	f7ff fff0 	bl	80010ac <HAL_GetTick>
 80010cc:	0003      	movs	r3, r0
 80010ce:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	3301      	adds	r3, #1
 80010d8:	d005      	beq.n	80010e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010da:	4b0a      	ldr	r3, [pc, #40]	; (8001104 <HAL_Delay+0x44>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	001a      	movs	r2, r3
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	189b      	adds	r3, r3, r2
 80010e4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80010e6:	46c0      	nop			; (mov r8, r8)
 80010e8:	f7ff ffe0 	bl	80010ac <HAL_GetTick>
 80010ec:	0002      	movs	r2, r0
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	68fa      	ldr	r2, [r7, #12]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d8f7      	bhi.n	80010e8 <HAL_Delay+0x28>
  {
  }
}
 80010f8:	46c0      	nop			; (mov r8, r8)
 80010fa:	46c0      	nop			; (mov r8, r8)
 80010fc:	46bd      	mov	sp, r7
 80010fe:	b004      	add	sp, #16
 8001100:	bd80      	pop	{r7, pc}
 8001102:	46c0      	nop			; (mov r8, r8)
 8001104:	20000038 	.word	0x20000038

08001108 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	0002      	movs	r2, r0
 8001110:	1dfb      	adds	r3, r7, #7
 8001112:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001114:	1dfb      	adds	r3, r7, #7
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	2b7f      	cmp	r3, #127	; 0x7f
 800111a:	d809      	bhi.n	8001130 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800111c:	1dfb      	adds	r3, r7, #7
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	001a      	movs	r2, r3
 8001122:	231f      	movs	r3, #31
 8001124:	401a      	ands	r2, r3
 8001126:	4b04      	ldr	r3, [pc, #16]	; (8001138 <__NVIC_EnableIRQ+0x30>)
 8001128:	2101      	movs	r1, #1
 800112a:	4091      	lsls	r1, r2
 800112c:	000a      	movs	r2, r1
 800112e:	601a      	str	r2, [r3, #0]
  }
}
 8001130:	46c0      	nop			; (mov r8, r8)
 8001132:	46bd      	mov	sp, r7
 8001134:	b002      	add	sp, #8
 8001136:	bd80      	pop	{r7, pc}
 8001138:	e000e100 	.word	0xe000e100

0800113c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800113c:	b590      	push	{r4, r7, lr}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	0002      	movs	r2, r0
 8001144:	6039      	str	r1, [r7, #0]
 8001146:	1dfb      	adds	r3, r7, #7
 8001148:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800114a:	1dfb      	adds	r3, r7, #7
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	2b7f      	cmp	r3, #127	; 0x7f
 8001150:	d828      	bhi.n	80011a4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001152:	4a2f      	ldr	r2, [pc, #188]	; (8001210 <__NVIC_SetPriority+0xd4>)
 8001154:	1dfb      	adds	r3, r7, #7
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	b25b      	sxtb	r3, r3
 800115a:	089b      	lsrs	r3, r3, #2
 800115c:	33c0      	adds	r3, #192	; 0xc0
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	589b      	ldr	r3, [r3, r2]
 8001162:	1dfa      	adds	r2, r7, #7
 8001164:	7812      	ldrb	r2, [r2, #0]
 8001166:	0011      	movs	r1, r2
 8001168:	2203      	movs	r2, #3
 800116a:	400a      	ands	r2, r1
 800116c:	00d2      	lsls	r2, r2, #3
 800116e:	21ff      	movs	r1, #255	; 0xff
 8001170:	4091      	lsls	r1, r2
 8001172:	000a      	movs	r2, r1
 8001174:	43d2      	mvns	r2, r2
 8001176:	401a      	ands	r2, r3
 8001178:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	019b      	lsls	r3, r3, #6
 800117e:	22ff      	movs	r2, #255	; 0xff
 8001180:	401a      	ands	r2, r3
 8001182:	1dfb      	adds	r3, r7, #7
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	0018      	movs	r0, r3
 8001188:	2303      	movs	r3, #3
 800118a:	4003      	ands	r3, r0
 800118c:	00db      	lsls	r3, r3, #3
 800118e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001190:	481f      	ldr	r0, [pc, #124]	; (8001210 <__NVIC_SetPriority+0xd4>)
 8001192:	1dfb      	adds	r3, r7, #7
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	b25b      	sxtb	r3, r3
 8001198:	089b      	lsrs	r3, r3, #2
 800119a:	430a      	orrs	r2, r1
 800119c:	33c0      	adds	r3, #192	; 0xc0
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80011a2:	e031      	b.n	8001208 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011a4:	4a1b      	ldr	r2, [pc, #108]	; (8001214 <__NVIC_SetPriority+0xd8>)
 80011a6:	1dfb      	adds	r3, r7, #7
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	0019      	movs	r1, r3
 80011ac:	230f      	movs	r3, #15
 80011ae:	400b      	ands	r3, r1
 80011b0:	3b08      	subs	r3, #8
 80011b2:	089b      	lsrs	r3, r3, #2
 80011b4:	3306      	adds	r3, #6
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	18d3      	adds	r3, r2, r3
 80011ba:	3304      	adds	r3, #4
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	1dfa      	adds	r2, r7, #7
 80011c0:	7812      	ldrb	r2, [r2, #0]
 80011c2:	0011      	movs	r1, r2
 80011c4:	2203      	movs	r2, #3
 80011c6:	400a      	ands	r2, r1
 80011c8:	00d2      	lsls	r2, r2, #3
 80011ca:	21ff      	movs	r1, #255	; 0xff
 80011cc:	4091      	lsls	r1, r2
 80011ce:	000a      	movs	r2, r1
 80011d0:	43d2      	mvns	r2, r2
 80011d2:	401a      	ands	r2, r3
 80011d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	019b      	lsls	r3, r3, #6
 80011da:	22ff      	movs	r2, #255	; 0xff
 80011dc:	401a      	ands	r2, r3
 80011de:	1dfb      	adds	r3, r7, #7
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	0018      	movs	r0, r3
 80011e4:	2303      	movs	r3, #3
 80011e6:	4003      	ands	r3, r0
 80011e8:	00db      	lsls	r3, r3, #3
 80011ea:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011ec:	4809      	ldr	r0, [pc, #36]	; (8001214 <__NVIC_SetPriority+0xd8>)
 80011ee:	1dfb      	adds	r3, r7, #7
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	001c      	movs	r4, r3
 80011f4:	230f      	movs	r3, #15
 80011f6:	4023      	ands	r3, r4
 80011f8:	3b08      	subs	r3, #8
 80011fa:	089b      	lsrs	r3, r3, #2
 80011fc:	430a      	orrs	r2, r1
 80011fe:	3306      	adds	r3, #6
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	18c3      	adds	r3, r0, r3
 8001204:	3304      	adds	r3, #4
 8001206:	601a      	str	r2, [r3, #0]
}
 8001208:	46c0      	nop			; (mov r8, r8)
 800120a:	46bd      	mov	sp, r7
 800120c:	b003      	add	sp, #12
 800120e:	bd90      	pop	{r4, r7, pc}
 8001210:	e000e100 	.word	0xe000e100
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	1e5a      	subs	r2, r3, #1
 8001224:	2380      	movs	r3, #128	; 0x80
 8001226:	045b      	lsls	r3, r3, #17
 8001228:	429a      	cmp	r2, r3
 800122a:	d301      	bcc.n	8001230 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800122c:	2301      	movs	r3, #1
 800122e:	e010      	b.n	8001252 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001230:	4b0a      	ldr	r3, [pc, #40]	; (800125c <SysTick_Config+0x44>)
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	3a01      	subs	r2, #1
 8001236:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001238:	2301      	movs	r3, #1
 800123a:	425b      	negs	r3, r3
 800123c:	2103      	movs	r1, #3
 800123e:	0018      	movs	r0, r3
 8001240:	f7ff ff7c 	bl	800113c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001244:	4b05      	ldr	r3, [pc, #20]	; (800125c <SysTick_Config+0x44>)
 8001246:	2200      	movs	r2, #0
 8001248:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800124a:	4b04      	ldr	r3, [pc, #16]	; (800125c <SysTick_Config+0x44>)
 800124c:	2207      	movs	r2, #7
 800124e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001250:	2300      	movs	r3, #0
}
 8001252:	0018      	movs	r0, r3
 8001254:	46bd      	mov	sp, r7
 8001256:	b002      	add	sp, #8
 8001258:	bd80      	pop	{r7, pc}
 800125a:	46c0      	nop			; (mov r8, r8)
 800125c:	e000e010 	.word	0xe000e010

08001260 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	60b9      	str	r1, [r7, #8]
 8001268:	607a      	str	r2, [r7, #4]
 800126a:	210f      	movs	r1, #15
 800126c:	187b      	adds	r3, r7, r1
 800126e:	1c02      	adds	r2, r0, #0
 8001270:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001272:	68ba      	ldr	r2, [r7, #8]
 8001274:	187b      	adds	r3, r7, r1
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	b25b      	sxtb	r3, r3
 800127a:	0011      	movs	r1, r2
 800127c:	0018      	movs	r0, r3
 800127e:	f7ff ff5d 	bl	800113c <__NVIC_SetPriority>
}
 8001282:	46c0      	nop			; (mov r8, r8)
 8001284:	46bd      	mov	sp, r7
 8001286:	b004      	add	sp, #16
 8001288:	bd80      	pop	{r7, pc}

0800128a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b082      	sub	sp, #8
 800128e:	af00      	add	r7, sp, #0
 8001290:	0002      	movs	r2, r0
 8001292:	1dfb      	adds	r3, r7, #7
 8001294:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001296:	1dfb      	adds	r3, r7, #7
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	b25b      	sxtb	r3, r3
 800129c:	0018      	movs	r0, r3
 800129e:	f7ff ff33 	bl	8001108 <__NVIC_EnableIRQ>
}
 80012a2:	46c0      	nop			; (mov r8, r8)
 80012a4:	46bd      	mov	sp, r7
 80012a6:	b002      	add	sp, #8
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	0018      	movs	r0, r3
 80012b6:	f7ff ffaf 	bl	8001218 <SysTick_Config>
 80012ba:	0003      	movs	r3, r0
}
 80012bc:	0018      	movs	r0, r3
 80012be:	46bd      	mov	sp, r7
 80012c0:	b002      	add	sp, #8
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2221      	movs	r2, #33	; 0x21
 80012d0:	5c9b      	ldrb	r3, [r3, r2]
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d008      	beq.n	80012ea <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2204      	movs	r2, #4
 80012dc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2220      	movs	r2, #32
 80012e2:	2100      	movs	r1, #0
 80012e4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e020      	b.n	800132c <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	210e      	movs	r1, #14
 80012f6:	438a      	bics	r2, r1
 80012f8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2101      	movs	r1, #1
 8001306:	438a      	bics	r2, r1
 8001308:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001312:	2101      	movs	r1, #1
 8001314:	4091      	lsls	r1, r2
 8001316:	000a      	movs	r2, r1
 8001318:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2221      	movs	r2, #33	; 0x21
 800131e:	2101      	movs	r1, #1
 8001320:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2220      	movs	r2, #32
 8001326:	2100      	movs	r1, #0
 8001328:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800132a:	2300      	movs	r3, #0
}
 800132c:	0018      	movs	r0, r3
 800132e:	46bd      	mov	sp, r7
 8001330:	b002      	add	sp, #8
 8001332:	bd80      	pop	{r7, pc}

08001334 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800133c:	210f      	movs	r1, #15
 800133e:	187b      	adds	r3, r7, r1
 8001340:	2200      	movs	r2, #0
 8001342:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2221      	movs	r2, #33	; 0x21
 8001348:	5c9b      	ldrb	r3, [r3, r2]
 800134a:	b2db      	uxtb	r3, r3
 800134c:	2b02      	cmp	r3, #2
 800134e:	d006      	beq.n	800135e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2204      	movs	r2, #4
 8001354:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8001356:	187b      	adds	r3, r7, r1
 8001358:	2201      	movs	r2, #1
 800135a:	701a      	strb	r2, [r3, #0]
 800135c:	e028      	b.n	80013b0 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	210e      	movs	r1, #14
 800136a:	438a      	bics	r2, r1
 800136c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2101      	movs	r1, #1
 800137a:	438a      	bics	r2, r1
 800137c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001386:	2101      	movs	r1, #1
 8001388:	4091      	lsls	r1, r2
 800138a:	000a      	movs	r2, r1
 800138c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2221      	movs	r2, #33	; 0x21
 8001392:	2101      	movs	r1, #1
 8001394:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2220      	movs	r2, #32
 800139a:	2100      	movs	r1, #0
 800139c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d004      	beq.n	80013b0 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	0010      	movs	r0, r2
 80013ae:	4798      	blx	r3
    }
  }
  return status;
 80013b0:	230f      	movs	r3, #15
 80013b2:	18fb      	adds	r3, r7, r3
 80013b4:	781b      	ldrb	r3, [r3, #0]
}
 80013b6:	0018      	movs	r0, r3
 80013b8:	46bd      	mov	sp, r7
 80013ba:	b004      	add	sp, #16
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ce:	e14f      	b.n	8001670 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2101      	movs	r1, #1
 80013d6:	697a      	ldr	r2, [r7, #20]
 80013d8:	4091      	lsls	r1, r2
 80013da:	000a      	movs	r2, r1
 80013dc:	4013      	ands	r3, r2
 80013de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d100      	bne.n	80013e8 <HAL_GPIO_Init+0x28>
 80013e6:	e140      	b.n	800166a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	2203      	movs	r2, #3
 80013ee:	4013      	ands	r3, r2
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d005      	beq.n	8001400 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	2203      	movs	r2, #3
 80013fa:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d130      	bne.n	8001462 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	2203      	movs	r2, #3
 800140c:	409a      	lsls	r2, r3
 800140e:	0013      	movs	r3, r2
 8001410:	43da      	mvns	r2, r3
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	4013      	ands	r3, r2
 8001416:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	68da      	ldr	r2, [r3, #12]
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	409a      	lsls	r2, r3
 8001422:	0013      	movs	r3, r2
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	4313      	orrs	r3, r2
 8001428:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001436:	2201      	movs	r2, #1
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	409a      	lsls	r2, r3
 800143c:	0013      	movs	r3, r2
 800143e:	43da      	mvns	r2, r3
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	4013      	ands	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	091b      	lsrs	r3, r3, #4
 800144c:	2201      	movs	r2, #1
 800144e:	401a      	ands	r2, r3
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	409a      	lsls	r2, r3
 8001454:	0013      	movs	r3, r2
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	4313      	orrs	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	2203      	movs	r2, #3
 8001468:	4013      	ands	r3, r2
 800146a:	2b03      	cmp	r3, #3
 800146c:	d017      	beq.n	800149e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	2203      	movs	r2, #3
 800147a:	409a      	lsls	r2, r3
 800147c:	0013      	movs	r3, r2
 800147e:	43da      	mvns	r2, r3
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	4013      	ands	r3, r2
 8001484:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	689a      	ldr	r2, [r3, #8]
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	409a      	lsls	r2, r3
 8001490:	0013      	movs	r3, r2
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	4313      	orrs	r3, r2
 8001496:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	2203      	movs	r2, #3
 80014a4:	4013      	ands	r3, r2
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d123      	bne.n	80014f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	08da      	lsrs	r2, r3, #3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	3208      	adds	r2, #8
 80014b2:	0092      	lsls	r2, r2, #2
 80014b4:	58d3      	ldr	r3, [r2, r3]
 80014b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	2207      	movs	r2, #7
 80014bc:	4013      	ands	r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	220f      	movs	r2, #15
 80014c2:	409a      	lsls	r2, r3
 80014c4:	0013      	movs	r3, r2
 80014c6:	43da      	mvns	r2, r3
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	4013      	ands	r3, r2
 80014cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	691a      	ldr	r2, [r3, #16]
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	2107      	movs	r1, #7
 80014d6:	400b      	ands	r3, r1
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	409a      	lsls	r2, r3
 80014dc:	0013      	movs	r3, r2
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	08da      	lsrs	r2, r3, #3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3208      	adds	r2, #8
 80014ec:	0092      	lsls	r2, r2, #2
 80014ee:	6939      	ldr	r1, [r7, #16]
 80014f0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	2203      	movs	r2, #3
 80014fe:	409a      	lsls	r2, r3
 8001500:	0013      	movs	r3, r2
 8001502:	43da      	mvns	r2, r3
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	4013      	ands	r3, r2
 8001508:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	2203      	movs	r2, #3
 8001510:	401a      	ands	r2, r3
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	409a      	lsls	r2, r3
 8001518:	0013      	movs	r3, r2
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	4313      	orrs	r3, r2
 800151e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685a      	ldr	r2, [r3, #4]
 800152a:	23c0      	movs	r3, #192	; 0xc0
 800152c:	029b      	lsls	r3, r3, #10
 800152e:	4013      	ands	r3, r2
 8001530:	d100      	bne.n	8001534 <HAL_GPIO_Init+0x174>
 8001532:	e09a      	b.n	800166a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001534:	4b54      	ldr	r3, [pc, #336]	; (8001688 <HAL_GPIO_Init+0x2c8>)
 8001536:	699a      	ldr	r2, [r3, #24]
 8001538:	4b53      	ldr	r3, [pc, #332]	; (8001688 <HAL_GPIO_Init+0x2c8>)
 800153a:	2101      	movs	r1, #1
 800153c:	430a      	orrs	r2, r1
 800153e:	619a      	str	r2, [r3, #24]
 8001540:	4b51      	ldr	r3, [pc, #324]	; (8001688 <HAL_GPIO_Init+0x2c8>)
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	2201      	movs	r2, #1
 8001546:	4013      	ands	r3, r2
 8001548:	60bb      	str	r3, [r7, #8]
 800154a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800154c:	4a4f      	ldr	r2, [pc, #316]	; (800168c <HAL_GPIO_Init+0x2cc>)
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	089b      	lsrs	r3, r3, #2
 8001552:	3302      	adds	r3, #2
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	589b      	ldr	r3, [r3, r2]
 8001558:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	2203      	movs	r2, #3
 800155e:	4013      	ands	r3, r2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	220f      	movs	r2, #15
 8001564:	409a      	lsls	r2, r3
 8001566:	0013      	movs	r3, r2
 8001568:	43da      	mvns	r2, r3
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	4013      	ands	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	2390      	movs	r3, #144	; 0x90
 8001574:	05db      	lsls	r3, r3, #23
 8001576:	429a      	cmp	r2, r3
 8001578:	d013      	beq.n	80015a2 <HAL_GPIO_Init+0x1e2>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a44      	ldr	r2, [pc, #272]	; (8001690 <HAL_GPIO_Init+0x2d0>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d00d      	beq.n	800159e <HAL_GPIO_Init+0x1de>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a43      	ldr	r2, [pc, #268]	; (8001694 <HAL_GPIO_Init+0x2d4>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d007      	beq.n	800159a <HAL_GPIO_Init+0x1da>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a42      	ldr	r2, [pc, #264]	; (8001698 <HAL_GPIO_Init+0x2d8>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d101      	bne.n	8001596 <HAL_GPIO_Init+0x1d6>
 8001592:	2303      	movs	r3, #3
 8001594:	e006      	b.n	80015a4 <HAL_GPIO_Init+0x1e4>
 8001596:	2305      	movs	r3, #5
 8001598:	e004      	b.n	80015a4 <HAL_GPIO_Init+0x1e4>
 800159a:	2302      	movs	r3, #2
 800159c:	e002      	b.n	80015a4 <HAL_GPIO_Init+0x1e4>
 800159e:	2301      	movs	r3, #1
 80015a0:	e000      	b.n	80015a4 <HAL_GPIO_Init+0x1e4>
 80015a2:	2300      	movs	r3, #0
 80015a4:	697a      	ldr	r2, [r7, #20]
 80015a6:	2103      	movs	r1, #3
 80015a8:	400a      	ands	r2, r1
 80015aa:	0092      	lsls	r2, r2, #2
 80015ac:	4093      	lsls	r3, r2
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015b4:	4935      	ldr	r1, [pc, #212]	; (800168c <HAL_GPIO_Init+0x2cc>)
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	089b      	lsrs	r3, r3, #2
 80015ba:	3302      	adds	r3, #2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015c2:	4b36      	ldr	r3, [pc, #216]	; (800169c <HAL_GPIO_Init+0x2dc>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	43da      	mvns	r2, r3
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	4013      	ands	r3, r2
 80015d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685a      	ldr	r2, [r3, #4]
 80015d6:	2380      	movs	r3, #128	; 0x80
 80015d8:	035b      	lsls	r3, r3, #13
 80015da:	4013      	ands	r3, r2
 80015dc:	d003      	beq.n	80015e6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80015e6:	4b2d      	ldr	r3, [pc, #180]	; (800169c <HAL_GPIO_Init+0x2dc>)
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80015ec:	4b2b      	ldr	r3, [pc, #172]	; (800169c <HAL_GPIO_Init+0x2dc>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	43da      	mvns	r2, r3
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	4013      	ands	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685a      	ldr	r2, [r3, #4]
 8001600:	2380      	movs	r3, #128	; 0x80
 8001602:	039b      	lsls	r3, r3, #14
 8001604:	4013      	ands	r3, r2
 8001606:	d003      	beq.n	8001610 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	4313      	orrs	r3, r2
 800160e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001610:	4b22      	ldr	r3, [pc, #136]	; (800169c <HAL_GPIO_Init+0x2dc>)
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001616:	4b21      	ldr	r3, [pc, #132]	; (800169c <HAL_GPIO_Init+0x2dc>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	43da      	mvns	r2, r3
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	4013      	ands	r3, r2
 8001624:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685a      	ldr	r2, [r3, #4]
 800162a:	2380      	movs	r3, #128	; 0x80
 800162c:	029b      	lsls	r3, r3, #10
 800162e:	4013      	ands	r3, r2
 8001630:	d003      	beq.n	800163a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	4313      	orrs	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800163a:	4b18      	ldr	r3, [pc, #96]	; (800169c <HAL_GPIO_Init+0x2dc>)
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001640:	4b16      	ldr	r3, [pc, #88]	; (800169c <HAL_GPIO_Init+0x2dc>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	43da      	mvns	r2, r3
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	4013      	ands	r3, r2
 800164e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685a      	ldr	r2, [r3, #4]
 8001654:	2380      	movs	r3, #128	; 0x80
 8001656:	025b      	lsls	r3, r3, #9
 8001658:	4013      	ands	r3, r2
 800165a:	d003      	beq.n	8001664 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	4313      	orrs	r3, r2
 8001662:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001664:	4b0d      	ldr	r3, [pc, #52]	; (800169c <HAL_GPIO_Init+0x2dc>)
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	3301      	adds	r3, #1
 800166e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	40da      	lsrs	r2, r3
 8001678:	1e13      	subs	r3, r2, #0
 800167a:	d000      	beq.n	800167e <HAL_GPIO_Init+0x2be>
 800167c:	e6a8      	b.n	80013d0 <HAL_GPIO_Init+0x10>
  } 
}
 800167e:	46c0      	nop			; (mov r8, r8)
 8001680:	46c0      	nop			; (mov r8, r8)
 8001682:	46bd      	mov	sp, r7
 8001684:	b006      	add	sp, #24
 8001686:	bd80      	pop	{r7, pc}
 8001688:	40021000 	.word	0x40021000
 800168c:	40010000 	.word	0x40010000
 8001690:	48000400 	.word	0x48000400
 8001694:	48000800 	.word	0x48000800
 8001698:	48000c00 	.word	0x48000c00
 800169c:	40010400 	.word	0x40010400

080016a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	000a      	movs	r2, r1
 80016aa:	1cbb      	adds	r3, r7, #2
 80016ac:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	691b      	ldr	r3, [r3, #16]
 80016b2:	1cba      	adds	r2, r7, #2
 80016b4:	8812      	ldrh	r2, [r2, #0]
 80016b6:	4013      	ands	r3, r2
 80016b8:	d004      	beq.n	80016c4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80016ba:	230f      	movs	r3, #15
 80016bc:	18fb      	adds	r3, r7, r3
 80016be:	2201      	movs	r2, #1
 80016c0:	701a      	strb	r2, [r3, #0]
 80016c2:	e003      	b.n	80016cc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016c4:	230f      	movs	r3, #15
 80016c6:	18fb      	adds	r3, r7, r3
 80016c8:	2200      	movs	r2, #0
 80016ca:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80016cc:	230f      	movs	r3, #15
 80016ce:	18fb      	adds	r3, r7, r3
 80016d0:	781b      	ldrb	r3, [r3, #0]
  }
 80016d2:	0018      	movs	r0, r3
 80016d4:	46bd      	mov	sp, r7
 80016d6:	b004      	add	sp, #16
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
 80016e2:	0008      	movs	r0, r1
 80016e4:	0011      	movs	r1, r2
 80016e6:	1cbb      	adds	r3, r7, #2
 80016e8:	1c02      	adds	r2, r0, #0
 80016ea:	801a      	strh	r2, [r3, #0]
 80016ec:	1c7b      	adds	r3, r7, #1
 80016ee:	1c0a      	adds	r2, r1, #0
 80016f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016f2:	1c7b      	adds	r3, r7, #1
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d004      	beq.n	8001704 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016fa:	1cbb      	adds	r3, r7, #2
 80016fc:	881a      	ldrh	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001702:	e003      	b.n	800170c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001704:	1cbb      	adds	r3, r7, #2
 8001706:	881a      	ldrh	r2, [r3, #0]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800170c:	46c0      	nop			; (mov r8, r8)
 800170e:	46bd      	mov	sp, r7
 8001710:	b002      	add	sp, #8
 8001712:	bd80      	pop	{r7, pc}

08001714 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	000a      	movs	r2, r1
 800171e:	1cbb      	adds	r3, r7, #2
 8001720:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	695b      	ldr	r3, [r3, #20]
 8001726:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001728:	1cbb      	adds	r3, r7, #2
 800172a:	881b      	ldrh	r3, [r3, #0]
 800172c:	68fa      	ldr	r2, [r7, #12]
 800172e:	4013      	ands	r3, r2
 8001730:	041a      	lsls	r2, r3, #16
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	43db      	mvns	r3, r3
 8001736:	1cb9      	adds	r1, r7, #2
 8001738:	8809      	ldrh	r1, [r1, #0]
 800173a:	400b      	ands	r3, r1
 800173c:	431a      	orrs	r2, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	619a      	str	r2, [r3, #24]
}
 8001742:	46c0      	nop			; (mov r8, r8)
 8001744:	46bd      	mov	sp, r7
 8001746:	b004      	add	sp, #16
 8001748:	bd80      	pop	{r7, pc}
	...

0800174c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b088      	sub	sp, #32
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e301      	b.n	8001d62 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2201      	movs	r2, #1
 8001764:	4013      	ands	r3, r2
 8001766:	d100      	bne.n	800176a <HAL_RCC_OscConfig+0x1e>
 8001768:	e08d      	b.n	8001886 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800176a:	4bc3      	ldr	r3, [pc, #780]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	220c      	movs	r2, #12
 8001770:	4013      	ands	r3, r2
 8001772:	2b04      	cmp	r3, #4
 8001774:	d00e      	beq.n	8001794 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001776:	4bc0      	ldr	r3, [pc, #768]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	220c      	movs	r2, #12
 800177c:	4013      	ands	r3, r2
 800177e:	2b08      	cmp	r3, #8
 8001780:	d116      	bne.n	80017b0 <HAL_RCC_OscConfig+0x64>
 8001782:	4bbd      	ldr	r3, [pc, #756]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 8001784:	685a      	ldr	r2, [r3, #4]
 8001786:	2380      	movs	r3, #128	; 0x80
 8001788:	025b      	lsls	r3, r3, #9
 800178a:	401a      	ands	r2, r3
 800178c:	2380      	movs	r3, #128	; 0x80
 800178e:	025b      	lsls	r3, r3, #9
 8001790:	429a      	cmp	r2, r3
 8001792:	d10d      	bne.n	80017b0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001794:	4bb8      	ldr	r3, [pc, #736]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	2380      	movs	r3, #128	; 0x80
 800179a:	029b      	lsls	r3, r3, #10
 800179c:	4013      	ands	r3, r2
 800179e:	d100      	bne.n	80017a2 <HAL_RCC_OscConfig+0x56>
 80017a0:	e070      	b.n	8001884 <HAL_RCC_OscConfig+0x138>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d000      	beq.n	80017ac <HAL_RCC_OscConfig+0x60>
 80017aa:	e06b      	b.n	8001884 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e2d8      	b.n	8001d62 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d107      	bne.n	80017c8 <HAL_RCC_OscConfig+0x7c>
 80017b8:	4baf      	ldr	r3, [pc, #700]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	4bae      	ldr	r3, [pc, #696]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 80017be:	2180      	movs	r1, #128	; 0x80
 80017c0:	0249      	lsls	r1, r1, #9
 80017c2:	430a      	orrs	r2, r1
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	e02f      	b.n	8001828 <HAL_RCC_OscConfig+0xdc>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d10c      	bne.n	80017ea <HAL_RCC_OscConfig+0x9e>
 80017d0:	4ba9      	ldr	r3, [pc, #676]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	4ba8      	ldr	r3, [pc, #672]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 80017d6:	49a9      	ldr	r1, [pc, #676]	; (8001a7c <HAL_RCC_OscConfig+0x330>)
 80017d8:	400a      	ands	r2, r1
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	4ba6      	ldr	r3, [pc, #664]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	4ba5      	ldr	r3, [pc, #660]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 80017e2:	49a7      	ldr	r1, [pc, #668]	; (8001a80 <HAL_RCC_OscConfig+0x334>)
 80017e4:	400a      	ands	r2, r1
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	e01e      	b.n	8001828 <HAL_RCC_OscConfig+0xdc>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	2b05      	cmp	r3, #5
 80017f0:	d10e      	bne.n	8001810 <HAL_RCC_OscConfig+0xc4>
 80017f2:	4ba1      	ldr	r3, [pc, #644]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	4ba0      	ldr	r3, [pc, #640]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 80017f8:	2180      	movs	r1, #128	; 0x80
 80017fa:	02c9      	lsls	r1, r1, #11
 80017fc:	430a      	orrs	r2, r1
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	4b9d      	ldr	r3, [pc, #628]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	4b9c      	ldr	r3, [pc, #624]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 8001806:	2180      	movs	r1, #128	; 0x80
 8001808:	0249      	lsls	r1, r1, #9
 800180a:	430a      	orrs	r2, r1
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	e00b      	b.n	8001828 <HAL_RCC_OscConfig+0xdc>
 8001810:	4b99      	ldr	r3, [pc, #612]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	4b98      	ldr	r3, [pc, #608]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 8001816:	4999      	ldr	r1, [pc, #612]	; (8001a7c <HAL_RCC_OscConfig+0x330>)
 8001818:	400a      	ands	r2, r1
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	4b96      	ldr	r3, [pc, #600]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	4b95      	ldr	r3, [pc, #596]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 8001822:	4997      	ldr	r1, [pc, #604]	; (8001a80 <HAL_RCC_OscConfig+0x334>)
 8001824:	400a      	ands	r2, r1
 8001826:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d014      	beq.n	800185a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001830:	f7ff fc3c 	bl	80010ac <HAL_GetTick>
 8001834:	0003      	movs	r3, r0
 8001836:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001838:	e008      	b.n	800184c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800183a:	f7ff fc37 	bl	80010ac <HAL_GetTick>
 800183e:	0002      	movs	r2, r0
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b64      	cmp	r3, #100	; 0x64
 8001846:	d901      	bls.n	800184c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e28a      	b.n	8001d62 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800184c:	4b8a      	ldr	r3, [pc, #552]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	2380      	movs	r3, #128	; 0x80
 8001852:	029b      	lsls	r3, r3, #10
 8001854:	4013      	ands	r3, r2
 8001856:	d0f0      	beq.n	800183a <HAL_RCC_OscConfig+0xee>
 8001858:	e015      	b.n	8001886 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800185a:	f7ff fc27 	bl	80010ac <HAL_GetTick>
 800185e:	0003      	movs	r3, r0
 8001860:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001864:	f7ff fc22 	bl	80010ac <HAL_GetTick>
 8001868:	0002      	movs	r2, r0
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b64      	cmp	r3, #100	; 0x64
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e275      	b.n	8001d62 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001876:	4b80      	ldr	r3, [pc, #512]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	2380      	movs	r3, #128	; 0x80
 800187c:	029b      	lsls	r3, r3, #10
 800187e:	4013      	ands	r3, r2
 8001880:	d1f0      	bne.n	8001864 <HAL_RCC_OscConfig+0x118>
 8001882:	e000      	b.n	8001886 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001884:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2202      	movs	r2, #2
 800188c:	4013      	ands	r3, r2
 800188e:	d100      	bne.n	8001892 <HAL_RCC_OscConfig+0x146>
 8001890:	e069      	b.n	8001966 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001892:	4b79      	ldr	r3, [pc, #484]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	220c      	movs	r2, #12
 8001898:	4013      	ands	r3, r2
 800189a:	d00b      	beq.n	80018b4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800189c:	4b76      	ldr	r3, [pc, #472]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	220c      	movs	r2, #12
 80018a2:	4013      	ands	r3, r2
 80018a4:	2b08      	cmp	r3, #8
 80018a6:	d11c      	bne.n	80018e2 <HAL_RCC_OscConfig+0x196>
 80018a8:	4b73      	ldr	r3, [pc, #460]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 80018aa:	685a      	ldr	r2, [r3, #4]
 80018ac:	2380      	movs	r3, #128	; 0x80
 80018ae:	025b      	lsls	r3, r3, #9
 80018b0:	4013      	ands	r3, r2
 80018b2:	d116      	bne.n	80018e2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018b4:	4b70      	ldr	r3, [pc, #448]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2202      	movs	r2, #2
 80018ba:	4013      	ands	r3, r2
 80018bc:	d005      	beq.n	80018ca <HAL_RCC_OscConfig+0x17e>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d001      	beq.n	80018ca <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e24b      	b.n	8001d62 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ca:	4b6b      	ldr	r3, [pc, #428]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	22f8      	movs	r2, #248	; 0xf8
 80018d0:	4393      	bics	r3, r2
 80018d2:	0019      	movs	r1, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	691b      	ldr	r3, [r3, #16]
 80018d8:	00da      	lsls	r2, r3, #3
 80018da:	4b67      	ldr	r3, [pc, #412]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 80018dc:	430a      	orrs	r2, r1
 80018de:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018e0:	e041      	b.n	8001966 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d024      	beq.n	8001934 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018ea:	4b63      	ldr	r3, [pc, #396]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	4b62      	ldr	r3, [pc, #392]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 80018f0:	2101      	movs	r1, #1
 80018f2:	430a      	orrs	r2, r1
 80018f4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f6:	f7ff fbd9 	bl	80010ac <HAL_GetTick>
 80018fa:	0003      	movs	r3, r0
 80018fc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001900:	f7ff fbd4 	bl	80010ac <HAL_GetTick>
 8001904:	0002      	movs	r2, r0
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e227      	b.n	8001d62 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001912:	4b59      	ldr	r3, [pc, #356]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2202      	movs	r2, #2
 8001918:	4013      	ands	r3, r2
 800191a:	d0f1      	beq.n	8001900 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800191c:	4b56      	ldr	r3, [pc, #344]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	22f8      	movs	r2, #248	; 0xf8
 8001922:	4393      	bics	r3, r2
 8001924:	0019      	movs	r1, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	691b      	ldr	r3, [r3, #16]
 800192a:	00da      	lsls	r2, r3, #3
 800192c:	4b52      	ldr	r3, [pc, #328]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 800192e:	430a      	orrs	r2, r1
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	e018      	b.n	8001966 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001934:	4b50      	ldr	r3, [pc, #320]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	4b4f      	ldr	r3, [pc, #316]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 800193a:	2101      	movs	r1, #1
 800193c:	438a      	bics	r2, r1
 800193e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001940:	f7ff fbb4 	bl	80010ac <HAL_GetTick>
 8001944:	0003      	movs	r3, r0
 8001946:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001948:	e008      	b.n	800195c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800194a:	f7ff fbaf 	bl	80010ac <HAL_GetTick>
 800194e:	0002      	movs	r2, r0
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e202      	b.n	8001d62 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800195c:	4b46      	ldr	r3, [pc, #280]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2202      	movs	r2, #2
 8001962:	4013      	ands	r3, r2
 8001964:	d1f1      	bne.n	800194a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2208      	movs	r2, #8
 800196c:	4013      	ands	r3, r2
 800196e:	d036      	beq.n	80019de <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	69db      	ldr	r3, [r3, #28]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d019      	beq.n	80019ac <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001978:	4b3f      	ldr	r3, [pc, #252]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 800197a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800197c:	4b3e      	ldr	r3, [pc, #248]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 800197e:	2101      	movs	r1, #1
 8001980:	430a      	orrs	r2, r1
 8001982:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001984:	f7ff fb92 	bl	80010ac <HAL_GetTick>
 8001988:	0003      	movs	r3, r0
 800198a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800198c:	e008      	b.n	80019a0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800198e:	f7ff fb8d 	bl	80010ac <HAL_GetTick>
 8001992:	0002      	movs	r2, r0
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b02      	cmp	r3, #2
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e1e0      	b.n	8001d62 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019a0:	4b35      	ldr	r3, [pc, #212]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 80019a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a4:	2202      	movs	r2, #2
 80019a6:	4013      	ands	r3, r2
 80019a8:	d0f1      	beq.n	800198e <HAL_RCC_OscConfig+0x242>
 80019aa:	e018      	b.n	80019de <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019ac:	4b32      	ldr	r3, [pc, #200]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 80019ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019b0:	4b31      	ldr	r3, [pc, #196]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 80019b2:	2101      	movs	r1, #1
 80019b4:	438a      	bics	r2, r1
 80019b6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019b8:	f7ff fb78 	bl	80010ac <HAL_GetTick>
 80019bc:	0003      	movs	r3, r0
 80019be:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019c0:	e008      	b.n	80019d4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019c2:	f7ff fb73 	bl	80010ac <HAL_GetTick>
 80019c6:	0002      	movs	r2, r0
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e1c6      	b.n	8001d62 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019d4:	4b28      	ldr	r3, [pc, #160]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 80019d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d8:	2202      	movs	r2, #2
 80019da:	4013      	ands	r3, r2
 80019dc:	d1f1      	bne.n	80019c2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2204      	movs	r2, #4
 80019e4:	4013      	ands	r3, r2
 80019e6:	d100      	bne.n	80019ea <HAL_RCC_OscConfig+0x29e>
 80019e8:	e0b4      	b.n	8001b54 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019ea:	201f      	movs	r0, #31
 80019ec:	183b      	adds	r3, r7, r0
 80019ee:	2200      	movs	r2, #0
 80019f0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019f2:	4b21      	ldr	r3, [pc, #132]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 80019f4:	69da      	ldr	r2, [r3, #28]
 80019f6:	2380      	movs	r3, #128	; 0x80
 80019f8:	055b      	lsls	r3, r3, #21
 80019fa:	4013      	ands	r3, r2
 80019fc:	d110      	bne.n	8001a20 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019fe:	4b1e      	ldr	r3, [pc, #120]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 8001a00:	69da      	ldr	r2, [r3, #28]
 8001a02:	4b1d      	ldr	r3, [pc, #116]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 8001a04:	2180      	movs	r1, #128	; 0x80
 8001a06:	0549      	lsls	r1, r1, #21
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	61da      	str	r2, [r3, #28]
 8001a0c:	4b1a      	ldr	r3, [pc, #104]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 8001a0e:	69da      	ldr	r2, [r3, #28]
 8001a10:	2380      	movs	r3, #128	; 0x80
 8001a12:	055b      	lsls	r3, r3, #21
 8001a14:	4013      	ands	r3, r2
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001a1a:	183b      	adds	r3, r7, r0
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a20:	4b18      	ldr	r3, [pc, #96]	; (8001a84 <HAL_RCC_OscConfig+0x338>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	2380      	movs	r3, #128	; 0x80
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	4013      	ands	r3, r2
 8001a2a:	d11a      	bne.n	8001a62 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a2c:	4b15      	ldr	r3, [pc, #84]	; (8001a84 <HAL_RCC_OscConfig+0x338>)
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	4b14      	ldr	r3, [pc, #80]	; (8001a84 <HAL_RCC_OscConfig+0x338>)
 8001a32:	2180      	movs	r1, #128	; 0x80
 8001a34:	0049      	lsls	r1, r1, #1
 8001a36:	430a      	orrs	r2, r1
 8001a38:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a3a:	f7ff fb37 	bl	80010ac <HAL_GetTick>
 8001a3e:	0003      	movs	r3, r0
 8001a40:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a44:	f7ff fb32 	bl	80010ac <HAL_GetTick>
 8001a48:	0002      	movs	r2, r0
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b64      	cmp	r3, #100	; 0x64
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e185      	b.n	8001d62 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a56:	4b0b      	ldr	r3, [pc, #44]	; (8001a84 <HAL_RCC_OscConfig+0x338>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	2380      	movs	r3, #128	; 0x80
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	4013      	ands	r3, r2
 8001a60:	d0f0      	beq.n	8001a44 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d10e      	bne.n	8001a88 <HAL_RCC_OscConfig+0x33c>
 8001a6a:	4b03      	ldr	r3, [pc, #12]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 8001a6c:	6a1a      	ldr	r2, [r3, #32]
 8001a6e:	4b02      	ldr	r3, [pc, #8]	; (8001a78 <HAL_RCC_OscConfig+0x32c>)
 8001a70:	2101      	movs	r1, #1
 8001a72:	430a      	orrs	r2, r1
 8001a74:	621a      	str	r2, [r3, #32]
 8001a76:	e035      	b.n	8001ae4 <HAL_RCC_OscConfig+0x398>
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	fffeffff 	.word	0xfffeffff
 8001a80:	fffbffff 	.word	0xfffbffff
 8001a84:	40007000 	.word	0x40007000
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d10c      	bne.n	8001aaa <HAL_RCC_OscConfig+0x35e>
 8001a90:	4bb6      	ldr	r3, [pc, #728]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001a92:	6a1a      	ldr	r2, [r3, #32]
 8001a94:	4bb5      	ldr	r3, [pc, #724]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001a96:	2101      	movs	r1, #1
 8001a98:	438a      	bics	r2, r1
 8001a9a:	621a      	str	r2, [r3, #32]
 8001a9c:	4bb3      	ldr	r3, [pc, #716]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001a9e:	6a1a      	ldr	r2, [r3, #32]
 8001aa0:	4bb2      	ldr	r3, [pc, #712]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001aa2:	2104      	movs	r1, #4
 8001aa4:	438a      	bics	r2, r1
 8001aa6:	621a      	str	r2, [r3, #32]
 8001aa8:	e01c      	b.n	8001ae4 <HAL_RCC_OscConfig+0x398>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	2b05      	cmp	r3, #5
 8001ab0:	d10c      	bne.n	8001acc <HAL_RCC_OscConfig+0x380>
 8001ab2:	4bae      	ldr	r3, [pc, #696]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001ab4:	6a1a      	ldr	r2, [r3, #32]
 8001ab6:	4bad      	ldr	r3, [pc, #692]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001ab8:	2104      	movs	r1, #4
 8001aba:	430a      	orrs	r2, r1
 8001abc:	621a      	str	r2, [r3, #32]
 8001abe:	4bab      	ldr	r3, [pc, #684]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001ac0:	6a1a      	ldr	r2, [r3, #32]
 8001ac2:	4baa      	ldr	r3, [pc, #680]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	621a      	str	r2, [r3, #32]
 8001aca:	e00b      	b.n	8001ae4 <HAL_RCC_OscConfig+0x398>
 8001acc:	4ba7      	ldr	r3, [pc, #668]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001ace:	6a1a      	ldr	r2, [r3, #32]
 8001ad0:	4ba6      	ldr	r3, [pc, #664]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001ad2:	2101      	movs	r1, #1
 8001ad4:	438a      	bics	r2, r1
 8001ad6:	621a      	str	r2, [r3, #32]
 8001ad8:	4ba4      	ldr	r3, [pc, #656]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001ada:	6a1a      	ldr	r2, [r3, #32]
 8001adc:	4ba3      	ldr	r3, [pc, #652]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001ade:	2104      	movs	r1, #4
 8001ae0:	438a      	bics	r2, r1
 8001ae2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d014      	beq.n	8001b16 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aec:	f7ff fade 	bl	80010ac <HAL_GetTick>
 8001af0:	0003      	movs	r3, r0
 8001af2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001af4:	e009      	b.n	8001b0a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001af6:	f7ff fad9 	bl	80010ac <HAL_GetTick>
 8001afa:	0002      	movs	r2, r0
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	4a9b      	ldr	r2, [pc, #620]	; (8001d70 <HAL_RCC_OscConfig+0x624>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e12b      	b.n	8001d62 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b0a:	4b98      	ldr	r3, [pc, #608]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001b0c:	6a1b      	ldr	r3, [r3, #32]
 8001b0e:	2202      	movs	r2, #2
 8001b10:	4013      	ands	r3, r2
 8001b12:	d0f0      	beq.n	8001af6 <HAL_RCC_OscConfig+0x3aa>
 8001b14:	e013      	b.n	8001b3e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b16:	f7ff fac9 	bl	80010ac <HAL_GetTick>
 8001b1a:	0003      	movs	r3, r0
 8001b1c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b1e:	e009      	b.n	8001b34 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b20:	f7ff fac4 	bl	80010ac <HAL_GetTick>
 8001b24:	0002      	movs	r2, r0
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	4a91      	ldr	r2, [pc, #580]	; (8001d70 <HAL_RCC_OscConfig+0x624>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e116      	b.n	8001d62 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b34:	4b8d      	ldr	r3, [pc, #564]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001b36:	6a1b      	ldr	r3, [r3, #32]
 8001b38:	2202      	movs	r2, #2
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	d1f0      	bne.n	8001b20 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b3e:	231f      	movs	r3, #31
 8001b40:	18fb      	adds	r3, r7, r3
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d105      	bne.n	8001b54 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b48:	4b88      	ldr	r3, [pc, #544]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001b4a:	69da      	ldr	r2, [r3, #28]
 8001b4c:	4b87      	ldr	r3, [pc, #540]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001b4e:	4989      	ldr	r1, [pc, #548]	; (8001d74 <HAL_RCC_OscConfig+0x628>)
 8001b50:	400a      	ands	r2, r1
 8001b52:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2210      	movs	r2, #16
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	d063      	beq.n	8001c26 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	695b      	ldr	r3, [r3, #20]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d12a      	bne.n	8001bbc <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001b66:	4b81      	ldr	r3, [pc, #516]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001b68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b6a:	4b80      	ldr	r3, [pc, #512]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001b6c:	2104      	movs	r1, #4
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001b72:	4b7e      	ldr	r3, [pc, #504]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001b74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b76:	4b7d      	ldr	r3, [pc, #500]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001b78:	2101      	movs	r1, #1
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b7e:	f7ff fa95 	bl	80010ac <HAL_GetTick>
 8001b82:	0003      	movs	r3, r0
 8001b84:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001b88:	f7ff fa90 	bl	80010ac <HAL_GetTick>
 8001b8c:	0002      	movs	r2, r0
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e0e3      	b.n	8001d62 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001b9a:	4b74      	ldr	r3, [pc, #464]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b9e:	2202      	movs	r2, #2
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	d0f1      	beq.n	8001b88 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001ba4:	4b71      	ldr	r3, [pc, #452]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ba8:	22f8      	movs	r2, #248	; 0xf8
 8001baa:	4393      	bics	r3, r2
 8001bac:	0019      	movs	r1, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	699b      	ldr	r3, [r3, #24]
 8001bb2:	00da      	lsls	r2, r3, #3
 8001bb4:	4b6d      	ldr	r3, [pc, #436]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	635a      	str	r2, [r3, #52]	; 0x34
 8001bba:	e034      	b.n	8001c26 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	695b      	ldr	r3, [r3, #20]
 8001bc0:	3305      	adds	r3, #5
 8001bc2:	d111      	bne.n	8001be8 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001bc4:	4b69      	ldr	r3, [pc, #420]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001bc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bc8:	4b68      	ldr	r3, [pc, #416]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001bca:	2104      	movs	r1, #4
 8001bcc:	438a      	bics	r2, r1
 8001bce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001bd0:	4b66      	ldr	r3, [pc, #408]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bd4:	22f8      	movs	r2, #248	; 0xf8
 8001bd6:	4393      	bics	r3, r2
 8001bd8:	0019      	movs	r1, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	699b      	ldr	r3, [r3, #24]
 8001bde:	00da      	lsls	r2, r3, #3
 8001be0:	4b62      	ldr	r3, [pc, #392]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001be2:	430a      	orrs	r2, r1
 8001be4:	635a      	str	r2, [r3, #52]	; 0x34
 8001be6:	e01e      	b.n	8001c26 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001be8:	4b60      	ldr	r3, [pc, #384]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001bea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bec:	4b5f      	ldr	r3, [pc, #380]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001bee:	2104      	movs	r1, #4
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001bf4:	4b5d      	ldr	r3, [pc, #372]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001bf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bf8:	4b5c      	ldr	r3, [pc, #368]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001bfa:	2101      	movs	r1, #1
 8001bfc:	438a      	bics	r2, r1
 8001bfe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c00:	f7ff fa54 	bl	80010ac <HAL_GetTick>
 8001c04:	0003      	movs	r3, r0
 8001c06:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001c08:	e008      	b.n	8001c1c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001c0a:	f7ff fa4f 	bl	80010ac <HAL_GetTick>
 8001c0e:	0002      	movs	r2, r0
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e0a2      	b.n	8001d62 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001c1c:	4b53      	ldr	r3, [pc, #332]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c20:	2202      	movs	r2, #2
 8001c22:	4013      	ands	r3, r2
 8001c24:	d1f1      	bne.n	8001c0a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a1b      	ldr	r3, [r3, #32]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d100      	bne.n	8001c30 <HAL_RCC_OscConfig+0x4e4>
 8001c2e:	e097      	b.n	8001d60 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c30:	4b4e      	ldr	r3, [pc, #312]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	220c      	movs	r2, #12
 8001c36:	4013      	ands	r3, r2
 8001c38:	2b08      	cmp	r3, #8
 8001c3a:	d100      	bne.n	8001c3e <HAL_RCC_OscConfig+0x4f2>
 8001c3c:	e06b      	b.n	8001d16 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a1b      	ldr	r3, [r3, #32]
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d14c      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c46:	4b49      	ldr	r3, [pc, #292]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	4b48      	ldr	r3, [pc, #288]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001c4c:	494a      	ldr	r1, [pc, #296]	; (8001d78 <HAL_RCC_OscConfig+0x62c>)
 8001c4e:	400a      	ands	r2, r1
 8001c50:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c52:	f7ff fa2b 	bl	80010ac <HAL_GetTick>
 8001c56:	0003      	movs	r3, r0
 8001c58:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c5c:	f7ff fa26 	bl	80010ac <HAL_GetTick>
 8001c60:	0002      	movs	r2, r0
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e079      	b.n	8001d62 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c6e:	4b3f      	ldr	r3, [pc, #252]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	2380      	movs	r3, #128	; 0x80
 8001c74:	049b      	lsls	r3, r3, #18
 8001c76:	4013      	ands	r3, r2
 8001c78:	d1f0      	bne.n	8001c5c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c7a:	4b3c      	ldr	r3, [pc, #240]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7e:	220f      	movs	r2, #15
 8001c80:	4393      	bics	r3, r2
 8001c82:	0019      	movs	r1, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c88:	4b38      	ldr	r3, [pc, #224]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c8e:	4b37      	ldr	r3, [pc, #220]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	4a3a      	ldr	r2, [pc, #232]	; (8001d7c <HAL_RCC_OscConfig+0x630>)
 8001c94:	4013      	ands	r3, r2
 8001c96:	0019      	movs	r1, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca0:	431a      	orrs	r2, r3
 8001ca2:	4b32      	ldr	r3, [pc, #200]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ca8:	4b30      	ldr	r3, [pc, #192]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	4b2f      	ldr	r3, [pc, #188]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001cae:	2180      	movs	r1, #128	; 0x80
 8001cb0:	0449      	lsls	r1, r1, #17
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb6:	f7ff f9f9 	bl	80010ac <HAL_GetTick>
 8001cba:	0003      	movs	r3, r0
 8001cbc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cc0:	f7ff f9f4 	bl	80010ac <HAL_GetTick>
 8001cc4:	0002      	movs	r2, r0
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e047      	b.n	8001d62 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cd2:	4b26      	ldr	r3, [pc, #152]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	2380      	movs	r3, #128	; 0x80
 8001cd8:	049b      	lsls	r3, r3, #18
 8001cda:	4013      	ands	r3, r2
 8001cdc:	d0f0      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x574>
 8001cde:	e03f      	b.n	8001d60 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ce0:	4b22      	ldr	r3, [pc, #136]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	4b21      	ldr	r3, [pc, #132]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001ce6:	4924      	ldr	r1, [pc, #144]	; (8001d78 <HAL_RCC_OscConfig+0x62c>)
 8001ce8:	400a      	ands	r2, r1
 8001cea:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cec:	f7ff f9de 	bl	80010ac <HAL_GetTick>
 8001cf0:	0003      	movs	r3, r0
 8001cf2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cf4:	e008      	b.n	8001d08 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cf6:	f7ff f9d9 	bl	80010ac <HAL_GetTick>
 8001cfa:	0002      	movs	r2, r0
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d901      	bls.n	8001d08 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e02c      	b.n	8001d62 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d08:	4b18      	ldr	r3, [pc, #96]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	2380      	movs	r3, #128	; 0x80
 8001d0e:	049b      	lsls	r3, r3, #18
 8001d10:	4013      	ands	r3, r2
 8001d12:	d1f0      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x5aa>
 8001d14:	e024      	b.n	8001d60 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a1b      	ldr	r3, [r3, #32]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d101      	bne.n	8001d22 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e01f      	b.n	8001d62 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001d22:	4b12      	ldr	r3, [pc, #72]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001d28:	4b10      	ldr	r3, [pc, #64]	; (8001d6c <HAL_RCC_OscConfig+0x620>)
 8001d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d2e:	697a      	ldr	r2, [r7, #20]
 8001d30:	2380      	movs	r3, #128	; 0x80
 8001d32:	025b      	lsls	r3, r3, #9
 8001d34:	401a      	ands	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d10e      	bne.n	8001d5c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	220f      	movs	r2, #15
 8001d42:	401a      	ands	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d107      	bne.n	8001d5c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001d4c:	697a      	ldr	r2, [r7, #20]
 8001d4e:	23f0      	movs	r3, #240	; 0xf0
 8001d50:	039b      	lsls	r3, r3, #14
 8001d52:	401a      	ands	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d001      	beq.n	8001d60 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e000      	b.n	8001d62 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	0018      	movs	r0, r3
 8001d64:	46bd      	mov	sp, r7
 8001d66:	b008      	add	sp, #32
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	46c0      	nop			; (mov r8, r8)
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	00001388 	.word	0x00001388
 8001d74:	efffffff 	.word	0xefffffff
 8001d78:	feffffff 	.word	0xfeffffff
 8001d7c:	ffc2ffff 	.word	0xffc2ffff

08001d80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d101      	bne.n	8001d94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e0b3      	b.n	8001efc <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d94:	4b5b      	ldr	r3, [pc, #364]	; (8001f04 <HAL_RCC_ClockConfig+0x184>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	683a      	ldr	r2, [r7, #0]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d911      	bls.n	8001dc6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001da2:	4b58      	ldr	r3, [pc, #352]	; (8001f04 <HAL_RCC_ClockConfig+0x184>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2201      	movs	r2, #1
 8001da8:	4393      	bics	r3, r2
 8001daa:	0019      	movs	r1, r3
 8001dac:	4b55      	ldr	r3, [pc, #340]	; (8001f04 <HAL_RCC_ClockConfig+0x184>)
 8001dae:	683a      	ldr	r2, [r7, #0]
 8001db0:	430a      	orrs	r2, r1
 8001db2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001db4:	4b53      	ldr	r3, [pc, #332]	; (8001f04 <HAL_RCC_ClockConfig+0x184>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2201      	movs	r2, #1
 8001dba:	4013      	ands	r3, r2
 8001dbc:	683a      	ldr	r2, [r7, #0]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d001      	beq.n	8001dc6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e09a      	b.n	8001efc <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2202      	movs	r2, #2
 8001dcc:	4013      	ands	r3, r2
 8001dce:	d015      	beq.n	8001dfc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2204      	movs	r2, #4
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	d006      	beq.n	8001de8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001dda:	4b4b      	ldr	r3, [pc, #300]	; (8001f08 <HAL_RCC_ClockConfig+0x188>)
 8001ddc:	685a      	ldr	r2, [r3, #4]
 8001dde:	4b4a      	ldr	r3, [pc, #296]	; (8001f08 <HAL_RCC_ClockConfig+0x188>)
 8001de0:	21e0      	movs	r1, #224	; 0xe0
 8001de2:	00c9      	lsls	r1, r1, #3
 8001de4:	430a      	orrs	r2, r1
 8001de6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001de8:	4b47      	ldr	r3, [pc, #284]	; (8001f08 <HAL_RCC_ClockConfig+0x188>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	22f0      	movs	r2, #240	; 0xf0
 8001dee:	4393      	bics	r3, r2
 8001df0:	0019      	movs	r1, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	689a      	ldr	r2, [r3, #8]
 8001df6:	4b44      	ldr	r3, [pc, #272]	; (8001f08 <HAL_RCC_ClockConfig+0x188>)
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2201      	movs	r2, #1
 8001e02:	4013      	ands	r3, r2
 8001e04:	d040      	beq.n	8001e88 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d107      	bne.n	8001e1e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e0e:	4b3e      	ldr	r3, [pc, #248]	; (8001f08 <HAL_RCC_ClockConfig+0x188>)
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	2380      	movs	r3, #128	; 0x80
 8001e14:	029b      	lsls	r3, r3, #10
 8001e16:	4013      	ands	r3, r2
 8001e18:	d114      	bne.n	8001e44 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e06e      	b.n	8001efc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d107      	bne.n	8001e36 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e26:	4b38      	ldr	r3, [pc, #224]	; (8001f08 <HAL_RCC_ClockConfig+0x188>)
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	2380      	movs	r3, #128	; 0x80
 8001e2c:	049b      	lsls	r3, r3, #18
 8001e2e:	4013      	ands	r3, r2
 8001e30:	d108      	bne.n	8001e44 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e062      	b.n	8001efc <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e36:	4b34      	ldr	r3, [pc, #208]	; (8001f08 <HAL_RCC_ClockConfig+0x188>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2202      	movs	r2, #2
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	d101      	bne.n	8001e44 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e05b      	b.n	8001efc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e44:	4b30      	ldr	r3, [pc, #192]	; (8001f08 <HAL_RCC_ClockConfig+0x188>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	2203      	movs	r2, #3
 8001e4a:	4393      	bics	r3, r2
 8001e4c:	0019      	movs	r1, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685a      	ldr	r2, [r3, #4]
 8001e52:	4b2d      	ldr	r3, [pc, #180]	; (8001f08 <HAL_RCC_ClockConfig+0x188>)
 8001e54:	430a      	orrs	r2, r1
 8001e56:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e58:	f7ff f928 	bl	80010ac <HAL_GetTick>
 8001e5c:	0003      	movs	r3, r0
 8001e5e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e60:	e009      	b.n	8001e76 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e62:	f7ff f923 	bl	80010ac <HAL_GetTick>
 8001e66:	0002      	movs	r2, r0
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	4a27      	ldr	r2, [pc, #156]	; (8001f0c <HAL_RCC_ClockConfig+0x18c>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e042      	b.n	8001efc <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e76:	4b24      	ldr	r3, [pc, #144]	; (8001f08 <HAL_RCC_ClockConfig+0x188>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	220c      	movs	r2, #12
 8001e7c:	401a      	ands	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d1ec      	bne.n	8001e62 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e88:	4b1e      	ldr	r3, [pc, #120]	; (8001f04 <HAL_RCC_ClockConfig+0x184>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	4013      	ands	r3, r2
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d211      	bcs.n	8001eba <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e96:	4b1b      	ldr	r3, [pc, #108]	; (8001f04 <HAL_RCC_ClockConfig+0x184>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	4393      	bics	r3, r2
 8001e9e:	0019      	movs	r1, r3
 8001ea0:	4b18      	ldr	r3, [pc, #96]	; (8001f04 <HAL_RCC_ClockConfig+0x184>)
 8001ea2:	683a      	ldr	r2, [r7, #0]
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea8:	4b16      	ldr	r3, [pc, #88]	; (8001f04 <HAL_RCC_ClockConfig+0x184>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2201      	movs	r2, #1
 8001eae:	4013      	ands	r3, r2
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d001      	beq.n	8001eba <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e020      	b.n	8001efc <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2204      	movs	r2, #4
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	d009      	beq.n	8001ed8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001ec4:	4b10      	ldr	r3, [pc, #64]	; (8001f08 <HAL_RCC_ClockConfig+0x188>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	4a11      	ldr	r2, [pc, #68]	; (8001f10 <HAL_RCC_ClockConfig+0x190>)
 8001eca:	4013      	ands	r3, r2
 8001ecc:	0019      	movs	r1, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	68da      	ldr	r2, [r3, #12]
 8001ed2:	4b0d      	ldr	r3, [pc, #52]	; (8001f08 <HAL_RCC_ClockConfig+0x188>)
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001ed8:	f000 f820 	bl	8001f1c <HAL_RCC_GetSysClockFreq>
 8001edc:	0001      	movs	r1, r0
 8001ede:	4b0a      	ldr	r3, [pc, #40]	; (8001f08 <HAL_RCC_ClockConfig+0x188>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	091b      	lsrs	r3, r3, #4
 8001ee4:	220f      	movs	r2, #15
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	4a0a      	ldr	r2, [pc, #40]	; (8001f14 <HAL_RCC_ClockConfig+0x194>)
 8001eea:	5cd3      	ldrb	r3, [r2, r3]
 8001eec:	000a      	movs	r2, r1
 8001eee:	40da      	lsrs	r2, r3
 8001ef0:	4b09      	ldr	r3, [pc, #36]	; (8001f18 <HAL_RCC_ClockConfig+0x198>)
 8001ef2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001ef4:	2000      	movs	r0, #0
 8001ef6:	f7ff f893 	bl	8001020 <HAL_InitTick>
  
  return HAL_OK;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	0018      	movs	r0, r3
 8001efe:	46bd      	mov	sp, r7
 8001f00:	b004      	add	sp, #16
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40022000 	.word	0x40022000
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	00001388 	.word	0x00001388
 8001f10:	fffff8ff 	.word	0xfffff8ff
 8001f14:	080044c0 	.word	0x080044c0
 8001f18:	20000030 	.word	0x20000030

08001f1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f22:	2300      	movs	r3, #0
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	2300      	movs	r3, #0
 8001f28:	60bb      	str	r3, [r7, #8]
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	617b      	str	r3, [r7, #20]
 8001f2e:	2300      	movs	r3, #0
 8001f30:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f32:	2300      	movs	r3, #0
 8001f34:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001f36:	4b20      	ldr	r3, [pc, #128]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	220c      	movs	r2, #12
 8001f40:	4013      	ands	r3, r2
 8001f42:	2b04      	cmp	r3, #4
 8001f44:	d002      	beq.n	8001f4c <HAL_RCC_GetSysClockFreq+0x30>
 8001f46:	2b08      	cmp	r3, #8
 8001f48:	d003      	beq.n	8001f52 <HAL_RCC_GetSysClockFreq+0x36>
 8001f4a:	e02c      	b.n	8001fa6 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f4c:	4b1b      	ldr	r3, [pc, #108]	; (8001fbc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f4e:	613b      	str	r3, [r7, #16]
      break;
 8001f50:	e02c      	b.n	8001fac <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	0c9b      	lsrs	r3, r3, #18
 8001f56:	220f      	movs	r2, #15
 8001f58:	4013      	ands	r3, r2
 8001f5a:	4a19      	ldr	r2, [pc, #100]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f5c:	5cd3      	ldrb	r3, [r2, r3]
 8001f5e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001f60:	4b15      	ldr	r3, [pc, #84]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f64:	220f      	movs	r2, #15
 8001f66:	4013      	ands	r3, r2
 8001f68:	4a16      	ldr	r2, [pc, #88]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001f6a:	5cd3      	ldrb	r3, [r2, r3]
 8001f6c:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	2380      	movs	r3, #128	; 0x80
 8001f72:	025b      	lsls	r3, r3, #9
 8001f74:	4013      	ands	r3, r2
 8001f76:	d009      	beq.n	8001f8c <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f78:	68b9      	ldr	r1, [r7, #8]
 8001f7a:	4810      	ldr	r0, [pc, #64]	; (8001fbc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f7c:	f7fe f8c4 	bl	8000108 <__udivsi3>
 8001f80:	0003      	movs	r3, r0
 8001f82:	001a      	movs	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4353      	muls	r3, r2
 8001f88:	617b      	str	r3, [r7, #20]
 8001f8a:	e009      	b.n	8001fa0 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001f8c:	6879      	ldr	r1, [r7, #4]
 8001f8e:	000a      	movs	r2, r1
 8001f90:	0152      	lsls	r2, r2, #5
 8001f92:	1a52      	subs	r2, r2, r1
 8001f94:	0193      	lsls	r3, r2, #6
 8001f96:	1a9b      	subs	r3, r3, r2
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	185b      	adds	r3, r3, r1
 8001f9c:	021b      	lsls	r3, r3, #8
 8001f9e:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	613b      	str	r3, [r7, #16]
      break;
 8001fa4:	e002      	b.n	8001fac <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fa6:	4b05      	ldr	r3, [pc, #20]	; (8001fbc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001fa8:	613b      	str	r3, [r7, #16]
      break;
 8001faa:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001fac:	693b      	ldr	r3, [r7, #16]
}
 8001fae:	0018      	movs	r0, r3
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	b006      	add	sp, #24
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	46c0      	nop			; (mov r8, r8)
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	007a1200 	.word	0x007a1200
 8001fc0:	080044d8 	.word	0x080044d8
 8001fc4:	080044e8 	.word	0x080044e8

08001fc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fcc:	4b02      	ldr	r3, [pc, #8]	; (8001fd8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001fce:	681b      	ldr	r3, [r3, #0]
}
 8001fd0:	0018      	movs	r0, r3
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	46c0      	nop			; (mov r8, r8)
 8001fd8:	20000030 	.word	0x20000030

08001fdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001fe0:	f7ff fff2 	bl	8001fc8 <HAL_RCC_GetHCLKFreq>
 8001fe4:	0001      	movs	r1, r0
 8001fe6:	4b06      	ldr	r3, [pc, #24]	; (8002000 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	0a1b      	lsrs	r3, r3, #8
 8001fec:	2207      	movs	r2, #7
 8001fee:	4013      	ands	r3, r2
 8001ff0:	4a04      	ldr	r2, [pc, #16]	; (8002004 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ff2:	5cd3      	ldrb	r3, [r2, r3]
 8001ff4:	40d9      	lsrs	r1, r3
 8001ff6:	000b      	movs	r3, r1
}    
 8001ff8:	0018      	movs	r0, r3
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	46c0      	nop			; (mov r8, r8)
 8002000:	40021000 	.word	0x40021000
 8002004:	080044d0 	.word	0x080044d0

08002008 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002010:	2300      	movs	r3, #0
 8002012:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002014:	2300      	movs	r3, #0
 8002016:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	2380      	movs	r3, #128	; 0x80
 800201e:	025b      	lsls	r3, r3, #9
 8002020:	4013      	ands	r3, r2
 8002022:	d100      	bne.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002024:	e08e      	b.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002026:	2017      	movs	r0, #23
 8002028:	183b      	adds	r3, r7, r0
 800202a:	2200      	movs	r2, #0
 800202c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800202e:	4b5f      	ldr	r3, [pc, #380]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002030:	69da      	ldr	r2, [r3, #28]
 8002032:	2380      	movs	r3, #128	; 0x80
 8002034:	055b      	lsls	r3, r3, #21
 8002036:	4013      	ands	r3, r2
 8002038:	d110      	bne.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800203a:	4b5c      	ldr	r3, [pc, #368]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800203c:	69da      	ldr	r2, [r3, #28]
 800203e:	4b5b      	ldr	r3, [pc, #364]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002040:	2180      	movs	r1, #128	; 0x80
 8002042:	0549      	lsls	r1, r1, #21
 8002044:	430a      	orrs	r2, r1
 8002046:	61da      	str	r2, [r3, #28]
 8002048:	4b58      	ldr	r3, [pc, #352]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800204a:	69da      	ldr	r2, [r3, #28]
 800204c:	2380      	movs	r3, #128	; 0x80
 800204e:	055b      	lsls	r3, r3, #21
 8002050:	4013      	ands	r3, r2
 8002052:	60bb      	str	r3, [r7, #8]
 8002054:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002056:	183b      	adds	r3, r7, r0
 8002058:	2201      	movs	r2, #1
 800205a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800205c:	4b54      	ldr	r3, [pc, #336]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	2380      	movs	r3, #128	; 0x80
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	4013      	ands	r3, r2
 8002066:	d11a      	bne.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002068:	4b51      	ldr	r3, [pc, #324]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	4b50      	ldr	r3, [pc, #320]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800206e:	2180      	movs	r1, #128	; 0x80
 8002070:	0049      	lsls	r1, r1, #1
 8002072:	430a      	orrs	r2, r1
 8002074:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002076:	f7ff f819 	bl	80010ac <HAL_GetTick>
 800207a:	0003      	movs	r3, r0
 800207c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800207e:	e008      	b.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002080:	f7ff f814 	bl	80010ac <HAL_GetTick>
 8002084:	0002      	movs	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b64      	cmp	r3, #100	; 0x64
 800208c:	d901      	bls.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e087      	b.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002092:	4b47      	ldr	r3, [pc, #284]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	2380      	movs	r3, #128	; 0x80
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	4013      	ands	r3, r2
 800209c:	d0f0      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800209e:	4b43      	ldr	r3, [pc, #268]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80020a0:	6a1a      	ldr	r2, [r3, #32]
 80020a2:	23c0      	movs	r3, #192	; 0xc0
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	4013      	ands	r3, r2
 80020a8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d034      	beq.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x112>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685a      	ldr	r2, [r3, #4]
 80020b4:	23c0      	movs	r3, #192	; 0xc0
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	4013      	ands	r3, r2
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d02c      	beq.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80020c0:	4b3a      	ldr	r3, [pc, #232]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80020c2:	6a1b      	ldr	r3, [r3, #32]
 80020c4:	4a3b      	ldr	r2, [pc, #236]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020c6:	4013      	ands	r3, r2
 80020c8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80020ca:	4b38      	ldr	r3, [pc, #224]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80020cc:	6a1a      	ldr	r2, [r3, #32]
 80020ce:	4b37      	ldr	r3, [pc, #220]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80020d0:	2180      	movs	r1, #128	; 0x80
 80020d2:	0249      	lsls	r1, r1, #9
 80020d4:	430a      	orrs	r2, r1
 80020d6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020d8:	4b34      	ldr	r3, [pc, #208]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80020da:	6a1a      	ldr	r2, [r3, #32]
 80020dc:	4b33      	ldr	r3, [pc, #204]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80020de:	4936      	ldr	r1, [pc, #216]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80020e0:	400a      	ands	r2, r1
 80020e2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80020e4:	4b31      	ldr	r3, [pc, #196]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2201      	movs	r2, #1
 80020ee:	4013      	ands	r3, r2
 80020f0:	d013      	beq.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f2:	f7fe ffdb 	bl	80010ac <HAL_GetTick>
 80020f6:	0003      	movs	r3, r0
 80020f8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020fa:	e009      	b.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020fc:	f7fe ffd6 	bl	80010ac <HAL_GetTick>
 8002100:	0002      	movs	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	4a2d      	ldr	r2, [pc, #180]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d901      	bls.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e048      	b.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002110:	4b26      	ldr	r3, [pc, #152]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	2202      	movs	r2, #2
 8002116:	4013      	ands	r3, r2
 8002118:	d0f0      	beq.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800211a:	4b24      	ldr	r3, [pc, #144]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800211c:	6a1b      	ldr	r3, [r3, #32]
 800211e:	4a25      	ldr	r2, [pc, #148]	; (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002120:	4013      	ands	r3, r2
 8002122:	0019      	movs	r1, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	4b20      	ldr	r3, [pc, #128]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800212a:	430a      	orrs	r2, r1
 800212c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800212e:	2317      	movs	r3, #23
 8002130:	18fb      	adds	r3, r7, r3
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	2b01      	cmp	r3, #1
 8002136:	d105      	bne.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002138:	4b1c      	ldr	r3, [pc, #112]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800213a:	69da      	ldr	r2, [r3, #28]
 800213c:	4b1b      	ldr	r3, [pc, #108]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800213e:	4920      	ldr	r1, [pc, #128]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002140:	400a      	ands	r2, r1
 8002142:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2201      	movs	r2, #1
 800214a:	4013      	ands	r3, r2
 800214c:	d009      	beq.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800214e:	4b17      	ldr	r3, [pc, #92]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002152:	2203      	movs	r2, #3
 8002154:	4393      	bics	r3, r2
 8002156:	0019      	movs	r1, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689a      	ldr	r2, [r3, #8]
 800215c:	4b13      	ldr	r3, [pc, #76]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800215e:	430a      	orrs	r2, r1
 8002160:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2220      	movs	r2, #32
 8002168:	4013      	ands	r3, r2
 800216a:	d009      	beq.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800216c:	4b0f      	ldr	r3, [pc, #60]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800216e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002170:	2210      	movs	r2, #16
 8002172:	4393      	bics	r3, r2
 8002174:	0019      	movs	r1, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	68da      	ldr	r2, [r3, #12]
 800217a:	4b0c      	ldr	r3, [pc, #48]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800217c:	430a      	orrs	r2, r1
 800217e:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	2380      	movs	r3, #128	; 0x80
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	4013      	ands	r3, r2
 800218a:	d009      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800218c:	4b07      	ldr	r3, [pc, #28]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800218e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002190:	2240      	movs	r2, #64	; 0x40
 8002192:	4393      	bics	r3, r2
 8002194:	0019      	movs	r1, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	691a      	ldr	r2, [r3, #16]
 800219a:	4b04      	ldr	r3, [pc, #16]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800219c:	430a      	orrs	r2, r1
 800219e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	0018      	movs	r0, r3
 80021a4:	46bd      	mov	sp, r7
 80021a6:	b006      	add	sp, #24
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	46c0      	nop			; (mov r8, r8)
 80021ac:	40021000 	.word	0x40021000
 80021b0:	40007000 	.word	0x40007000
 80021b4:	fffffcff 	.word	0xfffffcff
 80021b8:	fffeffff 	.word	0xfffeffff
 80021bc:	00001388 	.word	0x00001388
 80021c0:	efffffff 	.word	0xefffffff

080021c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e042      	b.n	800225c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	223d      	movs	r2, #61	; 0x3d
 80021da:	5c9b      	ldrb	r3, [r3, r2]
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d107      	bne.n	80021f2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	223c      	movs	r2, #60	; 0x3c
 80021e6:	2100      	movs	r1, #0
 80021e8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	0018      	movs	r0, r3
 80021ee:	f7fe fdff 	bl	8000df0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	223d      	movs	r2, #61	; 0x3d
 80021f6:	2102      	movs	r1, #2
 80021f8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	3304      	adds	r3, #4
 8002202:	0019      	movs	r1, r3
 8002204:	0010      	movs	r0, r2
 8002206:	f000 fb21 	bl	800284c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2246      	movs	r2, #70	; 0x46
 800220e:	2101      	movs	r1, #1
 8002210:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	223e      	movs	r2, #62	; 0x3e
 8002216:	2101      	movs	r1, #1
 8002218:	5499      	strb	r1, [r3, r2]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	223f      	movs	r2, #63	; 0x3f
 800221e:	2101      	movs	r1, #1
 8002220:	5499      	strb	r1, [r3, r2]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2240      	movs	r2, #64	; 0x40
 8002226:	2101      	movs	r1, #1
 8002228:	5499      	strb	r1, [r3, r2]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2241      	movs	r2, #65	; 0x41
 800222e:	2101      	movs	r1, #1
 8002230:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2242      	movs	r2, #66	; 0x42
 8002236:	2101      	movs	r1, #1
 8002238:	5499      	strb	r1, [r3, r2]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2243      	movs	r2, #67	; 0x43
 800223e:	2101      	movs	r1, #1
 8002240:	5499      	strb	r1, [r3, r2]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2244      	movs	r2, #68	; 0x44
 8002246:	2101      	movs	r1, #1
 8002248:	5499      	strb	r1, [r3, r2]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2245      	movs	r2, #69	; 0x45
 800224e:	2101      	movs	r1, #1
 8002250:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	223d      	movs	r2, #61	; 0x3d
 8002256:	2101      	movs	r1, #1
 8002258:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800225a:	2300      	movs	r3, #0
}
 800225c:	0018      	movs	r0, r3
 800225e:	46bd      	mov	sp, r7
 8002260:	b002      	add	sp, #8
 8002262:	bd80      	pop	{r7, pc}

08002264 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	223d      	movs	r2, #61	; 0x3d
 8002270:	5c9b      	ldrb	r3, [r3, r2]
 8002272:	b2db      	uxtb	r3, r3
 8002274:	2b01      	cmp	r3, #1
 8002276:	d001      	beq.n	800227c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e033      	b.n	80022e4 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	223d      	movs	r2, #61	; 0x3d
 8002280:	2102      	movs	r1, #2
 8002282:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a18      	ldr	r2, [pc, #96]	; (80022ec <HAL_TIM_Base_Start+0x88>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d00f      	beq.n	80022ae <HAL_TIM_Base_Start+0x4a>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	2380      	movs	r3, #128	; 0x80
 8002294:	05db      	lsls	r3, r3, #23
 8002296:	429a      	cmp	r2, r3
 8002298:	d009      	beq.n	80022ae <HAL_TIM_Base_Start+0x4a>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a14      	ldr	r2, [pc, #80]	; (80022f0 <HAL_TIM_Base_Start+0x8c>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d004      	beq.n	80022ae <HAL_TIM_Base_Start+0x4a>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a12      	ldr	r2, [pc, #72]	; (80022f4 <HAL_TIM_Base_Start+0x90>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d111      	bne.n	80022d2 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	2207      	movs	r2, #7
 80022b6:	4013      	ands	r3, r2
 80022b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2b06      	cmp	r3, #6
 80022be:	d010      	beq.n	80022e2 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2101      	movs	r1, #1
 80022cc:	430a      	orrs	r2, r1
 80022ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022d0:	e007      	b.n	80022e2 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2101      	movs	r1, #1
 80022de:	430a      	orrs	r2, r1
 80022e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	0018      	movs	r0, r3
 80022e6:	46bd      	mov	sp, r7
 80022e8:	b004      	add	sp, #16
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	40012c00 	.word	0x40012c00
 80022f0:	40000400 	.word	0x40000400
 80022f4:	40014000 	.word	0x40014000

080022f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e042      	b.n	8002390 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	223d      	movs	r2, #61	; 0x3d
 800230e:	5c9b      	ldrb	r3, [r3, r2]
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b00      	cmp	r3, #0
 8002314:	d107      	bne.n	8002326 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	223c      	movs	r2, #60	; 0x3c
 800231a:	2100      	movs	r1, #0
 800231c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	0018      	movs	r0, r3
 8002322:	f000 f839 	bl	8002398 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	223d      	movs	r2, #61	; 0x3d
 800232a:	2102      	movs	r1, #2
 800232c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	3304      	adds	r3, #4
 8002336:	0019      	movs	r1, r3
 8002338:	0010      	movs	r0, r2
 800233a:	f000 fa87 	bl	800284c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2246      	movs	r2, #70	; 0x46
 8002342:	2101      	movs	r1, #1
 8002344:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	223e      	movs	r2, #62	; 0x3e
 800234a:	2101      	movs	r1, #1
 800234c:	5499      	strb	r1, [r3, r2]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	223f      	movs	r2, #63	; 0x3f
 8002352:	2101      	movs	r1, #1
 8002354:	5499      	strb	r1, [r3, r2]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2240      	movs	r2, #64	; 0x40
 800235a:	2101      	movs	r1, #1
 800235c:	5499      	strb	r1, [r3, r2]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2241      	movs	r2, #65	; 0x41
 8002362:	2101      	movs	r1, #1
 8002364:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2242      	movs	r2, #66	; 0x42
 800236a:	2101      	movs	r1, #1
 800236c:	5499      	strb	r1, [r3, r2]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2243      	movs	r2, #67	; 0x43
 8002372:	2101      	movs	r1, #1
 8002374:	5499      	strb	r1, [r3, r2]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2244      	movs	r2, #68	; 0x44
 800237a:	2101      	movs	r1, #1
 800237c:	5499      	strb	r1, [r3, r2]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2245      	movs	r2, #69	; 0x45
 8002382:	2101      	movs	r1, #1
 8002384:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	223d      	movs	r2, #61	; 0x3d
 800238a:	2101      	movs	r1, #1
 800238c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800238e:	2300      	movs	r3, #0
}
 8002390:	0018      	movs	r0, r3
 8002392:	46bd      	mov	sp, r7
 8002394:	b002      	add	sp, #8
 8002396:	bd80      	pop	{r7, pc}

08002398 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80023a0:	46c0      	nop			; (mov r8, r8)
 80023a2:	46bd      	mov	sp, r7
 80023a4:	b002      	add	sp, #8
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d108      	bne.n	80023ca <HAL_TIM_PWM_Start+0x22>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	223e      	movs	r2, #62	; 0x3e
 80023bc:	5c9b      	ldrb	r3, [r3, r2]
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	3b01      	subs	r3, #1
 80023c2:	1e5a      	subs	r2, r3, #1
 80023c4:	4193      	sbcs	r3, r2
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	e01f      	b.n	800240a <HAL_TIM_PWM_Start+0x62>
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	2b04      	cmp	r3, #4
 80023ce:	d108      	bne.n	80023e2 <HAL_TIM_PWM_Start+0x3a>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	223f      	movs	r2, #63	; 0x3f
 80023d4:	5c9b      	ldrb	r3, [r3, r2]
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	3b01      	subs	r3, #1
 80023da:	1e5a      	subs	r2, r3, #1
 80023dc:	4193      	sbcs	r3, r2
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	e013      	b.n	800240a <HAL_TIM_PWM_Start+0x62>
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	2b08      	cmp	r3, #8
 80023e6:	d108      	bne.n	80023fa <HAL_TIM_PWM_Start+0x52>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2240      	movs	r2, #64	; 0x40
 80023ec:	5c9b      	ldrb	r3, [r3, r2]
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	3b01      	subs	r3, #1
 80023f2:	1e5a      	subs	r2, r3, #1
 80023f4:	4193      	sbcs	r3, r2
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	e007      	b.n	800240a <HAL_TIM_PWM_Start+0x62>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2241      	movs	r2, #65	; 0x41
 80023fe:	5c9b      	ldrb	r3, [r3, r2]
 8002400:	b2db      	uxtb	r3, r3
 8002402:	3b01      	subs	r3, #1
 8002404:	1e5a      	subs	r2, r3, #1
 8002406:	4193      	sbcs	r3, r2
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e074      	b.n	80024fc <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d104      	bne.n	8002422 <HAL_TIM_PWM_Start+0x7a>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	223e      	movs	r2, #62	; 0x3e
 800241c:	2102      	movs	r1, #2
 800241e:	5499      	strb	r1, [r3, r2]
 8002420:	e013      	b.n	800244a <HAL_TIM_PWM_Start+0xa2>
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	2b04      	cmp	r3, #4
 8002426:	d104      	bne.n	8002432 <HAL_TIM_PWM_Start+0x8a>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	223f      	movs	r2, #63	; 0x3f
 800242c:	2102      	movs	r1, #2
 800242e:	5499      	strb	r1, [r3, r2]
 8002430:	e00b      	b.n	800244a <HAL_TIM_PWM_Start+0xa2>
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	2b08      	cmp	r3, #8
 8002436:	d104      	bne.n	8002442 <HAL_TIM_PWM_Start+0x9a>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2240      	movs	r2, #64	; 0x40
 800243c:	2102      	movs	r1, #2
 800243e:	5499      	strb	r1, [r3, r2]
 8002440:	e003      	b.n	800244a <HAL_TIM_PWM_Start+0xa2>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2241      	movs	r2, #65	; 0x41
 8002446:	2102      	movs	r1, #2
 8002448:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6839      	ldr	r1, [r7, #0]
 8002450:	2201      	movs	r2, #1
 8002452:	0018      	movs	r0, r3
 8002454:	f000 fd10 	bl	8002e78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a29      	ldr	r2, [pc, #164]	; (8002504 <HAL_TIM_PWM_Start+0x15c>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d00e      	beq.n	8002480 <HAL_TIM_PWM_Start+0xd8>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a28      	ldr	r2, [pc, #160]	; (8002508 <HAL_TIM_PWM_Start+0x160>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d009      	beq.n	8002480 <HAL_TIM_PWM_Start+0xd8>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a26      	ldr	r2, [pc, #152]	; (800250c <HAL_TIM_PWM_Start+0x164>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d004      	beq.n	8002480 <HAL_TIM_PWM_Start+0xd8>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a25      	ldr	r2, [pc, #148]	; (8002510 <HAL_TIM_PWM_Start+0x168>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d101      	bne.n	8002484 <HAL_TIM_PWM_Start+0xdc>
 8002480:	2301      	movs	r3, #1
 8002482:	e000      	b.n	8002486 <HAL_TIM_PWM_Start+0xde>
 8002484:	2300      	movs	r3, #0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d008      	beq.n	800249c <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2180      	movs	r1, #128	; 0x80
 8002496:	0209      	lsls	r1, r1, #8
 8002498:	430a      	orrs	r2, r1
 800249a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a18      	ldr	r2, [pc, #96]	; (8002504 <HAL_TIM_PWM_Start+0x15c>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d00f      	beq.n	80024c6 <HAL_TIM_PWM_Start+0x11e>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	2380      	movs	r3, #128	; 0x80
 80024ac:	05db      	lsls	r3, r3, #23
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d009      	beq.n	80024c6 <HAL_TIM_PWM_Start+0x11e>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a17      	ldr	r2, [pc, #92]	; (8002514 <HAL_TIM_PWM_Start+0x16c>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d004      	beq.n	80024c6 <HAL_TIM_PWM_Start+0x11e>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a11      	ldr	r2, [pc, #68]	; (8002508 <HAL_TIM_PWM_Start+0x160>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d111      	bne.n	80024ea <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	2207      	movs	r2, #7
 80024ce:	4013      	ands	r3, r2
 80024d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2b06      	cmp	r3, #6
 80024d6:	d010      	beq.n	80024fa <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2101      	movs	r1, #1
 80024e4:	430a      	orrs	r2, r1
 80024e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024e8:	e007      	b.n	80024fa <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2101      	movs	r1, #1
 80024f6:	430a      	orrs	r2, r1
 80024f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	0018      	movs	r0, r3
 80024fe:	46bd      	mov	sp, r7
 8002500:	b004      	add	sp, #16
 8002502:	bd80      	pop	{r7, pc}
 8002504:	40012c00 	.word	0x40012c00
 8002508:	40014000 	.word	0x40014000
 800250c:	40014400 	.word	0x40014400
 8002510:	40014800 	.word	0x40014800
 8002514:	40000400 	.word	0x40000400

08002518 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002524:	2317      	movs	r3, #23
 8002526:	18fb      	adds	r3, r7, r3
 8002528:	2200      	movs	r2, #0
 800252a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	223c      	movs	r2, #60	; 0x3c
 8002530:	5c9b      	ldrb	r3, [r3, r2]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d101      	bne.n	800253a <HAL_TIM_PWM_ConfigChannel+0x22>
 8002536:	2302      	movs	r3, #2
 8002538:	e0ad      	b.n	8002696 <HAL_TIM_PWM_ConfigChannel+0x17e>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	223c      	movs	r2, #60	; 0x3c
 800253e:	2101      	movs	r1, #1
 8002540:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2b0c      	cmp	r3, #12
 8002546:	d100      	bne.n	800254a <HAL_TIM_PWM_ConfigChannel+0x32>
 8002548:	e076      	b.n	8002638 <HAL_TIM_PWM_ConfigChannel+0x120>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2b0c      	cmp	r3, #12
 800254e:	d900      	bls.n	8002552 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002550:	e095      	b.n	800267e <HAL_TIM_PWM_ConfigChannel+0x166>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2b08      	cmp	r3, #8
 8002556:	d04e      	beq.n	80025f6 <HAL_TIM_PWM_ConfigChannel+0xde>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2b08      	cmp	r3, #8
 800255c:	d900      	bls.n	8002560 <HAL_TIM_PWM_ConfigChannel+0x48>
 800255e:	e08e      	b.n	800267e <HAL_TIM_PWM_ConfigChannel+0x166>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d003      	beq.n	800256e <HAL_TIM_PWM_ConfigChannel+0x56>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2b04      	cmp	r3, #4
 800256a:	d021      	beq.n	80025b0 <HAL_TIM_PWM_ConfigChannel+0x98>
 800256c:	e087      	b.n	800267e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	68ba      	ldr	r2, [r7, #8]
 8002574:	0011      	movs	r1, r2
 8002576:	0018      	movs	r0, r3
 8002578:	f000 f9e8 	bl	800294c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	699a      	ldr	r2, [r3, #24]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2108      	movs	r1, #8
 8002588:	430a      	orrs	r2, r1
 800258a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	699a      	ldr	r2, [r3, #24]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2104      	movs	r1, #4
 8002598:	438a      	bics	r2, r1
 800259a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	6999      	ldr	r1, [r3, #24]
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	691a      	ldr	r2, [r3, #16]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	430a      	orrs	r2, r1
 80025ac:	619a      	str	r2, [r3, #24]
      break;
 80025ae:	e06b      	b.n	8002688 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68ba      	ldr	r2, [r7, #8]
 80025b6:	0011      	movs	r1, r2
 80025b8:	0018      	movs	r0, r3
 80025ba:	f000 fa4f 	bl	8002a5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	699a      	ldr	r2, [r3, #24]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2180      	movs	r1, #128	; 0x80
 80025ca:	0109      	lsls	r1, r1, #4
 80025cc:	430a      	orrs	r2, r1
 80025ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	699a      	ldr	r2, [r3, #24]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4931      	ldr	r1, [pc, #196]	; (80026a0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80025dc:	400a      	ands	r2, r1
 80025de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6999      	ldr	r1, [r3, #24]
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	021a      	lsls	r2, r3, #8
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	430a      	orrs	r2, r1
 80025f2:	619a      	str	r2, [r3, #24]
      break;
 80025f4:	e048      	b.n	8002688 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68ba      	ldr	r2, [r7, #8]
 80025fc:	0011      	movs	r1, r2
 80025fe:	0018      	movs	r0, r3
 8002600:	f000 fab0 	bl	8002b64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	69da      	ldr	r2, [r3, #28]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2108      	movs	r1, #8
 8002610:	430a      	orrs	r2, r1
 8002612:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	69da      	ldr	r2, [r3, #28]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2104      	movs	r1, #4
 8002620:	438a      	bics	r2, r1
 8002622:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	69d9      	ldr	r1, [r3, #28]
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	691a      	ldr	r2, [r3, #16]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	430a      	orrs	r2, r1
 8002634:	61da      	str	r2, [r3, #28]
      break;
 8002636:	e027      	b.n	8002688 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	68ba      	ldr	r2, [r7, #8]
 800263e:	0011      	movs	r1, r2
 8002640:	0018      	movs	r0, r3
 8002642:	f000 fb15 	bl	8002c70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	69da      	ldr	r2, [r3, #28]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2180      	movs	r1, #128	; 0x80
 8002652:	0109      	lsls	r1, r1, #4
 8002654:	430a      	orrs	r2, r1
 8002656:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	69da      	ldr	r2, [r3, #28]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	490f      	ldr	r1, [pc, #60]	; (80026a0 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002664:	400a      	ands	r2, r1
 8002666:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	69d9      	ldr	r1, [r3, #28]
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	021a      	lsls	r2, r3, #8
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	430a      	orrs	r2, r1
 800267a:	61da      	str	r2, [r3, #28]
      break;
 800267c:	e004      	b.n	8002688 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800267e:	2317      	movs	r3, #23
 8002680:	18fb      	adds	r3, r7, r3
 8002682:	2201      	movs	r2, #1
 8002684:	701a      	strb	r2, [r3, #0]
      break;
 8002686:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	223c      	movs	r2, #60	; 0x3c
 800268c:	2100      	movs	r1, #0
 800268e:	5499      	strb	r1, [r3, r2]

  return status;
 8002690:	2317      	movs	r3, #23
 8002692:	18fb      	adds	r3, r7, r3
 8002694:	781b      	ldrb	r3, [r3, #0]
}
 8002696:	0018      	movs	r0, r3
 8002698:	46bd      	mov	sp, r7
 800269a:	b006      	add	sp, #24
 800269c:	bd80      	pop	{r7, pc}
 800269e:	46c0      	nop			; (mov r8, r8)
 80026a0:	fffffbff 	.word	0xfffffbff

080026a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026ae:	230f      	movs	r3, #15
 80026b0:	18fb      	adds	r3, r7, r3
 80026b2:	2200      	movs	r2, #0
 80026b4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	223c      	movs	r2, #60	; 0x3c
 80026ba:	5c9b      	ldrb	r3, [r3, r2]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d101      	bne.n	80026c4 <HAL_TIM_ConfigClockSource+0x20>
 80026c0:	2302      	movs	r3, #2
 80026c2:	e0bc      	b.n	800283e <HAL_TIM_ConfigClockSource+0x19a>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	223c      	movs	r2, #60	; 0x3c
 80026c8:	2101      	movs	r1, #1
 80026ca:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	223d      	movs	r2, #61	; 0x3d
 80026d0:	2102      	movs	r1, #2
 80026d2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	2277      	movs	r2, #119	; 0x77
 80026e0:	4393      	bics	r3, r2
 80026e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	4a58      	ldr	r2, [pc, #352]	; (8002848 <HAL_TIM_ConfigClockSource+0x1a4>)
 80026e8:	4013      	ands	r3, r2
 80026ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68ba      	ldr	r2, [r7, #8]
 80026f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2280      	movs	r2, #128	; 0x80
 80026fa:	0192      	lsls	r2, r2, #6
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d040      	beq.n	8002782 <HAL_TIM_ConfigClockSource+0xde>
 8002700:	2280      	movs	r2, #128	; 0x80
 8002702:	0192      	lsls	r2, r2, #6
 8002704:	4293      	cmp	r3, r2
 8002706:	d900      	bls.n	800270a <HAL_TIM_ConfigClockSource+0x66>
 8002708:	e088      	b.n	800281c <HAL_TIM_ConfigClockSource+0x178>
 800270a:	2280      	movs	r2, #128	; 0x80
 800270c:	0152      	lsls	r2, r2, #5
 800270e:	4293      	cmp	r3, r2
 8002710:	d100      	bne.n	8002714 <HAL_TIM_ConfigClockSource+0x70>
 8002712:	e088      	b.n	8002826 <HAL_TIM_ConfigClockSource+0x182>
 8002714:	2280      	movs	r2, #128	; 0x80
 8002716:	0152      	lsls	r2, r2, #5
 8002718:	4293      	cmp	r3, r2
 800271a:	d900      	bls.n	800271e <HAL_TIM_ConfigClockSource+0x7a>
 800271c:	e07e      	b.n	800281c <HAL_TIM_ConfigClockSource+0x178>
 800271e:	2b70      	cmp	r3, #112	; 0x70
 8002720:	d018      	beq.n	8002754 <HAL_TIM_ConfigClockSource+0xb0>
 8002722:	d900      	bls.n	8002726 <HAL_TIM_ConfigClockSource+0x82>
 8002724:	e07a      	b.n	800281c <HAL_TIM_ConfigClockSource+0x178>
 8002726:	2b60      	cmp	r3, #96	; 0x60
 8002728:	d04f      	beq.n	80027ca <HAL_TIM_ConfigClockSource+0x126>
 800272a:	d900      	bls.n	800272e <HAL_TIM_ConfigClockSource+0x8a>
 800272c:	e076      	b.n	800281c <HAL_TIM_ConfigClockSource+0x178>
 800272e:	2b50      	cmp	r3, #80	; 0x50
 8002730:	d03b      	beq.n	80027aa <HAL_TIM_ConfigClockSource+0x106>
 8002732:	d900      	bls.n	8002736 <HAL_TIM_ConfigClockSource+0x92>
 8002734:	e072      	b.n	800281c <HAL_TIM_ConfigClockSource+0x178>
 8002736:	2b40      	cmp	r3, #64	; 0x40
 8002738:	d057      	beq.n	80027ea <HAL_TIM_ConfigClockSource+0x146>
 800273a:	d900      	bls.n	800273e <HAL_TIM_ConfigClockSource+0x9a>
 800273c:	e06e      	b.n	800281c <HAL_TIM_ConfigClockSource+0x178>
 800273e:	2b30      	cmp	r3, #48	; 0x30
 8002740:	d063      	beq.n	800280a <HAL_TIM_ConfigClockSource+0x166>
 8002742:	d86b      	bhi.n	800281c <HAL_TIM_ConfigClockSource+0x178>
 8002744:	2b20      	cmp	r3, #32
 8002746:	d060      	beq.n	800280a <HAL_TIM_ConfigClockSource+0x166>
 8002748:	d868      	bhi.n	800281c <HAL_TIM_ConfigClockSource+0x178>
 800274a:	2b00      	cmp	r3, #0
 800274c:	d05d      	beq.n	800280a <HAL_TIM_ConfigClockSource+0x166>
 800274e:	2b10      	cmp	r3, #16
 8002750:	d05b      	beq.n	800280a <HAL_TIM_ConfigClockSource+0x166>
 8002752:	e063      	b.n	800281c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6818      	ldr	r0, [r3, #0]
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	6899      	ldr	r1, [r3, #8]
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685a      	ldr	r2, [r3, #4]
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	f000 fb68 	bl	8002e38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	2277      	movs	r2, #119	; 0x77
 8002774:	4313      	orrs	r3, r2
 8002776:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68ba      	ldr	r2, [r7, #8]
 800277e:	609a      	str	r2, [r3, #8]
      break;
 8002780:	e052      	b.n	8002828 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6818      	ldr	r0, [r3, #0]
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	6899      	ldr	r1, [r3, #8]
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685a      	ldr	r2, [r3, #4]
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	f000 fb51 	bl	8002e38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2180      	movs	r1, #128	; 0x80
 80027a2:	01c9      	lsls	r1, r1, #7
 80027a4:	430a      	orrs	r2, r1
 80027a6:	609a      	str	r2, [r3, #8]
      break;
 80027a8:	e03e      	b.n	8002828 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6818      	ldr	r0, [r3, #0]
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	6859      	ldr	r1, [r3, #4]
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	001a      	movs	r2, r3
 80027b8:	f000 fac4 	bl	8002d44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2150      	movs	r1, #80	; 0x50
 80027c2:	0018      	movs	r0, r3
 80027c4:	f000 fb1e 	bl	8002e04 <TIM_ITRx_SetConfig>
      break;
 80027c8:	e02e      	b.n	8002828 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6818      	ldr	r0, [r3, #0]
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	6859      	ldr	r1, [r3, #4]
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	001a      	movs	r2, r3
 80027d8:	f000 fae2 	bl	8002da0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2160      	movs	r1, #96	; 0x60
 80027e2:	0018      	movs	r0, r3
 80027e4:	f000 fb0e 	bl	8002e04 <TIM_ITRx_SetConfig>
      break;
 80027e8:	e01e      	b.n	8002828 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6818      	ldr	r0, [r3, #0]
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	6859      	ldr	r1, [r3, #4]
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	001a      	movs	r2, r3
 80027f8:	f000 faa4 	bl	8002d44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2140      	movs	r1, #64	; 0x40
 8002802:	0018      	movs	r0, r3
 8002804:	f000 fafe 	bl	8002e04 <TIM_ITRx_SetConfig>
      break;
 8002808:	e00e      	b.n	8002828 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	0019      	movs	r1, r3
 8002814:	0010      	movs	r0, r2
 8002816:	f000 faf5 	bl	8002e04 <TIM_ITRx_SetConfig>
      break;
 800281a:	e005      	b.n	8002828 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800281c:	230f      	movs	r3, #15
 800281e:	18fb      	adds	r3, r7, r3
 8002820:	2201      	movs	r2, #1
 8002822:	701a      	strb	r2, [r3, #0]
      break;
 8002824:	e000      	b.n	8002828 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002826:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	223d      	movs	r2, #61	; 0x3d
 800282c:	2101      	movs	r1, #1
 800282e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	223c      	movs	r2, #60	; 0x3c
 8002834:	2100      	movs	r1, #0
 8002836:	5499      	strb	r1, [r3, r2]

  return status;
 8002838:	230f      	movs	r3, #15
 800283a:	18fb      	adds	r3, r7, r3
 800283c:	781b      	ldrb	r3, [r3, #0]
}
 800283e:	0018      	movs	r0, r3
 8002840:	46bd      	mov	sp, r7
 8002842:	b004      	add	sp, #16
 8002844:	bd80      	pop	{r7, pc}
 8002846:	46c0      	nop			; (mov r8, r8)
 8002848:	ffff00ff 	.word	0xffff00ff

0800284c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a34      	ldr	r2, [pc, #208]	; (8002930 <TIM_Base_SetConfig+0xe4>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d008      	beq.n	8002876 <TIM_Base_SetConfig+0x2a>
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	2380      	movs	r3, #128	; 0x80
 8002868:	05db      	lsls	r3, r3, #23
 800286a:	429a      	cmp	r2, r3
 800286c:	d003      	beq.n	8002876 <TIM_Base_SetConfig+0x2a>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a30      	ldr	r2, [pc, #192]	; (8002934 <TIM_Base_SetConfig+0xe8>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d108      	bne.n	8002888 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2270      	movs	r2, #112	; 0x70
 800287a:	4393      	bics	r3, r2
 800287c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	4313      	orrs	r3, r2
 8002886:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a29      	ldr	r2, [pc, #164]	; (8002930 <TIM_Base_SetConfig+0xe4>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d018      	beq.n	80028c2 <TIM_Base_SetConfig+0x76>
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	2380      	movs	r3, #128	; 0x80
 8002894:	05db      	lsls	r3, r3, #23
 8002896:	429a      	cmp	r2, r3
 8002898:	d013      	beq.n	80028c2 <TIM_Base_SetConfig+0x76>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a25      	ldr	r2, [pc, #148]	; (8002934 <TIM_Base_SetConfig+0xe8>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d00f      	beq.n	80028c2 <TIM_Base_SetConfig+0x76>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a24      	ldr	r2, [pc, #144]	; (8002938 <TIM_Base_SetConfig+0xec>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d00b      	beq.n	80028c2 <TIM_Base_SetConfig+0x76>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a23      	ldr	r2, [pc, #140]	; (800293c <TIM_Base_SetConfig+0xf0>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d007      	beq.n	80028c2 <TIM_Base_SetConfig+0x76>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a22      	ldr	r2, [pc, #136]	; (8002940 <TIM_Base_SetConfig+0xf4>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d003      	beq.n	80028c2 <TIM_Base_SetConfig+0x76>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a21      	ldr	r2, [pc, #132]	; (8002944 <TIM_Base_SetConfig+0xf8>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d108      	bne.n	80028d4 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	4a20      	ldr	r2, [pc, #128]	; (8002948 <TIM_Base_SetConfig+0xfc>)
 80028c6:	4013      	ands	r3, r2
 80028c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2280      	movs	r2, #128	; 0x80
 80028d8:	4393      	bics	r3, r2
 80028da:	001a      	movs	r2, r3
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	695b      	ldr	r3, [r3, #20]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	689a      	ldr	r2, [r3, #8]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a0c      	ldr	r2, [pc, #48]	; (8002930 <TIM_Base_SetConfig+0xe4>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d00b      	beq.n	800291a <TIM_Base_SetConfig+0xce>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a0d      	ldr	r2, [pc, #52]	; (800293c <TIM_Base_SetConfig+0xf0>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d007      	beq.n	800291a <TIM_Base_SetConfig+0xce>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a0c      	ldr	r2, [pc, #48]	; (8002940 <TIM_Base_SetConfig+0xf4>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d003      	beq.n	800291a <TIM_Base_SetConfig+0xce>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a0b      	ldr	r2, [pc, #44]	; (8002944 <TIM_Base_SetConfig+0xf8>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d103      	bne.n	8002922 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	691a      	ldr	r2, [r3, #16]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2201      	movs	r2, #1
 8002926:	615a      	str	r2, [r3, #20]
}
 8002928:	46c0      	nop			; (mov r8, r8)
 800292a:	46bd      	mov	sp, r7
 800292c:	b004      	add	sp, #16
 800292e:	bd80      	pop	{r7, pc}
 8002930:	40012c00 	.word	0x40012c00
 8002934:	40000400 	.word	0x40000400
 8002938:	40002000 	.word	0x40002000
 800293c:	40014000 	.word	0x40014000
 8002940:	40014400 	.word	0x40014400
 8002944:	40014800 	.word	0x40014800
 8002948:	fffffcff 	.word	0xfffffcff

0800294c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a1b      	ldr	r3, [r3, #32]
 800295a:	2201      	movs	r2, #1
 800295c:	4393      	bics	r3, r2
 800295e:	001a      	movs	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a1b      	ldr	r3, [r3, #32]
 8002968:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	699b      	ldr	r3, [r3, #24]
 8002974:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2270      	movs	r2, #112	; 0x70
 800297a:	4393      	bics	r3, r2
 800297c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2203      	movs	r2, #3
 8002982:	4393      	bics	r3, r2
 8002984:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	4313      	orrs	r3, r2
 800298e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	2202      	movs	r2, #2
 8002994:	4393      	bics	r3, r2
 8002996:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	697a      	ldr	r2, [r7, #20]
 800299e:	4313      	orrs	r3, r2
 80029a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a27      	ldr	r2, [pc, #156]	; (8002a44 <TIM_OC1_SetConfig+0xf8>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d00b      	beq.n	80029c2 <TIM_OC1_SetConfig+0x76>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a26      	ldr	r2, [pc, #152]	; (8002a48 <TIM_OC1_SetConfig+0xfc>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d007      	beq.n	80029c2 <TIM_OC1_SetConfig+0x76>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a25      	ldr	r2, [pc, #148]	; (8002a4c <TIM_OC1_SetConfig+0x100>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d003      	beq.n	80029c2 <TIM_OC1_SetConfig+0x76>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a24      	ldr	r2, [pc, #144]	; (8002a50 <TIM_OC1_SetConfig+0x104>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d10c      	bne.n	80029dc <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	2208      	movs	r2, #8
 80029c6:	4393      	bics	r3, r2
 80029c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	697a      	ldr	r2, [r7, #20]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	2204      	movs	r2, #4
 80029d8:	4393      	bics	r3, r2
 80029da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a19      	ldr	r2, [pc, #100]	; (8002a44 <TIM_OC1_SetConfig+0xf8>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d00b      	beq.n	80029fc <TIM_OC1_SetConfig+0xb0>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a18      	ldr	r2, [pc, #96]	; (8002a48 <TIM_OC1_SetConfig+0xfc>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d007      	beq.n	80029fc <TIM_OC1_SetConfig+0xb0>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4a17      	ldr	r2, [pc, #92]	; (8002a4c <TIM_OC1_SetConfig+0x100>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d003      	beq.n	80029fc <TIM_OC1_SetConfig+0xb0>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a16      	ldr	r2, [pc, #88]	; (8002a50 <TIM_OC1_SetConfig+0x104>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d111      	bne.n	8002a20 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	4a15      	ldr	r2, [pc, #84]	; (8002a54 <TIM_OC1_SetConfig+0x108>)
 8002a00:	4013      	ands	r3, r2
 8002a02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	4a14      	ldr	r2, [pc, #80]	; (8002a58 <TIM_OC1_SetConfig+0x10c>)
 8002a08:	4013      	ands	r3, r2
 8002a0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	695b      	ldr	r3, [r3, #20]
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	697a      	ldr	r2, [r7, #20]
 8002a38:	621a      	str	r2, [r3, #32]
}
 8002a3a:	46c0      	nop			; (mov r8, r8)
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	b006      	add	sp, #24
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	46c0      	nop			; (mov r8, r8)
 8002a44:	40012c00 	.word	0x40012c00
 8002a48:	40014000 	.word	0x40014000
 8002a4c:	40014400 	.word	0x40014400
 8002a50:	40014800 	.word	0x40014800
 8002a54:	fffffeff 	.word	0xfffffeff
 8002a58:	fffffdff 	.word	0xfffffdff

08002a5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a1b      	ldr	r3, [r3, #32]
 8002a6a:	2210      	movs	r2, #16
 8002a6c:	4393      	bics	r3, r2
 8002a6e:	001a      	movs	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a1b      	ldr	r3, [r3, #32]
 8002a78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	699b      	ldr	r3, [r3, #24]
 8002a84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	4a2e      	ldr	r2, [pc, #184]	; (8002b44 <TIM_OC2_SetConfig+0xe8>)
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	4a2d      	ldr	r2, [pc, #180]	; (8002b48 <TIM_OC2_SetConfig+0xec>)
 8002a92:	4013      	ands	r3, r2
 8002a94:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	021b      	lsls	r3, r3, #8
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	2220      	movs	r2, #32
 8002aa6:	4393      	bics	r3, r2
 8002aa8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	011b      	lsls	r3, r3, #4
 8002ab0:	697a      	ldr	r2, [r7, #20]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a24      	ldr	r2, [pc, #144]	; (8002b4c <TIM_OC2_SetConfig+0xf0>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d10d      	bne.n	8002ada <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	2280      	movs	r2, #128	; 0x80
 8002ac2:	4393      	bics	r3, r2
 8002ac4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	011b      	lsls	r3, r3, #4
 8002acc:	697a      	ldr	r2, [r7, #20]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	2240      	movs	r2, #64	; 0x40
 8002ad6:	4393      	bics	r3, r2
 8002ad8:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a1b      	ldr	r2, [pc, #108]	; (8002b4c <TIM_OC2_SetConfig+0xf0>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d00b      	beq.n	8002afa <TIM_OC2_SetConfig+0x9e>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a1a      	ldr	r2, [pc, #104]	; (8002b50 <TIM_OC2_SetConfig+0xf4>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d007      	beq.n	8002afa <TIM_OC2_SetConfig+0x9e>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a19      	ldr	r2, [pc, #100]	; (8002b54 <TIM_OC2_SetConfig+0xf8>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d003      	beq.n	8002afa <TIM_OC2_SetConfig+0x9e>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a18      	ldr	r2, [pc, #96]	; (8002b58 <TIM_OC2_SetConfig+0xfc>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d113      	bne.n	8002b22 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	4a17      	ldr	r2, [pc, #92]	; (8002b5c <TIM_OC2_SetConfig+0x100>)
 8002afe:	4013      	ands	r3, r2
 8002b00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	4a16      	ldr	r2, [pc, #88]	; (8002b60 <TIM_OC2_SetConfig+0x104>)
 8002b06:	4013      	ands	r3, r2
 8002b08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	693a      	ldr	r2, [r7, #16]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	693a      	ldr	r2, [r7, #16]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685a      	ldr	r2, [r3, #4]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	621a      	str	r2, [r3, #32]
}
 8002b3c:	46c0      	nop			; (mov r8, r8)
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	b006      	add	sp, #24
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	ffff8fff 	.word	0xffff8fff
 8002b48:	fffffcff 	.word	0xfffffcff
 8002b4c:	40012c00 	.word	0x40012c00
 8002b50:	40014000 	.word	0x40014000
 8002b54:	40014400 	.word	0x40014400
 8002b58:	40014800 	.word	0x40014800
 8002b5c:	fffffbff 	.word	0xfffffbff
 8002b60:	fffff7ff 	.word	0xfffff7ff

08002b64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a1b      	ldr	r3, [r3, #32]
 8002b72:	4a35      	ldr	r2, [pc, #212]	; (8002c48 <TIM_OC3_SetConfig+0xe4>)
 8002b74:	401a      	ands	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a1b      	ldr	r3, [r3, #32]
 8002b7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	69db      	ldr	r3, [r3, #28]
 8002b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2270      	movs	r2, #112	; 0x70
 8002b90:	4393      	bics	r3, r2
 8002b92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2203      	movs	r2, #3
 8002b98:	4393      	bics	r3, r2
 8002b9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68fa      	ldr	r2, [r7, #12]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	4a28      	ldr	r2, [pc, #160]	; (8002c4c <TIM_OC3_SetConfig+0xe8>)
 8002baa:	4013      	ands	r3, r2
 8002bac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	021b      	lsls	r3, r3, #8
 8002bb4:	697a      	ldr	r2, [r7, #20]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a24      	ldr	r2, [pc, #144]	; (8002c50 <TIM_OC3_SetConfig+0xec>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d10d      	bne.n	8002bde <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	4a23      	ldr	r2, [pc, #140]	; (8002c54 <TIM_OC3_SetConfig+0xf0>)
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	021b      	lsls	r3, r3, #8
 8002bd0:	697a      	ldr	r2, [r7, #20]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	4a1f      	ldr	r2, [pc, #124]	; (8002c58 <TIM_OC3_SetConfig+0xf4>)
 8002bda:	4013      	ands	r3, r2
 8002bdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a1b      	ldr	r2, [pc, #108]	; (8002c50 <TIM_OC3_SetConfig+0xec>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d00b      	beq.n	8002bfe <TIM_OC3_SetConfig+0x9a>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a1c      	ldr	r2, [pc, #112]	; (8002c5c <TIM_OC3_SetConfig+0xf8>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d007      	beq.n	8002bfe <TIM_OC3_SetConfig+0x9a>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a1b      	ldr	r2, [pc, #108]	; (8002c60 <TIM_OC3_SetConfig+0xfc>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d003      	beq.n	8002bfe <TIM_OC3_SetConfig+0x9a>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a1a      	ldr	r2, [pc, #104]	; (8002c64 <TIM_OC3_SetConfig+0x100>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d113      	bne.n	8002c26 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	4a19      	ldr	r2, [pc, #100]	; (8002c68 <TIM_OC3_SetConfig+0x104>)
 8002c02:	4013      	ands	r3, r2
 8002c04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	4a18      	ldr	r2, [pc, #96]	; (8002c6c <TIM_OC3_SetConfig+0x108>)
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	011b      	lsls	r3, r3, #4
 8002c14:	693a      	ldr	r2, [r7, #16]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	011b      	lsls	r3, r3, #4
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	693a      	ldr	r2, [r7, #16]
 8002c2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	685a      	ldr	r2, [r3, #4]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	697a      	ldr	r2, [r7, #20]
 8002c3e:	621a      	str	r2, [r3, #32]
}
 8002c40:	46c0      	nop			; (mov r8, r8)
 8002c42:	46bd      	mov	sp, r7
 8002c44:	b006      	add	sp, #24
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	fffffeff 	.word	0xfffffeff
 8002c4c:	fffffdff 	.word	0xfffffdff
 8002c50:	40012c00 	.word	0x40012c00
 8002c54:	fffff7ff 	.word	0xfffff7ff
 8002c58:	fffffbff 	.word	0xfffffbff
 8002c5c:	40014000 	.word	0x40014000
 8002c60:	40014400 	.word	0x40014400
 8002c64:	40014800 	.word	0x40014800
 8002c68:	ffffefff 	.word	0xffffefff
 8002c6c:	ffffdfff 	.word	0xffffdfff

08002c70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	4a28      	ldr	r2, [pc, #160]	; (8002d20 <TIM_OC4_SetConfig+0xb0>)
 8002c80:	401a      	ands	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	69db      	ldr	r3, [r3, #28]
 8002c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	4a22      	ldr	r2, [pc, #136]	; (8002d24 <TIM_OC4_SetConfig+0xb4>)
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	4a21      	ldr	r2, [pc, #132]	; (8002d28 <TIM_OC4_SetConfig+0xb8>)
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	021b      	lsls	r3, r3, #8
 8002cae:	68fa      	ldr	r2, [r7, #12]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	4a1d      	ldr	r2, [pc, #116]	; (8002d2c <TIM_OC4_SetConfig+0xbc>)
 8002cb8:	4013      	ands	r3, r2
 8002cba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	031b      	lsls	r3, r3, #12
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a19      	ldr	r2, [pc, #100]	; (8002d30 <TIM_OC4_SetConfig+0xc0>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d00b      	beq.n	8002ce8 <TIM_OC4_SetConfig+0x78>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a18      	ldr	r2, [pc, #96]	; (8002d34 <TIM_OC4_SetConfig+0xc4>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d007      	beq.n	8002ce8 <TIM_OC4_SetConfig+0x78>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a17      	ldr	r2, [pc, #92]	; (8002d38 <TIM_OC4_SetConfig+0xc8>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d003      	beq.n	8002ce8 <TIM_OC4_SetConfig+0x78>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a16      	ldr	r2, [pc, #88]	; (8002d3c <TIM_OC4_SetConfig+0xcc>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d109      	bne.n	8002cfc <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	4a15      	ldr	r2, [pc, #84]	; (8002d40 <TIM_OC4_SetConfig+0xd0>)
 8002cec:	4013      	ands	r3, r2
 8002cee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	695b      	ldr	r3, [r3, #20]
 8002cf4:	019b      	lsls	r3, r3, #6
 8002cf6:	697a      	ldr	r2, [r7, #20]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	697a      	ldr	r2, [r7, #20]
 8002d00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68fa      	ldr	r2, [r7, #12]
 8002d06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685a      	ldr	r2, [r3, #4]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	621a      	str	r2, [r3, #32]
}
 8002d16:	46c0      	nop			; (mov r8, r8)
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	b006      	add	sp, #24
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	46c0      	nop			; (mov r8, r8)
 8002d20:	ffffefff 	.word	0xffffefff
 8002d24:	ffff8fff 	.word	0xffff8fff
 8002d28:	fffffcff 	.word	0xfffffcff
 8002d2c:	ffffdfff 	.word	0xffffdfff
 8002d30:	40012c00 	.word	0x40012c00
 8002d34:	40014000 	.word	0x40014000
 8002d38:	40014400 	.word	0x40014400
 8002d3c:	40014800 	.word	0x40014800
 8002d40:	ffffbfff 	.word	0xffffbfff

08002d44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6a1b      	ldr	r3, [r3, #32]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	4393      	bics	r3, r2
 8002d5e:	001a      	movs	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	22f0      	movs	r2, #240	; 0xf0
 8002d6e:	4393      	bics	r3, r2
 8002d70:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	011b      	lsls	r3, r3, #4
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	220a      	movs	r2, #10
 8002d80:	4393      	bics	r3, r2
 8002d82:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d84:	697a      	ldr	r2, [r7, #20]
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	621a      	str	r2, [r3, #32]
}
 8002d98:	46c0      	nop			; (mov r8, r8)
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	b006      	add	sp, #24
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	2210      	movs	r2, #16
 8002db2:	4393      	bics	r3, r2
 8002db4:	001a      	movs	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6a1b      	ldr	r3, [r3, #32]
 8002dc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	4a0d      	ldr	r2, [pc, #52]	; (8002e00 <TIM_TI2_ConfigInputStage+0x60>)
 8002dca:	4013      	ands	r3, r2
 8002dcc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	031b      	lsls	r3, r3, #12
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	22a0      	movs	r2, #160	; 0xa0
 8002ddc:	4393      	bics	r3, r2
 8002dde:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	011b      	lsls	r3, r3, #4
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	697a      	ldr	r2, [r7, #20]
 8002dee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	621a      	str	r2, [r3, #32]
}
 8002df6:	46c0      	nop			; (mov r8, r8)
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	b006      	add	sp, #24
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	46c0      	nop			; (mov r8, r8)
 8002e00:	ffff0fff 	.word	0xffff0fff

08002e04 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2270      	movs	r2, #112	; 0x70
 8002e18:	4393      	bics	r3, r2
 8002e1a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e1c:	683a      	ldr	r2, [r7, #0]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	2207      	movs	r2, #7
 8002e24:	4313      	orrs	r3, r2
 8002e26:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	609a      	str	r2, [r3, #8]
}
 8002e2e:	46c0      	nop			; (mov r8, r8)
 8002e30:	46bd      	mov	sp, r7
 8002e32:	b004      	add	sp, #16
 8002e34:	bd80      	pop	{r7, pc}
	...

08002e38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
 8002e44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	4a09      	ldr	r2, [pc, #36]	; (8002e74 <TIM_ETR_SetConfig+0x3c>)
 8002e50:	4013      	ands	r3, r2
 8002e52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	021a      	lsls	r2, r3, #8
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	697a      	ldr	r2, [r7, #20]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	697a      	ldr	r2, [r7, #20]
 8002e6a:	609a      	str	r2, [r3, #8]
}
 8002e6c:	46c0      	nop			; (mov r8, r8)
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	b006      	add	sp, #24
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	ffff00ff 	.word	0xffff00ff

08002e78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	221f      	movs	r2, #31
 8002e88:	4013      	ands	r3, r2
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	409a      	lsls	r2, r3
 8002e8e:	0013      	movs	r3, r2
 8002e90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6a1b      	ldr	r3, [r3, #32]
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	43d2      	mvns	r2, r2
 8002e9a:	401a      	ands	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6a1a      	ldr	r2, [r3, #32]
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	211f      	movs	r1, #31
 8002ea8:	400b      	ands	r3, r1
 8002eaa:	6879      	ldr	r1, [r7, #4]
 8002eac:	4099      	lsls	r1, r3
 8002eae:	000b      	movs	r3, r1
 8002eb0:	431a      	orrs	r2, r3
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	621a      	str	r2, [r3, #32]
}
 8002eb6:	46c0      	nop			; (mov r8, r8)
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	b006      	add	sp, #24
 8002ebc:	bd80      	pop	{r7, pc}
	...

08002ec0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	223c      	movs	r2, #60	; 0x3c
 8002ece:	5c9b      	ldrb	r3, [r3, r2]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d101      	bne.n	8002ed8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	e047      	b.n	8002f68 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	223c      	movs	r2, #60	; 0x3c
 8002edc:	2101      	movs	r1, #1
 8002ede:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	223d      	movs	r2, #61	; 0x3d
 8002ee4:	2102      	movs	r1, #2
 8002ee6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2270      	movs	r2, #112	; 0x70
 8002efc:	4393      	bics	r3, r2
 8002efe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a16      	ldr	r2, [pc, #88]	; (8002f70 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d00f      	beq.n	8002f3c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	2380      	movs	r3, #128	; 0x80
 8002f22:	05db      	lsls	r3, r3, #23
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d009      	beq.n	8002f3c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a11      	ldr	r2, [pc, #68]	; (8002f74 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d004      	beq.n	8002f3c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a10      	ldr	r2, [pc, #64]	; (8002f78 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d10c      	bne.n	8002f56 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	2280      	movs	r2, #128	; 0x80
 8002f40:	4393      	bics	r3, r2
 8002f42:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	68ba      	ldr	r2, [r7, #8]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68ba      	ldr	r2, [r7, #8]
 8002f54:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	223d      	movs	r2, #61	; 0x3d
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	223c      	movs	r2, #60	; 0x3c
 8002f62:	2100      	movs	r1, #0
 8002f64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	0018      	movs	r0, r3
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	b004      	add	sp, #16
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40012c00 	.word	0x40012c00
 8002f74:	40000400 	.word	0x40000400
 8002f78:	40014000 	.word	0x40014000

08002f7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e044      	b.n	8003018 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d107      	bne.n	8002fa6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2278      	movs	r2, #120	; 0x78
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	f7fd ff7f 	bl	8000ea4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2224      	movs	r2, #36	; 0x24
 8002faa:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2101      	movs	r1, #1
 8002fb8:	438a      	bics	r2, r1
 8002fba:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	0018      	movs	r0, r3
 8002fc0:	f000 fc24 	bl	800380c <UART_SetConfig>
 8002fc4:	0003      	movs	r3, r0
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d101      	bne.n	8002fce <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e024      	b.n	8003018 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	0018      	movs	r0, r3
 8002fda:	f000 fd57 	bl	8003a8c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	490d      	ldr	r1, [pc, #52]	; (8003020 <HAL_UART_Init+0xa4>)
 8002fea:	400a      	ands	r2, r1
 8002fec:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689a      	ldr	r2, [r3, #8]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	212a      	movs	r1, #42	; 0x2a
 8002ffa:	438a      	bics	r2, r1
 8002ffc:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2101      	movs	r1, #1
 800300a:	430a      	orrs	r2, r1
 800300c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	0018      	movs	r0, r3
 8003012:	f000 fdef 	bl	8003bf4 <UART_CheckIdleState>
 8003016:	0003      	movs	r3, r0
}
 8003018:	0018      	movs	r0, r3
 800301a:	46bd      	mov	sp, r7
 800301c:	b002      	add	sp, #8
 800301e:	bd80      	pop	{r7, pc}
 8003020:	ffffb7ff 	.word	0xffffb7ff

08003024 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b08a      	sub	sp, #40	; 0x28
 8003028:	af02      	add	r7, sp, #8
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	603b      	str	r3, [r7, #0]
 8003030:	1dbb      	adds	r3, r7, #6
 8003032:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003038:	2b20      	cmp	r3, #32
 800303a:	d000      	beq.n	800303e <HAL_UART_Transmit+0x1a>
 800303c:	e08d      	b.n	800315a <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d003      	beq.n	800304c <HAL_UART_Transmit+0x28>
 8003044:	1dbb      	adds	r3, r7, #6
 8003046:	881b      	ldrh	r3, [r3, #0]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d101      	bne.n	8003050 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e085      	b.n	800315c <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	689a      	ldr	r2, [r3, #8]
 8003054:	2380      	movs	r3, #128	; 0x80
 8003056:	015b      	lsls	r3, r3, #5
 8003058:	429a      	cmp	r2, r3
 800305a:	d109      	bne.n	8003070 <HAL_UART_Transmit+0x4c>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d105      	bne.n	8003070 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	2201      	movs	r2, #1
 8003068:	4013      	ands	r3, r2
 800306a:	d001      	beq.n	8003070 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e075      	b.n	800315c <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2284      	movs	r2, #132	; 0x84
 8003074:	2100      	movs	r1, #0
 8003076:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2221      	movs	r2, #33	; 0x21
 800307c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800307e:	f7fe f815 	bl	80010ac <HAL_GetTick>
 8003082:	0003      	movs	r3, r0
 8003084:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	1dba      	adds	r2, r7, #6
 800308a:	2150      	movs	r1, #80	; 0x50
 800308c:	8812      	ldrh	r2, [r2, #0]
 800308e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	1dba      	adds	r2, r7, #6
 8003094:	2152      	movs	r1, #82	; 0x52
 8003096:	8812      	ldrh	r2, [r2, #0]
 8003098:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	689a      	ldr	r2, [r3, #8]
 800309e:	2380      	movs	r3, #128	; 0x80
 80030a0:	015b      	lsls	r3, r3, #5
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d108      	bne.n	80030b8 <HAL_UART_Transmit+0x94>
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d104      	bne.n	80030b8 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80030ae:	2300      	movs	r3, #0
 80030b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	61bb      	str	r3, [r7, #24]
 80030b6:	e003      	b.n	80030c0 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030bc:	2300      	movs	r3, #0
 80030be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80030c0:	e030      	b.n	8003124 <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	9300      	str	r3, [sp, #0]
 80030ca:	0013      	movs	r3, r2
 80030cc:	2200      	movs	r2, #0
 80030ce:	2180      	movs	r1, #128	; 0x80
 80030d0:	f000 fe38 	bl	8003d44 <UART_WaitOnFlagUntilTimeout>
 80030d4:	1e03      	subs	r3, r0, #0
 80030d6:	d004      	beq.n	80030e2 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2220      	movs	r2, #32
 80030dc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e03c      	b.n	800315c <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d10b      	bne.n	8003100 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	881a      	ldrh	r2, [r3, #0]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	05d2      	lsls	r2, r2, #23
 80030f2:	0dd2      	lsrs	r2, r2, #23
 80030f4:	b292      	uxth	r2, r2
 80030f6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	3302      	adds	r3, #2
 80030fc:	61bb      	str	r3, [r7, #24]
 80030fe:	e008      	b.n	8003112 <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	781a      	ldrb	r2, [r3, #0]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	b292      	uxth	r2, r2
 800310a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	3301      	adds	r3, #1
 8003110:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2252      	movs	r2, #82	; 0x52
 8003116:	5a9b      	ldrh	r3, [r3, r2]
 8003118:	b29b      	uxth	r3, r3
 800311a:	3b01      	subs	r3, #1
 800311c:	b299      	uxth	r1, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2252      	movs	r2, #82	; 0x52
 8003122:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2252      	movs	r2, #82	; 0x52
 8003128:	5a9b      	ldrh	r3, [r3, r2]
 800312a:	b29b      	uxth	r3, r3
 800312c:	2b00      	cmp	r3, #0
 800312e:	d1c8      	bne.n	80030c2 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003130:	697a      	ldr	r2, [r7, #20]
 8003132:	68f8      	ldr	r0, [r7, #12]
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	9300      	str	r3, [sp, #0]
 8003138:	0013      	movs	r3, r2
 800313a:	2200      	movs	r2, #0
 800313c:	2140      	movs	r1, #64	; 0x40
 800313e:	f000 fe01 	bl	8003d44 <UART_WaitOnFlagUntilTimeout>
 8003142:	1e03      	subs	r3, r0, #0
 8003144:	d004      	beq.n	8003150 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2220      	movs	r2, #32
 800314a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e005      	b.n	800315c <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2220      	movs	r2, #32
 8003154:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003156:	2300      	movs	r3, #0
 8003158:	e000      	b.n	800315c <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 800315a:	2302      	movs	r3, #2
  }
}
 800315c:	0018      	movs	r0, r3
 800315e:	46bd      	mov	sp, r7
 8003160:	b008      	add	sp, #32
 8003162:	bd80      	pop	{r7, pc}

08003164 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b088      	sub	sp, #32
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	1dbb      	adds	r3, r7, #6
 8003170:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2280      	movs	r2, #128	; 0x80
 8003176:	589b      	ldr	r3, [r3, r2]
 8003178:	2b20      	cmp	r3, #32
 800317a:	d145      	bne.n	8003208 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <HAL_UART_Receive_IT+0x26>
 8003182:	1dbb      	adds	r3, r7, #6
 8003184:	881b      	ldrh	r3, [r3, #0]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e03d      	b.n	800320a <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	689a      	ldr	r2, [r3, #8]
 8003192:	2380      	movs	r3, #128	; 0x80
 8003194:	015b      	lsls	r3, r3, #5
 8003196:	429a      	cmp	r2, r3
 8003198:	d109      	bne.n	80031ae <HAL_UART_Receive_IT+0x4a>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d105      	bne.n	80031ae <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	2201      	movs	r2, #1
 80031a6:	4013      	ands	r3, r2
 80031a8:	d001      	beq.n	80031ae <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e02d      	b.n	800320a <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	685a      	ldr	r2, [r3, #4]
 80031ba:	2380      	movs	r3, #128	; 0x80
 80031bc:	041b      	lsls	r3, r3, #16
 80031be:	4013      	ands	r3, r2
 80031c0:	d019      	beq.n	80031f6 <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031c2:	f3ef 8310 	mrs	r3, PRIMASK
 80031c6:	613b      	str	r3, [r7, #16]
  return(result);
 80031c8:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80031ca:	61fb      	str	r3, [r7, #28]
 80031cc:	2301      	movs	r3, #1
 80031ce:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	f383 8810 	msr	PRIMASK, r3
}
 80031d6:	46c0      	nop			; (mov r8, r8)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2180      	movs	r1, #128	; 0x80
 80031e4:	04c9      	lsls	r1, r1, #19
 80031e6:	430a      	orrs	r2, r1
 80031e8:	601a      	str	r2, [r3, #0]
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	f383 8810 	msr	PRIMASK, r3
}
 80031f4:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80031f6:	1dbb      	adds	r3, r7, #6
 80031f8:	881a      	ldrh	r2, [r3, #0]
 80031fa:	68b9      	ldr	r1, [r7, #8]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	0018      	movs	r0, r3
 8003200:	f000 fe0a 	bl	8003e18 <UART_Start_Receive_IT>
 8003204:	0003      	movs	r3, r0
 8003206:	e000      	b.n	800320a <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8003208:	2302      	movs	r3, #2
  }
}
 800320a:	0018      	movs	r0, r3
 800320c:	46bd      	mov	sp, r7
 800320e:	b008      	add	sp, #32
 8003210:	bd80      	pop	{r7, pc}
	...

08003214 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003214:	b590      	push	{r4, r7, lr}
 8003216:	b0ab      	sub	sp, #172	; 0xac
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	69db      	ldr	r3, [r3, #28]
 8003222:	22a4      	movs	r2, #164	; 0xa4
 8003224:	18b9      	adds	r1, r7, r2
 8003226:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	20a0      	movs	r0, #160	; 0xa0
 8003230:	1839      	adds	r1, r7, r0
 8003232:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	219c      	movs	r1, #156	; 0x9c
 800323c:	1879      	adds	r1, r7, r1
 800323e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003240:	0011      	movs	r1, r2
 8003242:	18bb      	adds	r3, r7, r2
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a99      	ldr	r2, [pc, #612]	; (80034ac <HAL_UART_IRQHandler+0x298>)
 8003248:	4013      	ands	r3, r2
 800324a:	2298      	movs	r2, #152	; 0x98
 800324c:	18bc      	adds	r4, r7, r2
 800324e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003250:	18bb      	adds	r3, r7, r2
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d114      	bne.n	8003282 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003258:	187b      	adds	r3, r7, r1
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2220      	movs	r2, #32
 800325e:	4013      	ands	r3, r2
 8003260:	d00f      	beq.n	8003282 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003262:	183b      	adds	r3, r7, r0
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2220      	movs	r2, #32
 8003268:	4013      	ands	r3, r2
 800326a:	d00a      	beq.n	8003282 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003270:	2b00      	cmp	r3, #0
 8003272:	d100      	bne.n	8003276 <HAL_UART_IRQHandler+0x62>
 8003274:	e29e      	b.n	80037b4 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	0010      	movs	r0, r2
 800327e:	4798      	blx	r3
      }
      return;
 8003280:	e298      	b.n	80037b4 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003282:	2398      	movs	r3, #152	; 0x98
 8003284:	18fb      	adds	r3, r7, r3
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d100      	bne.n	800328e <HAL_UART_IRQHandler+0x7a>
 800328c:	e114      	b.n	80034b8 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800328e:	239c      	movs	r3, #156	; 0x9c
 8003290:	18fb      	adds	r3, r7, r3
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2201      	movs	r2, #1
 8003296:	4013      	ands	r3, r2
 8003298:	d106      	bne.n	80032a8 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800329a:	23a0      	movs	r3, #160	; 0xa0
 800329c:	18fb      	adds	r3, r7, r3
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a83      	ldr	r2, [pc, #524]	; (80034b0 <HAL_UART_IRQHandler+0x29c>)
 80032a2:	4013      	ands	r3, r2
 80032a4:	d100      	bne.n	80032a8 <HAL_UART_IRQHandler+0x94>
 80032a6:	e107      	b.n	80034b8 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80032a8:	23a4      	movs	r3, #164	; 0xa4
 80032aa:	18fb      	adds	r3, r7, r3
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2201      	movs	r2, #1
 80032b0:	4013      	ands	r3, r2
 80032b2:	d012      	beq.n	80032da <HAL_UART_IRQHandler+0xc6>
 80032b4:	23a0      	movs	r3, #160	; 0xa0
 80032b6:	18fb      	adds	r3, r7, r3
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	2380      	movs	r3, #128	; 0x80
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	4013      	ands	r3, r2
 80032c0:	d00b      	beq.n	80032da <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2201      	movs	r2, #1
 80032c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2284      	movs	r2, #132	; 0x84
 80032ce:	589b      	ldr	r3, [r3, r2]
 80032d0:	2201      	movs	r2, #1
 80032d2:	431a      	orrs	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2184      	movs	r1, #132	; 0x84
 80032d8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80032da:	23a4      	movs	r3, #164	; 0xa4
 80032dc:	18fb      	adds	r3, r7, r3
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2202      	movs	r2, #2
 80032e2:	4013      	ands	r3, r2
 80032e4:	d011      	beq.n	800330a <HAL_UART_IRQHandler+0xf6>
 80032e6:	239c      	movs	r3, #156	; 0x9c
 80032e8:	18fb      	adds	r3, r7, r3
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2201      	movs	r2, #1
 80032ee:	4013      	ands	r3, r2
 80032f0:	d00b      	beq.n	800330a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2202      	movs	r2, #2
 80032f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2284      	movs	r2, #132	; 0x84
 80032fe:	589b      	ldr	r3, [r3, r2]
 8003300:	2204      	movs	r2, #4
 8003302:	431a      	orrs	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2184      	movs	r1, #132	; 0x84
 8003308:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800330a:	23a4      	movs	r3, #164	; 0xa4
 800330c:	18fb      	adds	r3, r7, r3
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2204      	movs	r2, #4
 8003312:	4013      	ands	r3, r2
 8003314:	d011      	beq.n	800333a <HAL_UART_IRQHandler+0x126>
 8003316:	239c      	movs	r3, #156	; 0x9c
 8003318:	18fb      	adds	r3, r7, r3
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2201      	movs	r2, #1
 800331e:	4013      	ands	r3, r2
 8003320:	d00b      	beq.n	800333a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2204      	movs	r2, #4
 8003328:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2284      	movs	r2, #132	; 0x84
 800332e:	589b      	ldr	r3, [r3, r2]
 8003330:	2202      	movs	r2, #2
 8003332:	431a      	orrs	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2184      	movs	r1, #132	; 0x84
 8003338:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800333a:	23a4      	movs	r3, #164	; 0xa4
 800333c:	18fb      	adds	r3, r7, r3
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2208      	movs	r2, #8
 8003342:	4013      	ands	r3, r2
 8003344:	d017      	beq.n	8003376 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003346:	23a0      	movs	r3, #160	; 0xa0
 8003348:	18fb      	adds	r3, r7, r3
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2220      	movs	r2, #32
 800334e:	4013      	ands	r3, r2
 8003350:	d105      	bne.n	800335e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003352:	239c      	movs	r3, #156	; 0x9c
 8003354:	18fb      	adds	r3, r7, r3
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2201      	movs	r2, #1
 800335a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800335c:	d00b      	beq.n	8003376 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2208      	movs	r2, #8
 8003364:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2284      	movs	r2, #132	; 0x84
 800336a:	589b      	ldr	r3, [r3, r2]
 800336c:	2208      	movs	r2, #8
 800336e:	431a      	orrs	r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2184      	movs	r1, #132	; 0x84
 8003374:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003376:	23a4      	movs	r3, #164	; 0xa4
 8003378:	18fb      	adds	r3, r7, r3
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	2380      	movs	r3, #128	; 0x80
 800337e:	011b      	lsls	r3, r3, #4
 8003380:	4013      	ands	r3, r2
 8003382:	d013      	beq.n	80033ac <HAL_UART_IRQHandler+0x198>
 8003384:	23a0      	movs	r3, #160	; 0xa0
 8003386:	18fb      	adds	r3, r7, r3
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	2380      	movs	r3, #128	; 0x80
 800338c:	04db      	lsls	r3, r3, #19
 800338e:	4013      	ands	r3, r2
 8003390:	d00c      	beq.n	80033ac <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2280      	movs	r2, #128	; 0x80
 8003398:	0112      	lsls	r2, r2, #4
 800339a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2284      	movs	r2, #132	; 0x84
 80033a0:	589b      	ldr	r3, [r3, r2]
 80033a2:	2220      	movs	r2, #32
 80033a4:	431a      	orrs	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2184      	movs	r1, #132	; 0x84
 80033aa:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2284      	movs	r2, #132	; 0x84
 80033b0:	589b      	ldr	r3, [r3, r2]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d100      	bne.n	80033b8 <HAL_UART_IRQHandler+0x1a4>
 80033b6:	e1ff      	b.n	80037b8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80033b8:	23a4      	movs	r3, #164	; 0xa4
 80033ba:	18fb      	adds	r3, r7, r3
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2220      	movs	r2, #32
 80033c0:	4013      	ands	r3, r2
 80033c2:	d00e      	beq.n	80033e2 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80033c4:	23a0      	movs	r3, #160	; 0xa0
 80033c6:	18fb      	adds	r3, r7, r3
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2220      	movs	r2, #32
 80033cc:	4013      	ands	r3, r2
 80033ce:	d008      	beq.n	80033e2 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d004      	beq.n	80033e2 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	0010      	movs	r0, r2
 80033e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2284      	movs	r2, #132	; 0x84
 80033e6:	589b      	ldr	r3, [r3, r2]
 80033e8:	2194      	movs	r1, #148	; 0x94
 80033ea:	187a      	adds	r2, r7, r1
 80033ec:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	2240      	movs	r2, #64	; 0x40
 80033f6:	4013      	ands	r3, r2
 80033f8:	2b40      	cmp	r3, #64	; 0x40
 80033fa:	d004      	beq.n	8003406 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80033fc:	187b      	adds	r3, r7, r1
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2228      	movs	r2, #40	; 0x28
 8003402:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003404:	d047      	beq.n	8003496 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	0018      	movs	r0, r3
 800340a:	f000 fdbb 	bl	8003f84 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	2240      	movs	r2, #64	; 0x40
 8003416:	4013      	ands	r3, r2
 8003418:	2b40      	cmp	r3, #64	; 0x40
 800341a:	d137      	bne.n	800348c <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800341c:	f3ef 8310 	mrs	r3, PRIMASK
 8003420:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003422:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003424:	2090      	movs	r0, #144	; 0x90
 8003426:	183a      	adds	r2, r7, r0
 8003428:	6013      	str	r3, [r2, #0]
 800342a:	2301      	movs	r3, #1
 800342c:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800342e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003430:	f383 8810 	msr	PRIMASK, r3
}
 8003434:	46c0      	nop			; (mov r8, r8)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	689a      	ldr	r2, [r3, #8]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2140      	movs	r1, #64	; 0x40
 8003442:	438a      	bics	r2, r1
 8003444:	609a      	str	r2, [r3, #8]
 8003446:	183b      	adds	r3, r7, r0
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800344c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800344e:	f383 8810 	msr	PRIMASK, r3
}
 8003452:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003458:	2b00      	cmp	r3, #0
 800345a:	d012      	beq.n	8003482 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003460:	4a14      	ldr	r2, [pc, #80]	; (80034b4 <HAL_UART_IRQHandler+0x2a0>)
 8003462:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003468:	0018      	movs	r0, r3
 800346a:	f7fd ff63 	bl	8001334 <HAL_DMA_Abort_IT>
 800346e:	1e03      	subs	r3, r0, #0
 8003470:	d01a      	beq.n	80034a8 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003476:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800347c:	0018      	movs	r0, r3
 800347e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003480:	e012      	b.n	80034a8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	0018      	movs	r0, r3
 8003486:	f000 f9ad 	bl	80037e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800348a:	e00d      	b.n	80034a8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	0018      	movs	r0, r3
 8003490:	f000 f9a8 	bl	80037e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003494:	e008      	b.n	80034a8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	0018      	movs	r0, r3
 800349a:	f000 f9a3 	bl	80037e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2284      	movs	r2, #132	; 0x84
 80034a2:	2100      	movs	r1, #0
 80034a4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80034a6:	e187      	b.n	80037b8 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034a8:	46c0      	nop			; (mov r8, r8)
    return;
 80034aa:	e185      	b.n	80037b8 <HAL_UART_IRQHandler+0x5a4>
 80034ac:	0000080f 	.word	0x0000080f
 80034b0:	04000120 	.word	0x04000120
 80034b4:	0800404d 	.word	0x0800404d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d000      	beq.n	80034c2 <HAL_UART_IRQHandler+0x2ae>
 80034c0:	e139      	b.n	8003736 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80034c2:	23a4      	movs	r3, #164	; 0xa4
 80034c4:	18fb      	adds	r3, r7, r3
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2210      	movs	r2, #16
 80034ca:	4013      	ands	r3, r2
 80034cc:	d100      	bne.n	80034d0 <HAL_UART_IRQHandler+0x2bc>
 80034ce:	e132      	b.n	8003736 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80034d0:	23a0      	movs	r3, #160	; 0xa0
 80034d2:	18fb      	adds	r3, r7, r3
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2210      	movs	r2, #16
 80034d8:	4013      	ands	r3, r2
 80034da:	d100      	bne.n	80034de <HAL_UART_IRQHandler+0x2ca>
 80034dc:	e12b      	b.n	8003736 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2210      	movs	r2, #16
 80034e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	2240      	movs	r2, #64	; 0x40
 80034ee:	4013      	ands	r3, r2
 80034f0:	2b40      	cmp	r3, #64	; 0x40
 80034f2:	d000      	beq.n	80034f6 <HAL_UART_IRQHandler+0x2e2>
 80034f4:	e09f      	b.n	8003636 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	685a      	ldr	r2, [r3, #4]
 80034fe:	217e      	movs	r1, #126	; 0x7e
 8003500:	187b      	adds	r3, r7, r1
 8003502:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003504:	187b      	adds	r3, r7, r1
 8003506:	881b      	ldrh	r3, [r3, #0]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d100      	bne.n	800350e <HAL_UART_IRQHandler+0x2fa>
 800350c:	e156      	b.n	80037bc <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2258      	movs	r2, #88	; 0x58
 8003512:	5a9b      	ldrh	r3, [r3, r2]
 8003514:	187a      	adds	r2, r7, r1
 8003516:	8812      	ldrh	r2, [r2, #0]
 8003518:	429a      	cmp	r2, r3
 800351a:	d300      	bcc.n	800351e <HAL_UART_IRQHandler+0x30a>
 800351c:	e14e      	b.n	80037bc <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	187a      	adds	r2, r7, r1
 8003522:	215a      	movs	r1, #90	; 0x5a
 8003524:	8812      	ldrh	r2, [r2, #0]
 8003526:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800352c:	699b      	ldr	r3, [r3, #24]
 800352e:	2b20      	cmp	r3, #32
 8003530:	d06f      	beq.n	8003612 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003532:	f3ef 8310 	mrs	r3, PRIMASK
 8003536:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800353a:	67bb      	str	r3, [r7, #120]	; 0x78
 800353c:	2301      	movs	r3, #1
 800353e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003542:	f383 8810 	msr	PRIMASK, r3
}
 8003546:	46c0      	nop			; (mov r8, r8)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	499e      	ldr	r1, [pc, #632]	; (80037cc <HAL_UART_IRQHandler+0x5b8>)
 8003554:	400a      	ands	r2, r1
 8003556:	601a      	str	r2, [r3, #0]
 8003558:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800355a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800355c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800355e:	f383 8810 	msr	PRIMASK, r3
}
 8003562:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003564:	f3ef 8310 	mrs	r3, PRIMASK
 8003568:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800356a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800356c:	677b      	str	r3, [r7, #116]	; 0x74
 800356e:	2301      	movs	r3, #1
 8003570:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003572:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003574:	f383 8810 	msr	PRIMASK, r3
}
 8003578:	46c0      	nop			; (mov r8, r8)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689a      	ldr	r2, [r3, #8]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2101      	movs	r1, #1
 8003586:	438a      	bics	r2, r1
 8003588:	609a      	str	r2, [r3, #8]
 800358a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800358c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800358e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003590:	f383 8810 	msr	PRIMASK, r3
}
 8003594:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003596:	f3ef 8310 	mrs	r3, PRIMASK
 800359a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800359c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800359e:	673b      	str	r3, [r7, #112]	; 0x70
 80035a0:	2301      	movs	r3, #1
 80035a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035a6:	f383 8810 	msr	PRIMASK, r3
}
 80035aa:	46c0      	nop			; (mov r8, r8)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	689a      	ldr	r2, [r3, #8]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2140      	movs	r1, #64	; 0x40
 80035b8:	438a      	bics	r2, r1
 80035ba:	609a      	str	r2, [r3, #8]
 80035bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035be:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035c2:	f383 8810 	msr	PRIMASK, r3
}
 80035c6:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2280      	movs	r2, #128	; 0x80
 80035cc:	2120      	movs	r1, #32
 80035ce:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035d6:	f3ef 8310 	mrs	r3, PRIMASK
 80035da:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80035dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035e0:	2301      	movs	r3, #1
 80035e2:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035e6:	f383 8810 	msr	PRIMASK, r3
}
 80035ea:	46c0      	nop			; (mov r8, r8)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2110      	movs	r1, #16
 80035f8:	438a      	bics	r2, r1
 80035fa:	601a      	str	r2, [r3, #0]
 80035fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035fe:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003600:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003602:	f383 8810 	msr	PRIMASK, r3
}
 8003606:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800360c:	0018      	movs	r0, r3
 800360e:	f7fd fe59 	bl	80012c4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2202      	movs	r2, #2
 8003616:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2258      	movs	r2, #88	; 0x58
 800361c:	5a9a      	ldrh	r2, [r3, r2]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	215a      	movs	r1, #90	; 0x5a
 8003622:	5a5b      	ldrh	r3, [r3, r1]
 8003624:	b29b      	uxth	r3, r3
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	b29a      	uxth	r2, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	0011      	movs	r1, r2
 800362e:	0018      	movs	r0, r3
 8003630:	f000 f8e0 	bl	80037f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003634:	e0c2      	b.n	80037bc <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2258      	movs	r2, #88	; 0x58
 800363a:	5a99      	ldrh	r1, [r3, r2]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	225a      	movs	r2, #90	; 0x5a
 8003640:	5a9b      	ldrh	r3, [r3, r2]
 8003642:	b29a      	uxth	r2, r3
 8003644:	208e      	movs	r0, #142	; 0x8e
 8003646:	183b      	adds	r3, r7, r0
 8003648:	1a8a      	subs	r2, r1, r2
 800364a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	225a      	movs	r2, #90	; 0x5a
 8003650:	5a9b      	ldrh	r3, [r3, r2]
 8003652:	b29b      	uxth	r3, r3
 8003654:	2b00      	cmp	r3, #0
 8003656:	d100      	bne.n	800365a <HAL_UART_IRQHandler+0x446>
 8003658:	e0b2      	b.n	80037c0 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 800365a:	183b      	adds	r3, r7, r0
 800365c:	881b      	ldrh	r3, [r3, #0]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d100      	bne.n	8003664 <HAL_UART_IRQHandler+0x450>
 8003662:	e0ad      	b.n	80037c0 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003664:	f3ef 8310 	mrs	r3, PRIMASK
 8003668:	60fb      	str	r3, [r7, #12]
  return(result);
 800366a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800366c:	2488      	movs	r4, #136	; 0x88
 800366e:	193a      	adds	r2, r7, r4
 8003670:	6013      	str	r3, [r2, #0]
 8003672:	2301      	movs	r3, #1
 8003674:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	f383 8810 	msr	PRIMASK, r3
}
 800367c:	46c0      	nop			; (mov r8, r8)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4951      	ldr	r1, [pc, #324]	; (80037d0 <HAL_UART_IRQHandler+0x5bc>)
 800368a:	400a      	ands	r2, r1
 800368c:	601a      	str	r2, [r3, #0]
 800368e:	193b      	adds	r3, r7, r4
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	f383 8810 	msr	PRIMASK, r3
}
 800369a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800369c:	f3ef 8310 	mrs	r3, PRIMASK
 80036a0:	61bb      	str	r3, [r7, #24]
  return(result);
 80036a2:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036a4:	2484      	movs	r4, #132	; 0x84
 80036a6:	193a      	adds	r2, r7, r4
 80036a8:	6013      	str	r3, [r2, #0]
 80036aa:	2301      	movs	r3, #1
 80036ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	f383 8810 	msr	PRIMASK, r3
}
 80036b4:	46c0      	nop			; (mov r8, r8)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	689a      	ldr	r2, [r3, #8]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2101      	movs	r1, #1
 80036c2:	438a      	bics	r2, r1
 80036c4:	609a      	str	r2, [r3, #8]
 80036c6:	193b      	adds	r3, r7, r4
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036cc:	6a3b      	ldr	r3, [r7, #32]
 80036ce:	f383 8810 	msr	PRIMASK, r3
}
 80036d2:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2280      	movs	r2, #128	; 0x80
 80036d8:	2120      	movs	r1, #32
 80036da:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036e8:	f3ef 8310 	mrs	r3, PRIMASK
 80036ec:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80036ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036f0:	2480      	movs	r4, #128	; 0x80
 80036f2:	193a      	adds	r2, r7, r4
 80036f4:	6013      	str	r3, [r2, #0]
 80036f6:	2301      	movs	r3, #1
 80036f8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036fc:	f383 8810 	msr	PRIMASK, r3
}
 8003700:	46c0      	nop			; (mov r8, r8)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2110      	movs	r1, #16
 800370e:	438a      	bics	r2, r1
 8003710:	601a      	str	r2, [r3, #0]
 8003712:	193b      	adds	r3, r7, r4
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800371a:	f383 8810 	msr	PRIMASK, r3
}
 800371e:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2202      	movs	r2, #2
 8003724:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003726:	183b      	adds	r3, r7, r0
 8003728:	881a      	ldrh	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	0011      	movs	r1, r2
 800372e:	0018      	movs	r0, r3
 8003730:	f000 f860 	bl	80037f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003734:	e044      	b.n	80037c0 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003736:	23a4      	movs	r3, #164	; 0xa4
 8003738:	18fb      	adds	r3, r7, r3
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	2380      	movs	r3, #128	; 0x80
 800373e:	035b      	lsls	r3, r3, #13
 8003740:	4013      	ands	r3, r2
 8003742:	d010      	beq.n	8003766 <HAL_UART_IRQHandler+0x552>
 8003744:	239c      	movs	r3, #156	; 0x9c
 8003746:	18fb      	adds	r3, r7, r3
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	2380      	movs	r3, #128	; 0x80
 800374c:	03db      	lsls	r3, r3, #15
 800374e:	4013      	ands	r3, r2
 8003750:	d009      	beq.n	8003766 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2280      	movs	r2, #128	; 0x80
 8003758:	0352      	lsls	r2, r2, #13
 800375a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	0018      	movs	r0, r3
 8003760:	f000 fe6e 	bl	8004440 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003764:	e02f      	b.n	80037c6 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003766:	23a4      	movs	r3, #164	; 0xa4
 8003768:	18fb      	adds	r3, r7, r3
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2280      	movs	r2, #128	; 0x80
 800376e:	4013      	ands	r3, r2
 8003770:	d00f      	beq.n	8003792 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003772:	23a0      	movs	r3, #160	; 0xa0
 8003774:	18fb      	adds	r3, r7, r3
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2280      	movs	r2, #128	; 0x80
 800377a:	4013      	ands	r3, r2
 800377c:	d009      	beq.n	8003792 <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003782:	2b00      	cmp	r3, #0
 8003784:	d01e      	beq.n	80037c4 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	0010      	movs	r0, r2
 800378e:	4798      	blx	r3
    }
    return;
 8003790:	e018      	b.n	80037c4 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003792:	23a4      	movs	r3, #164	; 0xa4
 8003794:	18fb      	adds	r3, r7, r3
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2240      	movs	r2, #64	; 0x40
 800379a:	4013      	ands	r3, r2
 800379c:	d013      	beq.n	80037c6 <HAL_UART_IRQHandler+0x5b2>
 800379e:	23a0      	movs	r3, #160	; 0xa0
 80037a0:	18fb      	adds	r3, r7, r3
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2240      	movs	r2, #64	; 0x40
 80037a6:	4013      	ands	r3, r2
 80037a8:	d00d      	beq.n	80037c6 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	0018      	movs	r0, r3
 80037ae:	f000 fc64 	bl	800407a <UART_EndTransmit_IT>
    return;
 80037b2:	e008      	b.n	80037c6 <HAL_UART_IRQHandler+0x5b2>
      return;
 80037b4:	46c0      	nop			; (mov r8, r8)
 80037b6:	e006      	b.n	80037c6 <HAL_UART_IRQHandler+0x5b2>
    return;
 80037b8:	46c0      	nop			; (mov r8, r8)
 80037ba:	e004      	b.n	80037c6 <HAL_UART_IRQHandler+0x5b2>
      return;
 80037bc:	46c0      	nop			; (mov r8, r8)
 80037be:	e002      	b.n	80037c6 <HAL_UART_IRQHandler+0x5b2>
      return;
 80037c0:	46c0      	nop			; (mov r8, r8)
 80037c2:	e000      	b.n	80037c6 <HAL_UART_IRQHandler+0x5b2>
    return;
 80037c4:	46c0      	nop			; (mov r8, r8)
  }

}
 80037c6:	46bd      	mov	sp, r7
 80037c8:	b02b      	add	sp, #172	; 0xac
 80037ca:	bd90      	pop	{r4, r7, pc}
 80037cc:	fffffeff 	.word	0xfffffeff
 80037d0:	fffffedf 	.word	0xfffffedf

080037d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80037dc:	46c0      	nop			; (mov r8, r8)
 80037de:	46bd      	mov	sp, r7
 80037e0:	b002      	add	sp, #8
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80037ec:	46c0      	nop			; (mov r8, r8)
 80037ee:	46bd      	mov	sp, r7
 80037f0:	b002      	add	sp, #8
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	000a      	movs	r2, r1
 80037fe:	1cbb      	adds	r3, r7, #2
 8003800:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003802:	46c0      	nop			; (mov r8, r8)
 8003804:	46bd      	mov	sp, r7
 8003806:	b002      	add	sp, #8
 8003808:	bd80      	pop	{r7, pc}
	...

0800380c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b088      	sub	sp, #32
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003814:	231e      	movs	r3, #30
 8003816:	18fb      	adds	r3, r7, r3
 8003818:	2200      	movs	r2, #0
 800381a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689a      	ldr	r2, [r3, #8]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	431a      	orrs	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	431a      	orrs	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	69db      	ldr	r3, [r3, #28]
 8003830:	4313      	orrs	r3, r2
 8003832:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a8d      	ldr	r2, [pc, #564]	; (8003a70 <UART_SetConfig+0x264>)
 800383c:	4013      	ands	r3, r2
 800383e:	0019      	movs	r1, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	697a      	ldr	r2, [r7, #20]
 8003846:	430a      	orrs	r2, r1
 8003848:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	4a88      	ldr	r2, [pc, #544]	; (8003a74 <UART_SetConfig+0x268>)
 8003852:	4013      	ands	r3, r2
 8003854:	0019      	movs	r1, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	68da      	ldr	r2, [r3, #12]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	430a      	orrs	r2, r1
 8003860:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a1b      	ldr	r3, [r3, #32]
 800386c:	697a      	ldr	r2, [r7, #20]
 800386e:	4313      	orrs	r3, r2
 8003870:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	4a7f      	ldr	r2, [pc, #508]	; (8003a78 <UART_SetConfig+0x26c>)
 800387a:	4013      	ands	r3, r2
 800387c:	0019      	movs	r1, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	697a      	ldr	r2, [r7, #20]
 8003884:	430a      	orrs	r2, r1
 8003886:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a7b      	ldr	r2, [pc, #492]	; (8003a7c <UART_SetConfig+0x270>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d127      	bne.n	80038e2 <UART_SetConfig+0xd6>
 8003892:	4b7b      	ldr	r3, [pc, #492]	; (8003a80 <UART_SetConfig+0x274>)
 8003894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003896:	2203      	movs	r2, #3
 8003898:	4013      	ands	r3, r2
 800389a:	2b03      	cmp	r3, #3
 800389c:	d00d      	beq.n	80038ba <UART_SetConfig+0xae>
 800389e:	d81b      	bhi.n	80038d8 <UART_SetConfig+0xcc>
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d014      	beq.n	80038ce <UART_SetConfig+0xc2>
 80038a4:	d818      	bhi.n	80038d8 <UART_SetConfig+0xcc>
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d002      	beq.n	80038b0 <UART_SetConfig+0xa4>
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d00a      	beq.n	80038c4 <UART_SetConfig+0xb8>
 80038ae:	e013      	b.n	80038d8 <UART_SetConfig+0xcc>
 80038b0:	231f      	movs	r3, #31
 80038b2:	18fb      	adds	r3, r7, r3
 80038b4:	2200      	movs	r2, #0
 80038b6:	701a      	strb	r2, [r3, #0]
 80038b8:	e021      	b.n	80038fe <UART_SetConfig+0xf2>
 80038ba:	231f      	movs	r3, #31
 80038bc:	18fb      	adds	r3, r7, r3
 80038be:	2202      	movs	r2, #2
 80038c0:	701a      	strb	r2, [r3, #0]
 80038c2:	e01c      	b.n	80038fe <UART_SetConfig+0xf2>
 80038c4:	231f      	movs	r3, #31
 80038c6:	18fb      	adds	r3, r7, r3
 80038c8:	2204      	movs	r2, #4
 80038ca:	701a      	strb	r2, [r3, #0]
 80038cc:	e017      	b.n	80038fe <UART_SetConfig+0xf2>
 80038ce:	231f      	movs	r3, #31
 80038d0:	18fb      	adds	r3, r7, r3
 80038d2:	2208      	movs	r2, #8
 80038d4:	701a      	strb	r2, [r3, #0]
 80038d6:	e012      	b.n	80038fe <UART_SetConfig+0xf2>
 80038d8:	231f      	movs	r3, #31
 80038da:	18fb      	adds	r3, r7, r3
 80038dc:	2210      	movs	r2, #16
 80038de:	701a      	strb	r2, [r3, #0]
 80038e0:	e00d      	b.n	80038fe <UART_SetConfig+0xf2>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a67      	ldr	r2, [pc, #412]	; (8003a84 <UART_SetConfig+0x278>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d104      	bne.n	80038f6 <UART_SetConfig+0xea>
 80038ec:	231f      	movs	r3, #31
 80038ee:	18fb      	adds	r3, r7, r3
 80038f0:	2200      	movs	r2, #0
 80038f2:	701a      	strb	r2, [r3, #0]
 80038f4:	e003      	b.n	80038fe <UART_SetConfig+0xf2>
 80038f6:	231f      	movs	r3, #31
 80038f8:	18fb      	adds	r3, r7, r3
 80038fa:	2210      	movs	r2, #16
 80038fc:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	69da      	ldr	r2, [r3, #28]
 8003902:	2380      	movs	r3, #128	; 0x80
 8003904:	021b      	lsls	r3, r3, #8
 8003906:	429a      	cmp	r2, r3
 8003908:	d15c      	bne.n	80039c4 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 800390a:	231f      	movs	r3, #31
 800390c:	18fb      	adds	r3, r7, r3
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	2b08      	cmp	r3, #8
 8003912:	d015      	beq.n	8003940 <UART_SetConfig+0x134>
 8003914:	dc18      	bgt.n	8003948 <UART_SetConfig+0x13c>
 8003916:	2b04      	cmp	r3, #4
 8003918:	d00d      	beq.n	8003936 <UART_SetConfig+0x12a>
 800391a:	dc15      	bgt.n	8003948 <UART_SetConfig+0x13c>
 800391c:	2b00      	cmp	r3, #0
 800391e:	d002      	beq.n	8003926 <UART_SetConfig+0x11a>
 8003920:	2b02      	cmp	r3, #2
 8003922:	d005      	beq.n	8003930 <UART_SetConfig+0x124>
 8003924:	e010      	b.n	8003948 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003926:	f7fe fb59 	bl	8001fdc <HAL_RCC_GetPCLK1Freq>
 800392a:	0003      	movs	r3, r0
 800392c:	61bb      	str	r3, [r7, #24]
        break;
 800392e:	e012      	b.n	8003956 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003930:	4b55      	ldr	r3, [pc, #340]	; (8003a88 <UART_SetConfig+0x27c>)
 8003932:	61bb      	str	r3, [r7, #24]
        break;
 8003934:	e00f      	b.n	8003956 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003936:	f7fe faf1 	bl	8001f1c <HAL_RCC_GetSysClockFreq>
 800393a:	0003      	movs	r3, r0
 800393c:	61bb      	str	r3, [r7, #24]
        break;
 800393e:	e00a      	b.n	8003956 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003940:	2380      	movs	r3, #128	; 0x80
 8003942:	021b      	lsls	r3, r3, #8
 8003944:	61bb      	str	r3, [r7, #24]
        break;
 8003946:	e006      	b.n	8003956 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003948:	2300      	movs	r3, #0
 800394a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800394c:	231e      	movs	r3, #30
 800394e:	18fb      	adds	r3, r7, r3
 8003950:	2201      	movs	r2, #1
 8003952:	701a      	strb	r2, [r3, #0]
        break;
 8003954:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d100      	bne.n	800395e <UART_SetConfig+0x152>
 800395c:	e07a      	b.n	8003a54 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	005a      	lsls	r2, r3, #1
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	085b      	lsrs	r3, r3, #1
 8003968:	18d2      	adds	r2, r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	0019      	movs	r1, r3
 8003970:	0010      	movs	r0, r2
 8003972:	f7fc fbc9 	bl	8000108 <__udivsi3>
 8003976:	0003      	movs	r3, r0
 8003978:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	2b0f      	cmp	r3, #15
 800397e:	d91c      	bls.n	80039ba <UART_SetConfig+0x1ae>
 8003980:	693a      	ldr	r2, [r7, #16]
 8003982:	2380      	movs	r3, #128	; 0x80
 8003984:	025b      	lsls	r3, r3, #9
 8003986:	429a      	cmp	r2, r3
 8003988:	d217      	bcs.n	80039ba <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	b29a      	uxth	r2, r3
 800398e:	200e      	movs	r0, #14
 8003990:	183b      	adds	r3, r7, r0
 8003992:	210f      	movs	r1, #15
 8003994:	438a      	bics	r2, r1
 8003996:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	085b      	lsrs	r3, r3, #1
 800399c:	b29b      	uxth	r3, r3
 800399e:	2207      	movs	r2, #7
 80039a0:	4013      	ands	r3, r2
 80039a2:	b299      	uxth	r1, r3
 80039a4:	183b      	adds	r3, r7, r0
 80039a6:	183a      	adds	r2, r7, r0
 80039a8:	8812      	ldrh	r2, [r2, #0]
 80039aa:	430a      	orrs	r2, r1
 80039ac:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	183a      	adds	r2, r7, r0
 80039b4:	8812      	ldrh	r2, [r2, #0]
 80039b6:	60da      	str	r2, [r3, #12]
 80039b8:	e04c      	b.n	8003a54 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80039ba:	231e      	movs	r3, #30
 80039bc:	18fb      	adds	r3, r7, r3
 80039be:	2201      	movs	r2, #1
 80039c0:	701a      	strb	r2, [r3, #0]
 80039c2:	e047      	b.n	8003a54 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039c4:	231f      	movs	r3, #31
 80039c6:	18fb      	adds	r3, r7, r3
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	2b08      	cmp	r3, #8
 80039cc:	d015      	beq.n	80039fa <UART_SetConfig+0x1ee>
 80039ce:	dc18      	bgt.n	8003a02 <UART_SetConfig+0x1f6>
 80039d0:	2b04      	cmp	r3, #4
 80039d2:	d00d      	beq.n	80039f0 <UART_SetConfig+0x1e4>
 80039d4:	dc15      	bgt.n	8003a02 <UART_SetConfig+0x1f6>
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d002      	beq.n	80039e0 <UART_SetConfig+0x1d4>
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d005      	beq.n	80039ea <UART_SetConfig+0x1de>
 80039de:	e010      	b.n	8003a02 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039e0:	f7fe fafc 	bl	8001fdc <HAL_RCC_GetPCLK1Freq>
 80039e4:	0003      	movs	r3, r0
 80039e6:	61bb      	str	r3, [r7, #24]
        break;
 80039e8:	e012      	b.n	8003a10 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039ea:	4b27      	ldr	r3, [pc, #156]	; (8003a88 <UART_SetConfig+0x27c>)
 80039ec:	61bb      	str	r3, [r7, #24]
        break;
 80039ee:	e00f      	b.n	8003a10 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039f0:	f7fe fa94 	bl	8001f1c <HAL_RCC_GetSysClockFreq>
 80039f4:	0003      	movs	r3, r0
 80039f6:	61bb      	str	r3, [r7, #24]
        break;
 80039f8:	e00a      	b.n	8003a10 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039fa:	2380      	movs	r3, #128	; 0x80
 80039fc:	021b      	lsls	r3, r3, #8
 80039fe:	61bb      	str	r3, [r7, #24]
        break;
 8003a00:	e006      	b.n	8003a10 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003a02:	2300      	movs	r3, #0
 8003a04:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a06:	231e      	movs	r3, #30
 8003a08:	18fb      	adds	r3, r7, r3
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	701a      	strb	r2, [r3, #0]
        break;
 8003a0e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d01e      	beq.n	8003a54 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	085a      	lsrs	r2, r3, #1
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	18d2      	adds	r2, r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	0019      	movs	r1, r3
 8003a26:	0010      	movs	r0, r2
 8003a28:	f7fc fb6e 	bl	8000108 <__udivsi3>
 8003a2c:	0003      	movs	r3, r0
 8003a2e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	2b0f      	cmp	r3, #15
 8003a34:	d90a      	bls.n	8003a4c <UART_SetConfig+0x240>
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	2380      	movs	r3, #128	; 0x80
 8003a3a:	025b      	lsls	r3, r3, #9
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d205      	bcs.n	8003a4c <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	b29a      	uxth	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	60da      	str	r2, [r3, #12]
 8003a4a:	e003      	b.n	8003a54 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8003a4c:	231e      	movs	r3, #30
 8003a4e:	18fb      	adds	r3, r7, r3
 8003a50:	2201      	movs	r2, #1
 8003a52:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003a60:	231e      	movs	r3, #30
 8003a62:	18fb      	adds	r3, r7, r3
 8003a64:	781b      	ldrb	r3, [r3, #0]
}
 8003a66:	0018      	movs	r0, r3
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	b008      	add	sp, #32
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	46c0      	nop			; (mov r8, r8)
 8003a70:	ffff69f3 	.word	0xffff69f3
 8003a74:	ffffcfff 	.word	0xffffcfff
 8003a78:	fffff4ff 	.word	0xfffff4ff
 8003a7c:	40013800 	.word	0x40013800
 8003a80:	40021000 	.word	0x40021000
 8003a84:	40004400 	.word	0x40004400
 8003a88:	007a1200 	.word	0x007a1200

08003a8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a98:	2201      	movs	r2, #1
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	d00b      	beq.n	8003ab6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	4a4a      	ldr	r2, [pc, #296]	; (8003bd0 <UART_AdvFeatureConfig+0x144>)
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	0019      	movs	r1, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aba:	2202      	movs	r2, #2
 8003abc:	4013      	ands	r3, r2
 8003abe:	d00b      	beq.n	8003ad8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	4a43      	ldr	r2, [pc, #268]	; (8003bd4 <UART_AdvFeatureConfig+0x148>)
 8003ac8:	4013      	ands	r3, r2
 8003aca:	0019      	movs	r1, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003adc:	2204      	movs	r2, #4
 8003ade:	4013      	ands	r3, r2
 8003ae0:	d00b      	beq.n	8003afa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	4a3b      	ldr	r2, [pc, #236]	; (8003bd8 <UART_AdvFeatureConfig+0x14c>)
 8003aea:	4013      	ands	r3, r2
 8003aec:	0019      	movs	r1, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afe:	2208      	movs	r2, #8
 8003b00:	4013      	ands	r3, r2
 8003b02:	d00b      	beq.n	8003b1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	4a34      	ldr	r2, [pc, #208]	; (8003bdc <UART_AdvFeatureConfig+0x150>)
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	0019      	movs	r1, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b20:	2210      	movs	r2, #16
 8003b22:	4013      	ands	r3, r2
 8003b24:	d00b      	beq.n	8003b3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	4a2c      	ldr	r2, [pc, #176]	; (8003be0 <UART_AdvFeatureConfig+0x154>)
 8003b2e:	4013      	ands	r3, r2
 8003b30:	0019      	movs	r1, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b42:	2220      	movs	r2, #32
 8003b44:	4013      	ands	r3, r2
 8003b46:	d00b      	beq.n	8003b60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	4a25      	ldr	r2, [pc, #148]	; (8003be4 <UART_AdvFeatureConfig+0x158>)
 8003b50:	4013      	ands	r3, r2
 8003b52:	0019      	movs	r1, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b64:	2240      	movs	r2, #64	; 0x40
 8003b66:	4013      	ands	r3, r2
 8003b68:	d01d      	beq.n	8003ba6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	4a1d      	ldr	r2, [pc, #116]	; (8003be8 <UART_AdvFeatureConfig+0x15c>)
 8003b72:	4013      	ands	r3, r2
 8003b74:	0019      	movs	r1, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b86:	2380      	movs	r3, #128	; 0x80
 8003b88:	035b      	lsls	r3, r3, #13
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d10b      	bne.n	8003ba6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	4a15      	ldr	r2, [pc, #84]	; (8003bec <UART_AdvFeatureConfig+0x160>)
 8003b96:	4013      	ands	r3, r2
 8003b98:	0019      	movs	r1, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003baa:	2280      	movs	r2, #128	; 0x80
 8003bac:	4013      	ands	r3, r2
 8003bae:	d00b      	beq.n	8003bc8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	4a0e      	ldr	r2, [pc, #56]	; (8003bf0 <UART_AdvFeatureConfig+0x164>)
 8003bb8:	4013      	ands	r3, r2
 8003bba:	0019      	movs	r1, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	605a      	str	r2, [r3, #4]
  }
}
 8003bc8:	46c0      	nop			; (mov r8, r8)
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	b002      	add	sp, #8
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	fffdffff 	.word	0xfffdffff
 8003bd4:	fffeffff 	.word	0xfffeffff
 8003bd8:	fffbffff 	.word	0xfffbffff
 8003bdc:	ffff7fff 	.word	0xffff7fff
 8003be0:	ffffefff 	.word	0xffffefff
 8003be4:	ffffdfff 	.word	0xffffdfff
 8003be8:	ffefffff 	.word	0xffefffff
 8003bec:	ff9fffff 	.word	0xff9fffff
 8003bf0:	fff7ffff 	.word	0xfff7ffff

08003bf4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b092      	sub	sp, #72	; 0x48
 8003bf8:	af02      	add	r7, sp, #8
 8003bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2284      	movs	r2, #132	; 0x84
 8003c00:	2100      	movs	r1, #0
 8003c02:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c04:	f7fd fa52 	bl	80010ac <HAL_GetTick>
 8003c08:	0003      	movs	r3, r0
 8003c0a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2208      	movs	r2, #8
 8003c14:	4013      	ands	r3, r2
 8003c16:	2b08      	cmp	r3, #8
 8003c18:	d12c      	bne.n	8003c74 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c1c:	2280      	movs	r2, #128	; 0x80
 8003c1e:	0391      	lsls	r1, r2, #14
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	4a46      	ldr	r2, [pc, #280]	; (8003d3c <UART_CheckIdleState+0x148>)
 8003c24:	9200      	str	r2, [sp, #0]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f000 f88c 	bl	8003d44 <UART_WaitOnFlagUntilTimeout>
 8003c2c:	1e03      	subs	r3, r0, #0
 8003c2e:	d021      	beq.n	8003c74 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c30:	f3ef 8310 	mrs	r3, PRIMASK
 8003c34:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003c38:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c40:	f383 8810 	msr	PRIMASK, r3
}
 8003c44:	46c0      	nop			; (mov r8, r8)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2180      	movs	r1, #128	; 0x80
 8003c52:	438a      	bics	r2, r1
 8003c54:	601a      	str	r2, [r3, #0]
 8003c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c58:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c5c:	f383 8810 	msr	PRIMASK, r3
}
 8003c60:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2220      	movs	r2, #32
 8003c66:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2278      	movs	r2, #120	; 0x78
 8003c6c:	2100      	movs	r1, #0
 8003c6e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e05f      	b.n	8003d34 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2204      	movs	r2, #4
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	2b04      	cmp	r3, #4
 8003c80:	d146      	bne.n	8003d10 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c84:	2280      	movs	r2, #128	; 0x80
 8003c86:	03d1      	lsls	r1, r2, #15
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	4a2c      	ldr	r2, [pc, #176]	; (8003d3c <UART_CheckIdleState+0x148>)
 8003c8c:	9200      	str	r2, [sp, #0]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f000 f858 	bl	8003d44 <UART_WaitOnFlagUntilTimeout>
 8003c94:	1e03      	subs	r3, r0, #0
 8003c96:	d03b      	beq.n	8003d10 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c98:	f3ef 8310 	mrs	r3, PRIMASK
 8003c9c:	60fb      	str	r3, [r7, #12]
  return(result);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ca0:	637b      	str	r3, [r7, #52]	; 0x34
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	f383 8810 	msr	PRIMASK, r3
}
 8003cac:	46c0      	nop			; (mov r8, r8)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4921      	ldr	r1, [pc, #132]	; (8003d40 <UART_CheckIdleState+0x14c>)
 8003cba:	400a      	ands	r2, r1
 8003cbc:	601a      	str	r2, [r3, #0]
 8003cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cc0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	f383 8810 	msr	PRIMASK, r3
}
 8003cc8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cca:	f3ef 8310 	mrs	r3, PRIMASK
 8003cce:	61bb      	str	r3, [r7, #24]
  return(result);
 8003cd0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cd2:	633b      	str	r3, [r7, #48]	; 0x30
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	f383 8810 	msr	PRIMASK, r3
}
 8003cde:	46c0      	nop			; (mov r8, r8)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	689a      	ldr	r2, [r3, #8]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2101      	movs	r1, #1
 8003cec:	438a      	bics	r2, r1
 8003cee:	609a      	str	r2, [r3, #8]
 8003cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cf4:	6a3b      	ldr	r3, [r7, #32]
 8003cf6:	f383 8810 	msr	PRIMASK, r3
}
 8003cfa:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2280      	movs	r2, #128	; 0x80
 8003d00:	2120      	movs	r1, #32
 8003d02:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2278      	movs	r2, #120	; 0x78
 8003d08:	2100      	movs	r1, #0
 8003d0a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e011      	b.n	8003d34 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2220      	movs	r2, #32
 8003d14:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2280      	movs	r2, #128	; 0x80
 8003d1a:	2120      	movs	r1, #32
 8003d1c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2278      	movs	r2, #120	; 0x78
 8003d2e:	2100      	movs	r1, #0
 8003d30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	0018      	movs	r0, r3
 8003d36:	46bd      	mov	sp, r7
 8003d38:	b010      	add	sp, #64	; 0x40
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	01ffffff 	.word	0x01ffffff
 8003d40:	fffffedf 	.word	0xfffffedf

08003d44 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	603b      	str	r3, [r7, #0]
 8003d50:	1dfb      	adds	r3, r7, #7
 8003d52:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d54:	e04b      	b.n	8003dee <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	3301      	adds	r3, #1
 8003d5a:	d048      	beq.n	8003dee <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d5c:	f7fd f9a6 	bl	80010ac <HAL_GetTick>
 8003d60:	0002      	movs	r2, r0
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	69ba      	ldr	r2, [r7, #24]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d302      	bcc.n	8003d72 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e04b      	b.n	8003e0e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2204      	movs	r2, #4
 8003d7e:	4013      	ands	r3, r2
 8003d80:	d035      	beq.n	8003dee <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	69db      	ldr	r3, [r3, #28]
 8003d88:	2208      	movs	r2, #8
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	2b08      	cmp	r3, #8
 8003d8e:	d111      	bne.n	8003db4 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2208      	movs	r2, #8
 8003d96:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	0018      	movs	r0, r3
 8003d9c:	f000 f8f2 	bl	8003f84 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2284      	movs	r2, #132	; 0x84
 8003da4:	2108      	movs	r1, #8
 8003da6:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2278      	movs	r2, #120	; 0x78
 8003dac:	2100      	movs	r1, #0
 8003dae:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e02c      	b.n	8003e0e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	69da      	ldr	r2, [r3, #28]
 8003dba:	2380      	movs	r3, #128	; 0x80
 8003dbc:	011b      	lsls	r3, r3, #4
 8003dbe:	401a      	ands	r2, r3
 8003dc0:	2380      	movs	r3, #128	; 0x80
 8003dc2:	011b      	lsls	r3, r3, #4
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d112      	bne.n	8003dee <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2280      	movs	r2, #128	; 0x80
 8003dce:	0112      	lsls	r2, r2, #4
 8003dd0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	0018      	movs	r0, r3
 8003dd6:	f000 f8d5 	bl	8003f84 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2284      	movs	r2, #132	; 0x84
 8003dde:	2120      	movs	r1, #32
 8003de0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2278      	movs	r2, #120	; 0x78
 8003de6:	2100      	movs	r1, #0
 8003de8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e00f      	b.n	8003e0e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	69db      	ldr	r3, [r3, #28]
 8003df4:	68ba      	ldr	r2, [r7, #8]
 8003df6:	4013      	ands	r3, r2
 8003df8:	68ba      	ldr	r2, [r7, #8]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	425a      	negs	r2, r3
 8003dfe:	4153      	adcs	r3, r2
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	001a      	movs	r2, r3
 8003e04:	1dfb      	adds	r3, r7, #7
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d0a4      	beq.n	8003d56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	0018      	movs	r0, r3
 8003e10:	46bd      	mov	sp, r7
 8003e12:	b004      	add	sp, #16
 8003e14:	bd80      	pop	{r7, pc}
	...

08003e18 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b090      	sub	sp, #64	; 0x40
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	1dbb      	adds	r3, r7, #6
 8003e24:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	68ba      	ldr	r2, [r7, #8]
 8003e2a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	1dba      	adds	r2, r7, #6
 8003e30:	2158      	movs	r1, #88	; 0x58
 8003e32:	8812      	ldrh	r2, [r2, #0]
 8003e34:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	1dba      	adds	r2, r7, #6
 8003e3a:	215a      	movs	r1, #90	; 0x5a
 8003e3c:	8812      	ldrh	r2, [r2, #0]
 8003e3e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	689a      	ldr	r2, [r3, #8]
 8003e4a:	2380      	movs	r3, #128	; 0x80
 8003e4c:	015b      	lsls	r3, r3, #5
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d10d      	bne.n	8003e6e <UART_Start_Receive_IT+0x56>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d104      	bne.n	8003e64 <UART_Start_Receive_IT+0x4c>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	225c      	movs	r2, #92	; 0x5c
 8003e5e:	4946      	ldr	r1, [pc, #280]	; (8003f78 <UART_Start_Receive_IT+0x160>)
 8003e60:	5299      	strh	r1, [r3, r2]
 8003e62:	e01a      	b.n	8003e9a <UART_Start_Receive_IT+0x82>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	225c      	movs	r2, #92	; 0x5c
 8003e68:	21ff      	movs	r1, #255	; 0xff
 8003e6a:	5299      	strh	r1, [r3, r2]
 8003e6c:	e015      	b.n	8003e9a <UART_Start_Receive_IT+0x82>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d10d      	bne.n	8003e92 <UART_Start_Receive_IT+0x7a>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d104      	bne.n	8003e88 <UART_Start_Receive_IT+0x70>
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	225c      	movs	r2, #92	; 0x5c
 8003e82:	21ff      	movs	r1, #255	; 0xff
 8003e84:	5299      	strh	r1, [r3, r2]
 8003e86:	e008      	b.n	8003e9a <UART_Start_Receive_IT+0x82>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	225c      	movs	r2, #92	; 0x5c
 8003e8c:	217f      	movs	r1, #127	; 0x7f
 8003e8e:	5299      	strh	r1, [r3, r2]
 8003e90:	e003      	b.n	8003e9a <UART_Start_Receive_IT+0x82>
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	225c      	movs	r2, #92	; 0x5c
 8003e96:	2100      	movs	r1, #0
 8003e98:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2284      	movs	r2, #132	; 0x84
 8003e9e:	2100      	movs	r1, #0
 8003ea0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2280      	movs	r2, #128	; 0x80
 8003ea6:	2122      	movs	r1, #34	; 0x22
 8003ea8:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eaa:	f3ef 8310 	mrs	r3, PRIMASK
 8003eae:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eba:	f383 8810 	msr	PRIMASK, r3
}
 8003ebe:	46c0      	nop			; (mov r8, r8)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	689a      	ldr	r2, [r3, #8]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2101      	movs	r1, #1
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	609a      	str	r2, [r3, #8]
 8003ed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ed2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed6:	f383 8810 	msr	PRIMASK, r3
}
 8003eda:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	689a      	ldr	r2, [r3, #8]
 8003ee0:	2380      	movs	r3, #128	; 0x80
 8003ee2:	015b      	lsls	r3, r3, #5
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d107      	bne.n	8003ef8 <UART_Start_Receive_IT+0xe0>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d103      	bne.n	8003ef8 <UART_Start_Receive_IT+0xe0>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	4a22      	ldr	r2, [pc, #136]	; (8003f7c <UART_Start_Receive_IT+0x164>)
 8003ef4:	669a      	str	r2, [r3, #104]	; 0x68
 8003ef6:	e002      	b.n	8003efe <UART_Start_Receive_IT+0xe6>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	4a21      	ldr	r2, [pc, #132]	; (8003f80 <UART_Start_Receive_IT+0x168>)
 8003efc:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d019      	beq.n	8003f3a <UART_Start_Receive_IT+0x122>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f06:	f3ef 8310 	mrs	r3, PRIMASK
 8003f0a:	61fb      	str	r3, [r7, #28]
  return(result);
 8003f0c:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003f0e:	637b      	str	r3, [r7, #52]	; 0x34
 8003f10:	2301      	movs	r3, #1
 8003f12:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f14:	6a3b      	ldr	r3, [r7, #32]
 8003f16:	f383 8810 	msr	PRIMASK, r3
}
 8003f1a:	46c0      	nop			; (mov r8, r8)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2190      	movs	r1, #144	; 0x90
 8003f28:	0049      	lsls	r1, r1, #1
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	601a      	str	r2, [r3, #0]
 8003f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f30:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f34:	f383 8810 	msr	PRIMASK, r3
}
 8003f38:	e018      	b.n	8003f6c <UART_Start_Receive_IT+0x154>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f3a:	f3ef 8310 	mrs	r3, PRIMASK
 8003f3e:	613b      	str	r3, [r7, #16]
  return(result);
 8003f40:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003f42:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f44:	2301      	movs	r3, #1
 8003f46:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	f383 8810 	msr	PRIMASK, r3
}
 8003f4e:	46c0      	nop			; (mov r8, r8)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2120      	movs	r1, #32
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	601a      	str	r2, [r3, #0]
 8003f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f62:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	f383 8810 	msr	PRIMASK, r3
}
 8003f6a:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	0018      	movs	r0, r3
 8003f70:	46bd      	mov	sp, r7
 8003f72:	b010      	add	sp, #64	; 0x40
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	46c0      	nop			; (mov r8, r8)
 8003f78:	000001ff 	.word	0x000001ff
 8003f7c:	08004289 	.word	0x08004289
 8003f80:	080040d1 	.word	0x080040d1

08003f84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b08e      	sub	sp, #56	; 0x38
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f8c:	f3ef 8310 	mrs	r3, PRIMASK
 8003f90:	617b      	str	r3, [r7, #20]
  return(result);
 8003f92:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f94:	637b      	str	r3, [r7, #52]	; 0x34
 8003f96:	2301      	movs	r3, #1
 8003f98:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	f383 8810 	msr	PRIMASK, r3
}
 8003fa0:	46c0      	nop			; (mov r8, r8)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4926      	ldr	r1, [pc, #152]	; (8004048 <UART_EndRxTransfer+0xc4>)
 8003fae:	400a      	ands	r2, r1
 8003fb0:	601a      	str	r2, [r3, #0]
 8003fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fb4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	f383 8810 	msr	PRIMASK, r3
}
 8003fbc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fbe:	f3ef 8310 	mrs	r3, PRIMASK
 8003fc2:	623b      	str	r3, [r7, #32]
  return(result);
 8003fc4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fc6:	633b      	str	r3, [r7, #48]	; 0x30
 8003fc8:	2301      	movs	r3, #1
 8003fca:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fce:	f383 8810 	msr	PRIMASK, r3
}
 8003fd2:	46c0      	nop			; (mov r8, r8)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	689a      	ldr	r2, [r3, #8]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2101      	movs	r1, #1
 8003fe0:	438a      	bics	r2, r1
 8003fe2:	609a      	str	r2, [r3, #8]
 8003fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fea:	f383 8810 	msr	PRIMASK, r3
}
 8003fee:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d118      	bne.n	800402a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ff8:	f3ef 8310 	mrs	r3, PRIMASK
 8003ffc:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ffe:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004000:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004002:	2301      	movs	r3, #1
 8004004:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f383 8810 	msr	PRIMASK, r3
}
 800400c:	46c0      	nop			; (mov r8, r8)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2110      	movs	r1, #16
 800401a:	438a      	bics	r2, r1
 800401c:	601a      	str	r2, [r3, #0]
 800401e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004020:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	f383 8810 	msr	PRIMASK, r3
}
 8004028:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2280      	movs	r2, #128	; 0x80
 800402e:	2120      	movs	r1, #32
 8004030:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800403e:	46c0      	nop			; (mov r8, r8)
 8004040:	46bd      	mov	sp, r7
 8004042:	b00e      	add	sp, #56	; 0x38
 8004044:	bd80      	pop	{r7, pc}
 8004046:	46c0      	nop			; (mov r8, r8)
 8004048:	fffffedf 	.word	0xfffffedf

0800404c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004058:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	225a      	movs	r2, #90	; 0x5a
 800405e:	2100      	movs	r1, #0
 8004060:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2252      	movs	r2, #82	; 0x52
 8004066:	2100      	movs	r1, #0
 8004068:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	0018      	movs	r0, r3
 800406e:	f7ff fbb9 	bl	80037e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004072:	46c0      	nop			; (mov r8, r8)
 8004074:	46bd      	mov	sp, r7
 8004076:	b004      	add	sp, #16
 8004078:	bd80      	pop	{r7, pc}

0800407a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800407a:	b580      	push	{r7, lr}
 800407c:	b086      	sub	sp, #24
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004082:	f3ef 8310 	mrs	r3, PRIMASK
 8004086:	60bb      	str	r3, [r7, #8]
  return(result);
 8004088:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800408a:	617b      	str	r3, [r7, #20]
 800408c:	2301      	movs	r3, #1
 800408e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f383 8810 	msr	PRIMASK, r3
}
 8004096:	46c0      	nop			; (mov r8, r8)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2140      	movs	r1, #64	; 0x40
 80040a4:	438a      	bics	r2, r1
 80040a6:	601a      	str	r2, [r3, #0]
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	f383 8810 	msr	PRIMASK, r3
}
 80040b2:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2220      	movs	r2, #32
 80040b8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	0018      	movs	r0, r3
 80040c4:	f7ff fb86 	bl	80037d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040c8:	46c0      	nop			; (mov r8, r8)
 80040ca:	46bd      	mov	sp, r7
 80040cc:	b006      	add	sp, #24
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b094      	sub	sp, #80	; 0x50
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80040d8:	204e      	movs	r0, #78	; 0x4e
 80040da:	183b      	adds	r3, r7, r0
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	215c      	movs	r1, #92	; 0x5c
 80040e0:	5a52      	ldrh	r2, [r2, r1]
 80040e2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2280      	movs	r2, #128	; 0x80
 80040e8:	589b      	ldr	r3, [r3, r2]
 80040ea:	2b22      	cmp	r3, #34	; 0x22
 80040ec:	d000      	beq.n	80040f0 <UART_RxISR_8BIT+0x20>
 80040ee:	e0ba      	b.n	8004266 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	214c      	movs	r1, #76	; 0x4c
 80040f6:	187b      	adds	r3, r7, r1
 80040f8:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80040fa:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80040fc:	187b      	adds	r3, r7, r1
 80040fe:	881b      	ldrh	r3, [r3, #0]
 8004100:	b2da      	uxtb	r2, r3
 8004102:	183b      	adds	r3, r7, r0
 8004104:	881b      	ldrh	r3, [r3, #0]
 8004106:	b2d9      	uxtb	r1, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800410c:	400a      	ands	r2, r1
 800410e:	b2d2      	uxtb	r2, r2
 8004110:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004116:	1c5a      	adds	r2, r3, #1
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	225a      	movs	r2, #90	; 0x5a
 8004120:	5a9b      	ldrh	r3, [r3, r2]
 8004122:	b29b      	uxth	r3, r3
 8004124:	3b01      	subs	r3, #1
 8004126:	b299      	uxth	r1, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	225a      	movs	r2, #90	; 0x5a
 800412c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	225a      	movs	r2, #90	; 0x5a
 8004132:	5a9b      	ldrh	r3, [r3, r2]
 8004134:	b29b      	uxth	r3, r3
 8004136:	2b00      	cmp	r3, #0
 8004138:	d000      	beq.n	800413c <UART_RxISR_8BIT+0x6c>
 800413a:	e09c      	b.n	8004276 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800413c:	f3ef 8310 	mrs	r3, PRIMASK
 8004140:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004144:	64bb      	str	r3, [r7, #72]	; 0x48
 8004146:	2301      	movs	r3, #1
 8004148:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800414a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800414c:	f383 8810 	msr	PRIMASK, r3
}
 8004150:	46c0      	nop			; (mov r8, r8)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4948      	ldr	r1, [pc, #288]	; (8004280 <UART_RxISR_8BIT+0x1b0>)
 800415e:	400a      	ands	r2, r1
 8004160:	601a      	str	r2, [r3, #0]
 8004162:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004164:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004168:	f383 8810 	msr	PRIMASK, r3
}
 800416c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800416e:	f3ef 8310 	mrs	r3, PRIMASK
 8004172:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004174:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004176:	647b      	str	r3, [r7, #68]	; 0x44
 8004178:	2301      	movs	r3, #1
 800417a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800417c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800417e:	f383 8810 	msr	PRIMASK, r3
}
 8004182:	46c0      	nop			; (mov r8, r8)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	689a      	ldr	r2, [r3, #8]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2101      	movs	r1, #1
 8004190:	438a      	bics	r2, r1
 8004192:	609a      	str	r2, [r3, #8]
 8004194:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004196:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800419a:	f383 8810 	msr	PRIMASK, r3
}
 800419e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2280      	movs	r2, #128	; 0x80
 80041a4:	2120      	movs	r1, #32
 80041a6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685a      	ldr	r2, [r3, #4]
 80041ba:	2380      	movs	r3, #128	; 0x80
 80041bc:	041b      	lsls	r3, r3, #16
 80041be:	4013      	ands	r3, r2
 80041c0:	d018      	beq.n	80041f4 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041c2:	f3ef 8310 	mrs	r3, PRIMASK
 80041c6:	61bb      	str	r3, [r7, #24]
  return(result);
 80041c8:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80041ca:	643b      	str	r3, [r7, #64]	; 0x40
 80041cc:	2301      	movs	r3, #1
 80041ce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	f383 8810 	msr	PRIMASK, r3
}
 80041d6:	46c0      	nop			; (mov r8, r8)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4928      	ldr	r1, [pc, #160]	; (8004284 <UART_RxISR_8BIT+0x1b4>)
 80041e4:	400a      	ands	r2, r1
 80041e6:	601a      	str	r2, [r3, #0]
 80041e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041ea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041ec:	6a3b      	ldr	r3, [r7, #32]
 80041ee:	f383 8810 	msr	PRIMASK, r3
}
 80041f2:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d12f      	bne.n	800425c <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004202:	f3ef 8310 	mrs	r3, PRIMASK
 8004206:	60fb      	str	r3, [r7, #12]
  return(result);
 8004208:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800420a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800420c:	2301      	movs	r3, #1
 800420e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	f383 8810 	msr	PRIMASK, r3
}
 8004216:	46c0      	nop			; (mov r8, r8)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2110      	movs	r1, #16
 8004224:	438a      	bics	r2, r1
 8004226:	601a      	str	r2, [r3, #0]
 8004228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800422a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	f383 8810 	msr	PRIMASK, r3
}
 8004232:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	69db      	ldr	r3, [r3, #28]
 800423a:	2210      	movs	r2, #16
 800423c:	4013      	ands	r3, r2
 800423e:	2b10      	cmp	r3, #16
 8004240:	d103      	bne.n	800424a <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2210      	movs	r2, #16
 8004248:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2258      	movs	r2, #88	; 0x58
 800424e:	5a9a      	ldrh	r2, [r3, r2]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	0011      	movs	r1, r2
 8004254:	0018      	movs	r0, r3
 8004256:	f7ff facd 	bl	80037f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800425a:	e00c      	b.n	8004276 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	0018      	movs	r0, r3
 8004260:	f7fc facc 	bl	80007fc <HAL_UART_RxCpltCallback>
}
 8004264:	e007      	b.n	8004276 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	699a      	ldr	r2, [r3, #24]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2108      	movs	r1, #8
 8004272:	430a      	orrs	r2, r1
 8004274:	619a      	str	r2, [r3, #24]
}
 8004276:	46c0      	nop			; (mov r8, r8)
 8004278:	46bd      	mov	sp, r7
 800427a:	b014      	add	sp, #80	; 0x50
 800427c:	bd80      	pop	{r7, pc}
 800427e:	46c0      	nop			; (mov r8, r8)
 8004280:	fffffedf 	.word	0xfffffedf
 8004284:	fbffffff 	.word	0xfbffffff

08004288 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b094      	sub	sp, #80	; 0x50
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004290:	204e      	movs	r0, #78	; 0x4e
 8004292:	183b      	adds	r3, r7, r0
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	215c      	movs	r1, #92	; 0x5c
 8004298:	5a52      	ldrh	r2, [r2, r1]
 800429a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2280      	movs	r2, #128	; 0x80
 80042a0:	589b      	ldr	r3, [r3, r2]
 80042a2:	2b22      	cmp	r3, #34	; 0x22
 80042a4:	d000      	beq.n	80042a8 <UART_RxISR_16BIT+0x20>
 80042a6:	e0ba      	b.n	800441e <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	214c      	movs	r1, #76	; 0x4c
 80042ae:	187b      	adds	r3, r7, r1
 80042b0:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80042b2:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042b8:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 80042ba:	187b      	adds	r3, r7, r1
 80042bc:	183a      	adds	r2, r7, r0
 80042be:	881b      	ldrh	r3, [r3, #0]
 80042c0:	8812      	ldrh	r2, [r2, #0]
 80042c2:	4013      	ands	r3, r2
 80042c4:	b29a      	uxth	r2, r3
 80042c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042c8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ce:	1c9a      	adds	r2, r3, #2
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	225a      	movs	r2, #90	; 0x5a
 80042d8:	5a9b      	ldrh	r3, [r3, r2]
 80042da:	b29b      	uxth	r3, r3
 80042dc:	3b01      	subs	r3, #1
 80042de:	b299      	uxth	r1, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	225a      	movs	r2, #90	; 0x5a
 80042e4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	225a      	movs	r2, #90	; 0x5a
 80042ea:	5a9b      	ldrh	r3, [r3, r2]
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d000      	beq.n	80042f4 <UART_RxISR_16BIT+0x6c>
 80042f2:	e09c      	b.n	800442e <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042f4:	f3ef 8310 	mrs	r3, PRIMASK
 80042f8:	623b      	str	r3, [r7, #32]
  return(result);
 80042fa:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042fc:	647b      	str	r3, [r7, #68]	; 0x44
 80042fe:	2301      	movs	r3, #1
 8004300:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004304:	f383 8810 	msr	PRIMASK, r3
}
 8004308:	46c0      	nop			; (mov r8, r8)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4948      	ldr	r1, [pc, #288]	; (8004438 <UART_RxISR_16BIT+0x1b0>)
 8004316:	400a      	ands	r2, r1
 8004318:	601a      	str	r2, [r3, #0]
 800431a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800431c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800431e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004320:	f383 8810 	msr	PRIMASK, r3
}
 8004324:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004326:	f3ef 8310 	mrs	r3, PRIMASK
 800432a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800432c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800432e:	643b      	str	r3, [r7, #64]	; 0x40
 8004330:	2301      	movs	r3, #1
 8004332:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004336:	f383 8810 	msr	PRIMASK, r3
}
 800433a:	46c0      	nop			; (mov r8, r8)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	689a      	ldr	r2, [r3, #8]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2101      	movs	r1, #1
 8004348:	438a      	bics	r2, r1
 800434a:	609a      	str	r2, [r3, #8]
 800434c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800434e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004352:	f383 8810 	msr	PRIMASK, r3
}
 8004356:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2280      	movs	r2, #128	; 0x80
 800435c:	2120      	movs	r1, #32
 800435e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	685a      	ldr	r2, [r3, #4]
 8004372:	2380      	movs	r3, #128	; 0x80
 8004374:	041b      	lsls	r3, r3, #16
 8004376:	4013      	ands	r3, r2
 8004378:	d018      	beq.n	80043ac <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800437a:	f3ef 8310 	mrs	r3, PRIMASK
 800437e:	617b      	str	r3, [r7, #20]
  return(result);
 8004380:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004382:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004384:	2301      	movs	r3, #1
 8004386:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	f383 8810 	msr	PRIMASK, r3
}
 800438e:	46c0      	nop			; (mov r8, r8)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4928      	ldr	r1, [pc, #160]	; (800443c <UART_RxISR_16BIT+0x1b4>)
 800439c:	400a      	ands	r2, r1
 800439e:	601a      	str	r2, [r3, #0]
 80043a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043a2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	f383 8810 	msr	PRIMASK, r3
}
 80043aa:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d12f      	bne.n	8004414 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043ba:	f3ef 8310 	mrs	r3, PRIMASK
 80043be:	60bb      	str	r3, [r7, #8]
  return(result);
 80043c0:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80043c4:	2301      	movs	r3, #1
 80043c6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f383 8810 	msr	PRIMASK, r3
}
 80043ce:	46c0      	nop			; (mov r8, r8)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2110      	movs	r1, #16
 80043dc:	438a      	bics	r2, r1
 80043de:	601a      	str	r2, [r3, #0]
 80043e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	f383 8810 	msr	PRIMASK, r3
}
 80043ea:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	69db      	ldr	r3, [r3, #28]
 80043f2:	2210      	movs	r2, #16
 80043f4:	4013      	ands	r3, r2
 80043f6:	2b10      	cmp	r3, #16
 80043f8:	d103      	bne.n	8004402 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2210      	movs	r2, #16
 8004400:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2258      	movs	r2, #88	; 0x58
 8004406:	5a9a      	ldrh	r2, [r3, r2]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	0011      	movs	r1, r2
 800440c:	0018      	movs	r0, r3
 800440e:	f7ff f9f1 	bl	80037f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004412:	e00c      	b.n	800442e <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	0018      	movs	r0, r3
 8004418:	f7fc f9f0 	bl	80007fc <HAL_UART_RxCpltCallback>
}
 800441c:	e007      	b.n	800442e <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	699a      	ldr	r2, [r3, #24]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2108      	movs	r1, #8
 800442a:	430a      	orrs	r2, r1
 800442c:	619a      	str	r2, [r3, #24]
}
 800442e:	46c0      	nop			; (mov r8, r8)
 8004430:	46bd      	mov	sp, r7
 8004432:	b014      	add	sp, #80	; 0x50
 8004434:	bd80      	pop	{r7, pc}
 8004436:	46c0      	nop			; (mov r8, r8)
 8004438:	fffffedf 	.word	0xfffffedf
 800443c:	fbffffff 	.word	0xfbffffff

08004440 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004448:	46c0      	nop			; (mov r8, r8)
 800444a:	46bd      	mov	sp, r7
 800444c:	b002      	add	sp, #8
 800444e:	bd80      	pop	{r7, pc}

08004450 <__libc_init_array>:
 8004450:	b570      	push	{r4, r5, r6, lr}
 8004452:	2600      	movs	r6, #0
 8004454:	4d0c      	ldr	r5, [pc, #48]	; (8004488 <__libc_init_array+0x38>)
 8004456:	4c0d      	ldr	r4, [pc, #52]	; (800448c <__libc_init_array+0x3c>)
 8004458:	1b64      	subs	r4, r4, r5
 800445a:	10a4      	asrs	r4, r4, #2
 800445c:	42a6      	cmp	r6, r4
 800445e:	d109      	bne.n	8004474 <__libc_init_array+0x24>
 8004460:	2600      	movs	r6, #0
 8004462:	f000 f821 	bl	80044a8 <_init>
 8004466:	4d0a      	ldr	r5, [pc, #40]	; (8004490 <__libc_init_array+0x40>)
 8004468:	4c0a      	ldr	r4, [pc, #40]	; (8004494 <__libc_init_array+0x44>)
 800446a:	1b64      	subs	r4, r4, r5
 800446c:	10a4      	asrs	r4, r4, #2
 800446e:	42a6      	cmp	r6, r4
 8004470:	d105      	bne.n	800447e <__libc_init_array+0x2e>
 8004472:	bd70      	pop	{r4, r5, r6, pc}
 8004474:	00b3      	lsls	r3, r6, #2
 8004476:	58eb      	ldr	r3, [r5, r3]
 8004478:	4798      	blx	r3
 800447a:	3601      	adds	r6, #1
 800447c:	e7ee      	b.n	800445c <__libc_init_array+0xc>
 800447e:	00b3      	lsls	r3, r6, #2
 8004480:	58eb      	ldr	r3, [r5, r3]
 8004482:	4798      	blx	r3
 8004484:	3601      	adds	r6, #1
 8004486:	e7f2      	b.n	800446e <__libc_init_array+0x1e>
 8004488:	080044f8 	.word	0x080044f8
 800448c:	080044f8 	.word	0x080044f8
 8004490:	080044f8 	.word	0x080044f8
 8004494:	080044fc 	.word	0x080044fc

08004498 <memset>:
 8004498:	0003      	movs	r3, r0
 800449a:	1882      	adds	r2, r0, r2
 800449c:	4293      	cmp	r3, r2
 800449e:	d100      	bne.n	80044a2 <memset+0xa>
 80044a0:	4770      	bx	lr
 80044a2:	7019      	strb	r1, [r3, #0]
 80044a4:	3301      	adds	r3, #1
 80044a6:	e7f9      	b.n	800449c <memset+0x4>

080044a8 <_init>:
 80044a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044aa:	46c0      	nop			; (mov r8, r8)
 80044ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ae:	bc08      	pop	{r3}
 80044b0:	469e      	mov	lr, r3
 80044b2:	4770      	bx	lr

080044b4 <_fini>:
 80044b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044b6:	46c0      	nop			; (mov r8, r8)
 80044b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ba:	bc08      	pop	{r3}
 80044bc:	469e      	mov	lr, r3
 80044be:	4770      	bx	lr

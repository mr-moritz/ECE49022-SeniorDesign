
Cary_Microcontroller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004240  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004300  08004300  00014300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004338  08004338  0002003c  2**0
                  CONTENTS
  4 .ARM          00000000  08004338  08004338  0002003c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004338  08004338  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004338  08004338  00014338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800433c  0800433c  0001433c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  08004340  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  2000003c  0800437c  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  0800437c  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dde1  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001df5  00000000  00000000  0002de45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  0002fc40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b68  00000000  00000000  00030860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011bbb  00000000  00000000  000313c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e782  00000000  00000000  00042f83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006d793  00000000  00000000  00051705  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bee98  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c80  00000000  00000000  000beee8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000003c 	.word	0x2000003c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080042e8 	.word	0x080042e8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000040 	.word	0x20000040
 8000104:	080042e8 	.word	0x080042e8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_f2uiz>:
 8000220:	219e      	movs	r1, #158	; 0x9e
 8000222:	b510      	push	{r4, lr}
 8000224:	05c9      	lsls	r1, r1, #23
 8000226:	1c04      	adds	r4, r0, #0
 8000228:	f000 fa10 	bl	800064c <__aeabi_fcmpge>
 800022c:	2800      	cmp	r0, #0
 800022e:	d103      	bne.n	8000238 <__aeabi_f2uiz+0x18>
 8000230:	1c20      	adds	r0, r4, #0
 8000232:	f000 f9bb 	bl	80005ac <__aeabi_f2iz>
 8000236:	bd10      	pop	{r4, pc}
 8000238:	219e      	movs	r1, #158	; 0x9e
 800023a:	1c20      	adds	r0, r4, #0
 800023c:	05c9      	lsls	r1, r1, #23
 800023e:	f000 f807 	bl	8000250 <__aeabi_fsub>
 8000242:	f000 f9b3 	bl	80005ac <__aeabi_f2iz>
 8000246:	2380      	movs	r3, #128	; 0x80
 8000248:	061b      	lsls	r3, r3, #24
 800024a:	469c      	mov	ip, r3
 800024c:	4460      	add	r0, ip
 800024e:	e7f2      	b.n	8000236 <__aeabi_f2uiz+0x16>

08000250 <__aeabi_fsub>:
 8000250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000252:	46ce      	mov	lr, r9
 8000254:	4647      	mov	r7, r8
 8000256:	0243      	lsls	r3, r0, #9
 8000258:	0a5b      	lsrs	r3, r3, #9
 800025a:	024e      	lsls	r6, r1, #9
 800025c:	00da      	lsls	r2, r3, #3
 800025e:	4694      	mov	ip, r2
 8000260:	0a72      	lsrs	r2, r6, #9
 8000262:	4691      	mov	r9, r2
 8000264:	0045      	lsls	r5, r0, #1
 8000266:	004a      	lsls	r2, r1, #1
 8000268:	b580      	push	{r7, lr}
 800026a:	0e2d      	lsrs	r5, r5, #24
 800026c:	001f      	movs	r7, r3
 800026e:	0fc4      	lsrs	r4, r0, #31
 8000270:	0e12      	lsrs	r2, r2, #24
 8000272:	0fc9      	lsrs	r1, r1, #31
 8000274:	09b6      	lsrs	r6, r6, #6
 8000276:	2aff      	cmp	r2, #255	; 0xff
 8000278:	d05b      	beq.n	8000332 <__aeabi_fsub+0xe2>
 800027a:	2001      	movs	r0, #1
 800027c:	4041      	eors	r1, r0
 800027e:	428c      	cmp	r4, r1
 8000280:	d039      	beq.n	80002f6 <__aeabi_fsub+0xa6>
 8000282:	1aa8      	subs	r0, r5, r2
 8000284:	2800      	cmp	r0, #0
 8000286:	dd5a      	ble.n	800033e <__aeabi_fsub+0xee>
 8000288:	2a00      	cmp	r2, #0
 800028a:	d06a      	beq.n	8000362 <__aeabi_fsub+0x112>
 800028c:	2dff      	cmp	r5, #255	; 0xff
 800028e:	d100      	bne.n	8000292 <__aeabi_fsub+0x42>
 8000290:	e0d9      	b.n	8000446 <__aeabi_fsub+0x1f6>
 8000292:	2280      	movs	r2, #128	; 0x80
 8000294:	04d2      	lsls	r2, r2, #19
 8000296:	4316      	orrs	r6, r2
 8000298:	281b      	cmp	r0, #27
 800029a:	dc00      	bgt.n	800029e <__aeabi_fsub+0x4e>
 800029c:	e0e9      	b.n	8000472 <__aeabi_fsub+0x222>
 800029e:	2001      	movs	r0, #1
 80002a0:	4663      	mov	r3, ip
 80002a2:	1a18      	subs	r0, r3, r0
 80002a4:	0143      	lsls	r3, r0, #5
 80002a6:	d400      	bmi.n	80002aa <__aeabi_fsub+0x5a>
 80002a8:	e0b4      	b.n	8000414 <__aeabi_fsub+0x1c4>
 80002aa:	0180      	lsls	r0, r0, #6
 80002ac:	0987      	lsrs	r7, r0, #6
 80002ae:	0038      	movs	r0, r7
 80002b0:	f000 f9d6 	bl	8000660 <__clzsi2>
 80002b4:	3805      	subs	r0, #5
 80002b6:	4087      	lsls	r7, r0
 80002b8:	4285      	cmp	r5, r0
 80002ba:	dc00      	bgt.n	80002be <__aeabi_fsub+0x6e>
 80002bc:	e0cc      	b.n	8000458 <__aeabi_fsub+0x208>
 80002be:	1a2d      	subs	r5, r5, r0
 80002c0:	48b5      	ldr	r0, [pc, #724]	; (8000598 <__aeabi_fsub+0x348>)
 80002c2:	4038      	ands	r0, r7
 80002c4:	0743      	lsls	r3, r0, #29
 80002c6:	d004      	beq.n	80002d2 <__aeabi_fsub+0x82>
 80002c8:	230f      	movs	r3, #15
 80002ca:	4003      	ands	r3, r0
 80002cc:	2b04      	cmp	r3, #4
 80002ce:	d000      	beq.n	80002d2 <__aeabi_fsub+0x82>
 80002d0:	3004      	adds	r0, #4
 80002d2:	0143      	lsls	r3, r0, #5
 80002d4:	d400      	bmi.n	80002d8 <__aeabi_fsub+0x88>
 80002d6:	e0a0      	b.n	800041a <__aeabi_fsub+0x1ca>
 80002d8:	1c6a      	adds	r2, r5, #1
 80002da:	2dfe      	cmp	r5, #254	; 0xfe
 80002dc:	d100      	bne.n	80002e0 <__aeabi_fsub+0x90>
 80002de:	e08d      	b.n	80003fc <__aeabi_fsub+0x1ac>
 80002e0:	0180      	lsls	r0, r0, #6
 80002e2:	0a47      	lsrs	r7, r0, #9
 80002e4:	b2d2      	uxtb	r2, r2
 80002e6:	05d0      	lsls	r0, r2, #23
 80002e8:	4338      	orrs	r0, r7
 80002ea:	07e4      	lsls	r4, r4, #31
 80002ec:	4320      	orrs	r0, r4
 80002ee:	bcc0      	pop	{r6, r7}
 80002f0:	46b9      	mov	r9, r7
 80002f2:	46b0      	mov	r8, r6
 80002f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80002f6:	1aa8      	subs	r0, r5, r2
 80002f8:	4680      	mov	r8, r0
 80002fa:	2800      	cmp	r0, #0
 80002fc:	dd45      	ble.n	800038a <__aeabi_fsub+0x13a>
 80002fe:	2a00      	cmp	r2, #0
 8000300:	d070      	beq.n	80003e4 <__aeabi_fsub+0x194>
 8000302:	2dff      	cmp	r5, #255	; 0xff
 8000304:	d100      	bne.n	8000308 <__aeabi_fsub+0xb8>
 8000306:	e09e      	b.n	8000446 <__aeabi_fsub+0x1f6>
 8000308:	2380      	movs	r3, #128	; 0x80
 800030a:	04db      	lsls	r3, r3, #19
 800030c:	431e      	orrs	r6, r3
 800030e:	4643      	mov	r3, r8
 8000310:	2b1b      	cmp	r3, #27
 8000312:	dc00      	bgt.n	8000316 <__aeabi_fsub+0xc6>
 8000314:	e0d2      	b.n	80004bc <__aeabi_fsub+0x26c>
 8000316:	2001      	movs	r0, #1
 8000318:	4460      	add	r0, ip
 800031a:	0143      	lsls	r3, r0, #5
 800031c:	d57a      	bpl.n	8000414 <__aeabi_fsub+0x1c4>
 800031e:	3501      	adds	r5, #1
 8000320:	2dff      	cmp	r5, #255	; 0xff
 8000322:	d06b      	beq.n	80003fc <__aeabi_fsub+0x1ac>
 8000324:	2301      	movs	r3, #1
 8000326:	4a9d      	ldr	r2, [pc, #628]	; (800059c <__aeabi_fsub+0x34c>)
 8000328:	4003      	ands	r3, r0
 800032a:	0840      	lsrs	r0, r0, #1
 800032c:	4010      	ands	r0, r2
 800032e:	4318      	orrs	r0, r3
 8000330:	e7c8      	b.n	80002c4 <__aeabi_fsub+0x74>
 8000332:	2e00      	cmp	r6, #0
 8000334:	d020      	beq.n	8000378 <__aeabi_fsub+0x128>
 8000336:	428c      	cmp	r4, r1
 8000338:	d023      	beq.n	8000382 <__aeabi_fsub+0x132>
 800033a:	0028      	movs	r0, r5
 800033c:	38ff      	subs	r0, #255	; 0xff
 800033e:	2800      	cmp	r0, #0
 8000340:	d039      	beq.n	80003b6 <__aeabi_fsub+0x166>
 8000342:	1b57      	subs	r7, r2, r5
 8000344:	2d00      	cmp	r5, #0
 8000346:	d000      	beq.n	800034a <__aeabi_fsub+0xfa>
 8000348:	e09d      	b.n	8000486 <__aeabi_fsub+0x236>
 800034a:	4663      	mov	r3, ip
 800034c:	2b00      	cmp	r3, #0
 800034e:	d100      	bne.n	8000352 <__aeabi_fsub+0x102>
 8000350:	e0db      	b.n	800050a <__aeabi_fsub+0x2ba>
 8000352:	1e7b      	subs	r3, r7, #1
 8000354:	2f01      	cmp	r7, #1
 8000356:	d100      	bne.n	800035a <__aeabi_fsub+0x10a>
 8000358:	e10d      	b.n	8000576 <__aeabi_fsub+0x326>
 800035a:	2fff      	cmp	r7, #255	; 0xff
 800035c:	d071      	beq.n	8000442 <__aeabi_fsub+0x1f2>
 800035e:	001f      	movs	r7, r3
 8000360:	e098      	b.n	8000494 <__aeabi_fsub+0x244>
 8000362:	2e00      	cmp	r6, #0
 8000364:	d100      	bne.n	8000368 <__aeabi_fsub+0x118>
 8000366:	e0a7      	b.n	80004b8 <__aeabi_fsub+0x268>
 8000368:	1e42      	subs	r2, r0, #1
 800036a:	2801      	cmp	r0, #1
 800036c:	d100      	bne.n	8000370 <__aeabi_fsub+0x120>
 800036e:	e0e6      	b.n	800053e <__aeabi_fsub+0x2ee>
 8000370:	28ff      	cmp	r0, #255	; 0xff
 8000372:	d068      	beq.n	8000446 <__aeabi_fsub+0x1f6>
 8000374:	0010      	movs	r0, r2
 8000376:	e78f      	b.n	8000298 <__aeabi_fsub+0x48>
 8000378:	2001      	movs	r0, #1
 800037a:	4041      	eors	r1, r0
 800037c:	42a1      	cmp	r1, r4
 800037e:	d000      	beq.n	8000382 <__aeabi_fsub+0x132>
 8000380:	e77f      	b.n	8000282 <__aeabi_fsub+0x32>
 8000382:	20ff      	movs	r0, #255	; 0xff
 8000384:	4240      	negs	r0, r0
 8000386:	4680      	mov	r8, r0
 8000388:	44a8      	add	r8, r5
 800038a:	4640      	mov	r0, r8
 800038c:	2800      	cmp	r0, #0
 800038e:	d038      	beq.n	8000402 <__aeabi_fsub+0x1b2>
 8000390:	1b51      	subs	r1, r2, r5
 8000392:	2d00      	cmp	r5, #0
 8000394:	d100      	bne.n	8000398 <__aeabi_fsub+0x148>
 8000396:	e0ae      	b.n	80004f6 <__aeabi_fsub+0x2a6>
 8000398:	2aff      	cmp	r2, #255	; 0xff
 800039a:	d100      	bne.n	800039e <__aeabi_fsub+0x14e>
 800039c:	e0df      	b.n	800055e <__aeabi_fsub+0x30e>
 800039e:	2380      	movs	r3, #128	; 0x80
 80003a0:	4660      	mov	r0, ip
 80003a2:	04db      	lsls	r3, r3, #19
 80003a4:	4318      	orrs	r0, r3
 80003a6:	4684      	mov	ip, r0
 80003a8:	291b      	cmp	r1, #27
 80003aa:	dc00      	bgt.n	80003ae <__aeabi_fsub+0x15e>
 80003ac:	e0d9      	b.n	8000562 <__aeabi_fsub+0x312>
 80003ae:	2001      	movs	r0, #1
 80003b0:	0015      	movs	r5, r2
 80003b2:	1980      	adds	r0, r0, r6
 80003b4:	e7b1      	b.n	800031a <__aeabi_fsub+0xca>
 80003b6:	20fe      	movs	r0, #254	; 0xfe
 80003b8:	1c6a      	adds	r2, r5, #1
 80003ba:	4210      	tst	r0, r2
 80003bc:	d171      	bne.n	80004a2 <__aeabi_fsub+0x252>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d000      	beq.n	80003c4 <__aeabi_fsub+0x174>
 80003c2:	e0a6      	b.n	8000512 <__aeabi_fsub+0x2c2>
 80003c4:	4663      	mov	r3, ip
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d100      	bne.n	80003cc <__aeabi_fsub+0x17c>
 80003ca:	e0d9      	b.n	8000580 <__aeabi_fsub+0x330>
 80003cc:	2200      	movs	r2, #0
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d100      	bne.n	80003d4 <__aeabi_fsub+0x184>
 80003d2:	e788      	b.n	80002e6 <__aeabi_fsub+0x96>
 80003d4:	1b98      	subs	r0, r3, r6
 80003d6:	0143      	lsls	r3, r0, #5
 80003d8:	d400      	bmi.n	80003dc <__aeabi_fsub+0x18c>
 80003da:	e0e1      	b.n	80005a0 <__aeabi_fsub+0x350>
 80003dc:	4663      	mov	r3, ip
 80003de:	000c      	movs	r4, r1
 80003e0:	1af0      	subs	r0, r6, r3
 80003e2:	e76f      	b.n	80002c4 <__aeabi_fsub+0x74>
 80003e4:	2e00      	cmp	r6, #0
 80003e6:	d100      	bne.n	80003ea <__aeabi_fsub+0x19a>
 80003e8:	e0b7      	b.n	800055a <__aeabi_fsub+0x30a>
 80003ea:	0002      	movs	r2, r0
 80003ec:	3a01      	subs	r2, #1
 80003ee:	2801      	cmp	r0, #1
 80003f0:	d100      	bne.n	80003f4 <__aeabi_fsub+0x1a4>
 80003f2:	e09c      	b.n	800052e <__aeabi_fsub+0x2de>
 80003f4:	28ff      	cmp	r0, #255	; 0xff
 80003f6:	d026      	beq.n	8000446 <__aeabi_fsub+0x1f6>
 80003f8:	4690      	mov	r8, r2
 80003fa:	e788      	b.n	800030e <__aeabi_fsub+0xbe>
 80003fc:	22ff      	movs	r2, #255	; 0xff
 80003fe:	2700      	movs	r7, #0
 8000400:	e771      	b.n	80002e6 <__aeabi_fsub+0x96>
 8000402:	20fe      	movs	r0, #254	; 0xfe
 8000404:	1c6a      	adds	r2, r5, #1
 8000406:	4210      	tst	r0, r2
 8000408:	d064      	beq.n	80004d4 <__aeabi_fsub+0x284>
 800040a:	2aff      	cmp	r2, #255	; 0xff
 800040c:	d0f6      	beq.n	80003fc <__aeabi_fsub+0x1ac>
 800040e:	0015      	movs	r5, r2
 8000410:	4466      	add	r6, ip
 8000412:	0870      	lsrs	r0, r6, #1
 8000414:	0743      	lsls	r3, r0, #29
 8000416:	d000      	beq.n	800041a <__aeabi_fsub+0x1ca>
 8000418:	e756      	b.n	80002c8 <__aeabi_fsub+0x78>
 800041a:	08c3      	lsrs	r3, r0, #3
 800041c:	2dff      	cmp	r5, #255	; 0xff
 800041e:	d012      	beq.n	8000446 <__aeabi_fsub+0x1f6>
 8000420:	025b      	lsls	r3, r3, #9
 8000422:	0a5f      	lsrs	r7, r3, #9
 8000424:	b2ea      	uxtb	r2, r5
 8000426:	e75e      	b.n	80002e6 <__aeabi_fsub+0x96>
 8000428:	4662      	mov	r2, ip
 800042a:	2a00      	cmp	r2, #0
 800042c:	d100      	bne.n	8000430 <__aeabi_fsub+0x1e0>
 800042e:	e096      	b.n	800055e <__aeabi_fsub+0x30e>
 8000430:	2e00      	cmp	r6, #0
 8000432:	d008      	beq.n	8000446 <__aeabi_fsub+0x1f6>
 8000434:	2280      	movs	r2, #128	; 0x80
 8000436:	03d2      	lsls	r2, r2, #15
 8000438:	4213      	tst	r3, r2
 800043a:	d004      	beq.n	8000446 <__aeabi_fsub+0x1f6>
 800043c:	4648      	mov	r0, r9
 800043e:	4210      	tst	r0, r2
 8000440:	d101      	bne.n	8000446 <__aeabi_fsub+0x1f6>
 8000442:	000c      	movs	r4, r1
 8000444:	464b      	mov	r3, r9
 8000446:	2b00      	cmp	r3, #0
 8000448:	d0d8      	beq.n	80003fc <__aeabi_fsub+0x1ac>
 800044a:	2780      	movs	r7, #128	; 0x80
 800044c:	03ff      	lsls	r7, r7, #15
 800044e:	431f      	orrs	r7, r3
 8000450:	027f      	lsls	r7, r7, #9
 8000452:	22ff      	movs	r2, #255	; 0xff
 8000454:	0a7f      	lsrs	r7, r7, #9
 8000456:	e746      	b.n	80002e6 <__aeabi_fsub+0x96>
 8000458:	2320      	movs	r3, #32
 800045a:	003a      	movs	r2, r7
 800045c:	1b45      	subs	r5, r0, r5
 800045e:	0038      	movs	r0, r7
 8000460:	3501      	adds	r5, #1
 8000462:	40ea      	lsrs	r2, r5
 8000464:	1b5d      	subs	r5, r3, r5
 8000466:	40a8      	lsls	r0, r5
 8000468:	1e43      	subs	r3, r0, #1
 800046a:	4198      	sbcs	r0, r3
 800046c:	2500      	movs	r5, #0
 800046e:	4310      	orrs	r0, r2
 8000470:	e728      	b.n	80002c4 <__aeabi_fsub+0x74>
 8000472:	2320      	movs	r3, #32
 8000474:	1a1b      	subs	r3, r3, r0
 8000476:	0032      	movs	r2, r6
 8000478:	409e      	lsls	r6, r3
 800047a:	40c2      	lsrs	r2, r0
 800047c:	0030      	movs	r0, r6
 800047e:	1e43      	subs	r3, r0, #1
 8000480:	4198      	sbcs	r0, r3
 8000482:	4310      	orrs	r0, r2
 8000484:	e70c      	b.n	80002a0 <__aeabi_fsub+0x50>
 8000486:	2aff      	cmp	r2, #255	; 0xff
 8000488:	d0db      	beq.n	8000442 <__aeabi_fsub+0x1f2>
 800048a:	2380      	movs	r3, #128	; 0x80
 800048c:	4660      	mov	r0, ip
 800048e:	04db      	lsls	r3, r3, #19
 8000490:	4318      	orrs	r0, r3
 8000492:	4684      	mov	ip, r0
 8000494:	2f1b      	cmp	r7, #27
 8000496:	dd56      	ble.n	8000546 <__aeabi_fsub+0x2f6>
 8000498:	2001      	movs	r0, #1
 800049a:	000c      	movs	r4, r1
 800049c:	0015      	movs	r5, r2
 800049e:	1a30      	subs	r0, r6, r0
 80004a0:	e700      	b.n	80002a4 <__aeabi_fsub+0x54>
 80004a2:	4663      	mov	r3, ip
 80004a4:	1b9f      	subs	r7, r3, r6
 80004a6:	017b      	lsls	r3, r7, #5
 80004a8:	d43d      	bmi.n	8000526 <__aeabi_fsub+0x2d6>
 80004aa:	2f00      	cmp	r7, #0
 80004ac:	d000      	beq.n	80004b0 <__aeabi_fsub+0x260>
 80004ae:	e6fe      	b.n	80002ae <__aeabi_fsub+0x5e>
 80004b0:	2400      	movs	r4, #0
 80004b2:	2200      	movs	r2, #0
 80004b4:	2700      	movs	r7, #0
 80004b6:	e716      	b.n	80002e6 <__aeabi_fsub+0x96>
 80004b8:	0005      	movs	r5, r0
 80004ba:	e7af      	b.n	800041c <__aeabi_fsub+0x1cc>
 80004bc:	0032      	movs	r2, r6
 80004be:	4643      	mov	r3, r8
 80004c0:	4641      	mov	r1, r8
 80004c2:	40da      	lsrs	r2, r3
 80004c4:	2320      	movs	r3, #32
 80004c6:	1a5b      	subs	r3, r3, r1
 80004c8:	409e      	lsls	r6, r3
 80004ca:	0030      	movs	r0, r6
 80004cc:	1e43      	subs	r3, r0, #1
 80004ce:	4198      	sbcs	r0, r3
 80004d0:	4310      	orrs	r0, r2
 80004d2:	e721      	b.n	8000318 <__aeabi_fsub+0xc8>
 80004d4:	2d00      	cmp	r5, #0
 80004d6:	d1a7      	bne.n	8000428 <__aeabi_fsub+0x1d8>
 80004d8:	4663      	mov	r3, ip
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d059      	beq.n	8000592 <__aeabi_fsub+0x342>
 80004de:	2200      	movs	r2, #0
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d100      	bne.n	80004e6 <__aeabi_fsub+0x296>
 80004e4:	e6ff      	b.n	80002e6 <__aeabi_fsub+0x96>
 80004e6:	0030      	movs	r0, r6
 80004e8:	4460      	add	r0, ip
 80004ea:	0143      	lsls	r3, r0, #5
 80004ec:	d592      	bpl.n	8000414 <__aeabi_fsub+0x1c4>
 80004ee:	4b2a      	ldr	r3, [pc, #168]	; (8000598 <__aeabi_fsub+0x348>)
 80004f0:	3501      	adds	r5, #1
 80004f2:	4018      	ands	r0, r3
 80004f4:	e78e      	b.n	8000414 <__aeabi_fsub+0x1c4>
 80004f6:	4663      	mov	r3, ip
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d047      	beq.n	800058c <__aeabi_fsub+0x33c>
 80004fc:	1e4b      	subs	r3, r1, #1
 80004fe:	2901      	cmp	r1, #1
 8000500:	d015      	beq.n	800052e <__aeabi_fsub+0x2de>
 8000502:	29ff      	cmp	r1, #255	; 0xff
 8000504:	d02b      	beq.n	800055e <__aeabi_fsub+0x30e>
 8000506:	0019      	movs	r1, r3
 8000508:	e74e      	b.n	80003a8 <__aeabi_fsub+0x158>
 800050a:	000c      	movs	r4, r1
 800050c:	464b      	mov	r3, r9
 800050e:	003d      	movs	r5, r7
 8000510:	e784      	b.n	800041c <__aeabi_fsub+0x1cc>
 8000512:	4662      	mov	r2, ip
 8000514:	2a00      	cmp	r2, #0
 8000516:	d18b      	bne.n	8000430 <__aeabi_fsub+0x1e0>
 8000518:	2e00      	cmp	r6, #0
 800051a:	d192      	bne.n	8000442 <__aeabi_fsub+0x1f2>
 800051c:	2780      	movs	r7, #128	; 0x80
 800051e:	2400      	movs	r4, #0
 8000520:	22ff      	movs	r2, #255	; 0xff
 8000522:	03ff      	lsls	r7, r7, #15
 8000524:	e6df      	b.n	80002e6 <__aeabi_fsub+0x96>
 8000526:	4663      	mov	r3, ip
 8000528:	000c      	movs	r4, r1
 800052a:	1af7      	subs	r7, r6, r3
 800052c:	e6bf      	b.n	80002ae <__aeabi_fsub+0x5e>
 800052e:	0030      	movs	r0, r6
 8000530:	4460      	add	r0, ip
 8000532:	2501      	movs	r5, #1
 8000534:	0143      	lsls	r3, r0, #5
 8000536:	d400      	bmi.n	800053a <__aeabi_fsub+0x2ea>
 8000538:	e76c      	b.n	8000414 <__aeabi_fsub+0x1c4>
 800053a:	2502      	movs	r5, #2
 800053c:	e6f2      	b.n	8000324 <__aeabi_fsub+0xd4>
 800053e:	4663      	mov	r3, ip
 8000540:	2501      	movs	r5, #1
 8000542:	1b98      	subs	r0, r3, r6
 8000544:	e6ae      	b.n	80002a4 <__aeabi_fsub+0x54>
 8000546:	2320      	movs	r3, #32
 8000548:	4664      	mov	r4, ip
 800054a:	4660      	mov	r0, ip
 800054c:	40fc      	lsrs	r4, r7
 800054e:	1bdf      	subs	r7, r3, r7
 8000550:	40b8      	lsls	r0, r7
 8000552:	1e43      	subs	r3, r0, #1
 8000554:	4198      	sbcs	r0, r3
 8000556:	4320      	orrs	r0, r4
 8000558:	e79f      	b.n	800049a <__aeabi_fsub+0x24a>
 800055a:	0005      	movs	r5, r0
 800055c:	e75e      	b.n	800041c <__aeabi_fsub+0x1cc>
 800055e:	464b      	mov	r3, r9
 8000560:	e771      	b.n	8000446 <__aeabi_fsub+0x1f6>
 8000562:	2320      	movs	r3, #32
 8000564:	4665      	mov	r5, ip
 8000566:	4660      	mov	r0, ip
 8000568:	40cd      	lsrs	r5, r1
 800056a:	1a59      	subs	r1, r3, r1
 800056c:	4088      	lsls	r0, r1
 800056e:	1e43      	subs	r3, r0, #1
 8000570:	4198      	sbcs	r0, r3
 8000572:	4328      	orrs	r0, r5
 8000574:	e71c      	b.n	80003b0 <__aeabi_fsub+0x160>
 8000576:	4663      	mov	r3, ip
 8000578:	000c      	movs	r4, r1
 800057a:	2501      	movs	r5, #1
 800057c:	1af0      	subs	r0, r6, r3
 800057e:	e691      	b.n	80002a4 <__aeabi_fsub+0x54>
 8000580:	2e00      	cmp	r6, #0
 8000582:	d095      	beq.n	80004b0 <__aeabi_fsub+0x260>
 8000584:	000c      	movs	r4, r1
 8000586:	464f      	mov	r7, r9
 8000588:	2200      	movs	r2, #0
 800058a:	e6ac      	b.n	80002e6 <__aeabi_fsub+0x96>
 800058c:	464b      	mov	r3, r9
 800058e:	000d      	movs	r5, r1
 8000590:	e744      	b.n	800041c <__aeabi_fsub+0x1cc>
 8000592:	464f      	mov	r7, r9
 8000594:	2200      	movs	r2, #0
 8000596:	e6a6      	b.n	80002e6 <__aeabi_fsub+0x96>
 8000598:	fbffffff 	.word	0xfbffffff
 800059c:	7dffffff 	.word	0x7dffffff
 80005a0:	2800      	cmp	r0, #0
 80005a2:	d000      	beq.n	80005a6 <__aeabi_fsub+0x356>
 80005a4:	e736      	b.n	8000414 <__aeabi_fsub+0x1c4>
 80005a6:	2400      	movs	r4, #0
 80005a8:	2700      	movs	r7, #0
 80005aa:	e69c      	b.n	80002e6 <__aeabi_fsub+0x96>

080005ac <__aeabi_f2iz>:
 80005ac:	0241      	lsls	r1, r0, #9
 80005ae:	0042      	lsls	r2, r0, #1
 80005b0:	0fc3      	lsrs	r3, r0, #31
 80005b2:	0a49      	lsrs	r1, r1, #9
 80005b4:	2000      	movs	r0, #0
 80005b6:	0e12      	lsrs	r2, r2, #24
 80005b8:	2a7e      	cmp	r2, #126	; 0x7e
 80005ba:	dd03      	ble.n	80005c4 <__aeabi_f2iz+0x18>
 80005bc:	2a9d      	cmp	r2, #157	; 0x9d
 80005be:	dd02      	ble.n	80005c6 <__aeabi_f2iz+0x1a>
 80005c0:	4a09      	ldr	r2, [pc, #36]	; (80005e8 <__aeabi_f2iz+0x3c>)
 80005c2:	1898      	adds	r0, r3, r2
 80005c4:	4770      	bx	lr
 80005c6:	2080      	movs	r0, #128	; 0x80
 80005c8:	0400      	lsls	r0, r0, #16
 80005ca:	4301      	orrs	r1, r0
 80005cc:	2a95      	cmp	r2, #149	; 0x95
 80005ce:	dc07      	bgt.n	80005e0 <__aeabi_f2iz+0x34>
 80005d0:	2096      	movs	r0, #150	; 0x96
 80005d2:	1a82      	subs	r2, r0, r2
 80005d4:	40d1      	lsrs	r1, r2
 80005d6:	4248      	negs	r0, r1
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d1f3      	bne.n	80005c4 <__aeabi_f2iz+0x18>
 80005dc:	0008      	movs	r0, r1
 80005de:	e7f1      	b.n	80005c4 <__aeabi_f2iz+0x18>
 80005e0:	3a96      	subs	r2, #150	; 0x96
 80005e2:	4091      	lsls	r1, r2
 80005e4:	e7f7      	b.n	80005d6 <__aeabi_f2iz+0x2a>
 80005e6:	46c0      	nop			; (mov r8, r8)
 80005e8:	7fffffff 	.word	0x7fffffff

080005ec <__aeabi_cfrcmple>:
 80005ec:	4684      	mov	ip, r0
 80005ee:	0008      	movs	r0, r1
 80005f0:	4661      	mov	r1, ip
 80005f2:	e7ff      	b.n	80005f4 <__aeabi_cfcmpeq>

080005f4 <__aeabi_cfcmpeq>:
 80005f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80005f6:	f000 f8bd 	bl	8000774 <__lesf2>
 80005fa:	2800      	cmp	r0, #0
 80005fc:	d401      	bmi.n	8000602 <__aeabi_cfcmpeq+0xe>
 80005fe:	2100      	movs	r1, #0
 8000600:	42c8      	cmn	r0, r1
 8000602:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000604 <__aeabi_fcmpeq>:
 8000604:	b510      	push	{r4, lr}
 8000606:	f000 f849 	bl	800069c <__eqsf2>
 800060a:	4240      	negs	r0, r0
 800060c:	3001      	adds	r0, #1
 800060e:	bd10      	pop	{r4, pc}

08000610 <__aeabi_fcmplt>:
 8000610:	b510      	push	{r4, lr}
 8000612:	f000 f8af 	bl	8000774 <__lesf2>
 8000616:	2800      	cmp	r0, #0
 8000618:	db01      	blt.n	800061e <__aeabi_fcmplt+0xe>
 800061a:	2000      	movs	r0, #0
 800061c:	bd10      	pop	{r4, pc}
 800061e:	2001      	movs	r0, #1
 8000620:	bd10      	pop	{r4, pc}
 8000622:	46c0      	nop			; (mov r8, r8)

08000624 <__aeabi_fcmple>:
 8000624:	b510      	push	{r4, lr}
 8000626:	f000 f8a5 	bl	8000774 <__lesf2>
 800062a:	2800      	cmp	r0, #0
 800062c:	dd01      	ble.n	8000632 <__aeabi_fcmple+0xe>
 800062e:	2000      	movs	r0, #0
 8000630:	bd10      	pop	{r4, pc}
 8000632:	2001      	movs	r0, #1
 8000634:	bd10      	pop	{r4, pc}
 8000636:	46c0      	nop			; (mov r8, r8)

08000638 <__aeabi_fcmpgt>:
 8000638:	b510      	push	{r4, lr}
 800063a:	f000 f855 	bl	80006e8 <__gesf2>
 800063e:	2800      	cmp	r0, #0
 8000640:	dc01      	bgt.n	8000646 <__aeabi_fcmpgt+0xe>
 8000642:	2000      	movs	r0, #0
 8000644:	bd10      	pop	{r4, pc}
 8000646:	2001      	movs	r0, #1
 8000648:	bd10      	pop	{r4, pc}
 800064a:	46c0      	nop			; (mov r8, r8)

0800064c <__aeabi_fcmpge>:
 800064c:	b510      	push	{r4, lr}
 800064e:	f000 f84b 	bl	80006e8 <__gesf2>
 8000652:	2800      	cmp	r0, #0
 8000654:	da01      	bge.n	800065a <__aeabi_fcmpge+0xe>
 8000656:	2000      	movs	r0, #0
 8000658:	bd10      	pop	{r4, pc}
 800065a:	2001      	movs	r0, #1
 800065c:	bd10      	pop	{r4, pc}
 800065e:	46c0      	nop			; (mov r8, r8)

08000660 <__clzsi2>:
 8000660:	211c      	movs	r1, #28
 8000662:	2301      	movs	r3, #1
 8000664:	041b      	lsls	r3, r3, #16
 8000666:	4298      	cmp	r0, r3
 8000668:	d301      	bcc.n	800066e <__clzsi2+0xe>
 800066a:	0c00      	lsrs	r0, r0, #16
 800066c:	3910      	subs	r1, #16
 800066e:	0a1b      	lsrs	r3, r3, #8
 8000670:	4298      	cmp	r0, r3
 8000672:	d301      	bcc.n	8000678 <__clzsi2+0x18>
 8000674:	0a00      	lsrs	r0, r0, #8
 8000676:	3908      	subs	r1, #8
 8000678:	091b      	lsrs	r3, r3, #4
 800067a:	4298      	cmp	r0, r3
 800067c:	d301      	bcc.n	8000682 <__clzsi2+0x22>
 800067e:	0900      	lsrs	r0, r0, #4
 8000680:	3904      	subs	r1, #4
 8000682:	a202      	add	r2, pc, #8	; (adr r2, 800068c <__clzsi2+0x2c>)
 8000684:	5c10      	ldrb	r0, [r2, r0]
 8000686:	1840      	adds	r0, r0, r1
 8000688:	4770      	bx	lr
 800068a:	46c0      	nop			; (mov r8, r8)
 800068c:	02020304 	.word	0x02020304
 8000690:	01010101 	.word	0x01010101
	...

0800069c <__eqsf2>:
 800069c:	b570      	push	{r4, r5, r6, lr}
 800069e:	0042      	lsls	r2, r0, #1
 80006a0:	0245      	lsls	r5, r0, #9
 80006a2:	024e      	lsls	r6, r1, #9
 80006a4:	004c      	lsls	r4, r1, #1
 80006a6:	0fc3      	lsrs	r3, r0, #31
 80006a8:	0a6d      	lsrs	r5, r5, #9
 80006aa:	2001      	movs	r0, #1
 80006ac:	0e12      	lsrs	r2, r2, #24
 80006ae:	0a76      	lsrs	r6, r6, #9
 80006b0:	0e24      	lsrs	r4, r4, #24
 80006b2:	0fc9      	lsrs	r1, r1, #31
 80006b4:	2aff      	cmp	r2, #255	; 0xff
 80006b6:	d006      	beq.n	80006c6 <__eqsf2+0x2a>
 80006b8:	2cff      	cmp	r4, #255	; 0xff
 80006ba:	d003      	beq.n	80006c4 <__eqsf2+0x28>
 80006bc:	42a2      	cmp	r2, r4
 80006be:	d101      	bne.n	80006c4 <__eqsf2+0x28>
 80006c0:	42b5      	cmp	r5, r6
 80006c2:	d006      	beq.n	80006d2 <__eqsf2+0x36>
 80006c4:	bd70      	pop	{r4, r5, r6, pc}
 80006c6:	2d00      	cmp	r5, #0
 80006c8:	d1fc      	bne.n	80006c4 <__eqsf2+0x28>
 80006ca:	2cff      	cmp	r4, #255	; 0xff
 80006cc:	d1fa      	bne.n	80006c4 <__eqsf2+0x28>
 80006ce:	2e00      	cmp	r6, #0
 80006d0:	d1f8      	bne.n	80006c4 <__eqsf2+0x28>
 80006d2:	428b      	cmp	r3, r1
 80006d4:	d006      	beq.n	80006e4 <__eqsf2+0x48>
 80006d6:	2001      	movs	r0, #1
 80006d8:	2a00      	cmp	r2, #0
 80006da:	d1f3      	bne.n	80006c4 <__eqsf2+0x28>
 80006dc:	0028      	movs	r0, r5
 80006de:	1e43      	subs	r3, r0, #1
 80006e0:	4198      	sbcs	r0, r3
 80006e2:	e7ef      	b.n	80006c4 <__eqsf2+0x28>
 80006e4:	2000      	movs	r0, #0
 80006e6:	e7ed      	b.n	80006c4 <__eqsf2+0x28>

080006e8 <__gesf2>:
 80006e8:	b570      	push	{r4, r5, r6, lr}
 80006ea:	0042      	lsls	r2, r0, #1
 80006ec:	0245      	lsls	r5, r0, #9
 80006ee:	024e      	lsls	r6, r1, #9
 80006f0:	004c      	lsls	r4, r1, #1
 80006f2:	0fc3      	lsrs	r3, r0, #31
 80006f4:	0a6d      	lsrs	r5, r5, #9
 80006f6:	0e12      	lsrs	r2, r2, #24
 80006f8:	0a76      	lsrs	r6, r6, #9
 80006fa:	0e24      	lsrs	r4, r4, #24
 80006fc:	0fc8      	lsrs	r0, r1, #31
 80006fe:	2aff      	cmp	r2, #255	; 0xff
 8000700:	d01b      	beq.n	800073a <__gesf2+0x52>
 8000702:	2cff      	cmp	r4, #255	; 0xff
 8000704:	d00e      	beq.n	8000724 <__gesf2+0x3c>
 8000706:	2a00      	cmp	r2, #0
 8000708:	d11b      	bne.n	8000742 <__gesf2+0x5a>
 800070a:	2c00      	cmp	r4, #0
 800070c:	d101      	bne.n	8000712 <__gesf2+0x2a>
 800070e:	2e00      	cmp	r6, #0
 8000710:	d01c      	beq.n	800074c <__gesf2+0x64>
 8000712:	2d00      	cmp	r5, #0
 8000714:	d00c      	beq.n	8000730 <__gesf2+0x48>
 8000716:	4283      	cmp	r3, r0
 8000718:	d01c      	beq.n	8000754 <__gesf2+0x6c>
 800071a:	2102      	movs	r1, #2
 800071c:	1e58      	subs	r0, r3, #1
 800071e:	4008      	ands	r0, r1
 8000720:	3801      	subs	r0, #1
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	2e00      	cmp	r6, #0
 8000726:	d122      	bne.n	800076e <__gesf2+0x86>
 8000728:	2a00      	cmp	r2, #0
 800072a:	d1f4      	bne.n	8000716 <__gesf2+0x2e>
 800072c:	2d00      	cmp	r5, #0
 800072e:	d1f2      	bne.n	8000716 <__gesf2+0x2e>
 8000730:	2800      	cmp	r0, #0
 8000732:	d1f6      	bne.n	8000722 <__gesf2+0x3a>
 8000734:	2001      	movs	r0, #1
 8000736:	4240      	negs	r0, r0
 8000738:	e7f3      	b.n	8000722 <__gesf2+0x3a>
 800073a:	2d00      	cmp	r5, #0
 800073c:	d117      	bne.n	800076e <__gesf2+0x86>
 800073e:	2cff      	cmp	r4, #255	; 0xff
 8000740:	d0f0      	beq.n	8000724 <__gesf2+0x3c>
 8000742:	2c00      	cmp	r4, #0
 8000744:	d1e7      	bne.n	8000716 <__gesf2+0x2e>
 8000746:	2e00      	cmp	r6, #0
 8000748:	d1e5      	bne.n	8000716 <__gesf2+0x2e>
 800074a:	e7e6      	b.n	800071a <__gesf2+0x32>
 800074c:	2000      	movs	r0, #0
 800074e:	2d00      	cmp	r5, #0
 8000750:	d0e7      	beq.n	8000722 <__gesf2+0x3a>
 8000752:	e7e2      	b.n	800071a <__gesf2+0x32>
 8000754:	42a2      	cmp	r2, r4
 8000756:	dc05      	bgt.n	8000764 <__gesf2+0x7c>
 8000758:	dbea      	blt.n	8000730 <__gesf2+0x48>
 800075a:	42b5      	cmp	r5, r6
 800075c:	d802      	bhi.n	8000764 <__gesf2+0x7c>
 800075e:	d3e7      	bcc.n	8000730 <__gesf2+0x48>
 8000760:	2000      	movs	r0, #0
 8000762:	e7de      	b.n	8000722 <__gesf2+0x3a>
 8000764:	4243      	negs	r3, r0
 8000766:	4158      	adcs	r0, r3
 8000768:	0040      	lsls	r0, r0, #1
 800076a:	3801      	subs	r0, #1
 800076c:	e7d9      	b.n	8000722 <__gesf2+0x3a>
 800076e:	2002      	movs	r0, #2
 8000770:	4240      	negs	r0, r0
 8000772:	e7d6      	b.n	8000722 <__gesf2+0x3a>

08000774 <__lesf2>:
 8000774:	b570      	push	{r4, r5, r6, lr}
 8000776:	0042      	lsls	r2, r0, #1
 8000778:	0245      	lsls	r5, r0, #9
 800077a:	024e      	lsls	r6, r1, #9
 800077c:	004c      	lsls	r4, r1, #1
 800077e:	0fc3      	lsrs	r3, r0, #31
 8000780:	0a6d      	lsrs	r5, r5, #9
 8000782:	0e12      	lsrs	r2, r2, #24
 8000784:	0a76      	lsrs	r6, r6, #9
 8000786:	0e24      	lsrs	r4, r4, #24
 8000788:	0fc8      	lsrs	r0, r1, #31
 800078a:	2aff      	cmp	r2, #255	; 0xff
 800078c:	d00b      	beq.n	80007a6 <__lesf2+0x32>
 800078e:	2cff      	cmp	r4, #255	; 0xff
 8000790:	d00d      	beq.n	80007ae <__lesf2+0x3a>
 8000792:	2a00      	cmp	r2, #0
 8000794:	d11f      	bne.n	80007d6 <__lesf2+0x62>
 8000796:	2c00      	cmp	r4, #0
 8000798:	d116      	bne.n	80007c8 <__lesf2+0x54>
 800079a:	2e00      	cmp	r6, #0
 800079c:	d114      	bne.n	80007c8 <__lesf2+0x54>
 800079e:	2000      	movs	r0, #0
 80007a0:	2d00      	cmp	r5, #0
 80007a2:	d010      	beq.n	80007c6 <__lesf2+0x52>
 80007a4:	e009      	b.n	80007ba <__lesf2+0x46>
 80007a6:	2d00      	cmp	r5, #0
 80007a8:	d10c      	bne.n	80007c4 <__lesf2+0x50>
 80007aa:	2cff      	cmp	r4, #255	; 0xff
 80007ac:	d113      	bne.n	80007d6 <__lesf2+0x62>
 80007ae:	2e00      	cmp	r6, #0
 80007b0:	d108      	bne.n	80007c4 <__lesf2+0x50>
 80007b2:	2a00      	cmp	r2, #0
 80007b4:	d008      	beq.n	80007c8 <__lesf2+0x54>
 80007b6:	4283      	cmp	r3, r0
 80007b8:	d012      	beq.n	80007e0 <__lesf2+0x6c>
 80007ba:	2102      	movs	r1, #2
 80007bc:	1e58      	subs	r0, r3, #1
 80007be:	4008      	ands	r0, r1
 80007c0:	3801      	subs	r0, #1
 80007c2:	e000      	b.n	80007c6 <__lesf2+0x52>
 80007c4:	2002      	movs	r0, #2
 80007c6:	bd70      	pop	{r4, r5, r6, pc}
 80007c8:	2d00      	cmp	r5, #0
 80007ca:	d1f4      	bne.n	80007b6 <__lesf2+0x42>
 80007cc:	2800      	cmp	r0, #0
 80007ce:	d1fa      	bne.n	80007c6 <__lesf2+0x52>
 80007d0:	2001      	movs	r0, #1
 80007d2:	4240      	negs	r0, r0
 80007d4:	e7f7      	b.n	80007c6 <__lesf2+0x52>
 80007d6:	2c00      	cmp	r4, #0
 80007d8:	d1ed      	bne.n	80007b6 <__lesf2+0x42>
 80007da:	2e00      	cmp	r6, #0
 80007dc:	d1eb      	bne.n	80007b6 <__lesf2+0x42>
 80007de:	e7ec      	b.n	80007ba <__lesf2+0x46>
 80007e0:	42a2      	cmp	r2, r4
 80007e2:	dc05      	bgt.n	80007f0 <__lesf2+0x7c>
 80007e4:	dbf2      	blt.n	80007cc <__lesf2+0x58>
 80007e6:	42b5      	cmp	r5, r6
 80007e8:	d802      	bhi.n	80007f0 <__lesf2+0x7c>
 80007ea:	d3ef      	bcc.n	80007cc <__lesf2+0x58>
 80007ec:	2000      	movs	r0, #0
 80007ee:	e7ea      	b.n	80007c6 <__lesf2+0x52>
 80007f0:	4243      	negs	r3, r0
 80007f2:	4158      	adcs	r0, r3
 80007f4:	0040      	lsls	r0, r0, #1
 80007f6:	3801      	subs	r0, #1
 80007f8:	e7e5      	b.n	80007c6 <__lesf2+0x52>
 80007fa:	46c0      	nop			; (mov r8, r8)

080007fc <HAL_UART_RxCpltCallback>:
uint8_t action = 0x00;
uint8_t amount = 0x00;
uint8_t command_flag = 0x00;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  action = RXbuffer[ACTION_INDEX];
 8000804:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <HAL_UART_RxCpltCallback+0x48>)
 8000806:	781a      	ldrb	r2, [r3, #0]
 8000808:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <HAL_UART_RxCpltCallback+0x4c>)
 800080a:	701a      	strb	r2, [r3, #0]
  amount = RXbuffer[AMOUNT_INDEX];
 800080c:	4b0d      	ldr	r3, [pc, #52]	; (8000844 <HAL_UART_RxCpltCallback+0x48>)
 800080e:	785a      	ldrb	r2, [r3, #1]
 8000810:	4b0e      	ldr	r3, [pc, #56]	; (800084c <HAL_UART_RxCpltCallback+0x50>)
 8000812:	701a      	strb	r2, [r3, #0]
  uint8_t local_action = action;
 8000814:	230f      	movs	r3, #15
 8000816:	18fb      	adds	r3, r7, r3
 8000818:	4a0b      	ldr	r2, [pc, #44]	; (8000848 <HAL_UART_RxCpltCallback+0x4c>)
 800081a:	7812      	ldrb	r2, [r2, #0]
 800081c:	701a      	strb	r2, [r3, #0]
  uint8_t local_amount = amount;
 800081e:	230e      	movs	r3, #14
 8000820:	18fb      	adds	r3, r7, r3
 8000822:	4a0a      	ldr	r2, [pc, #40]	; (800084c <HAL_UART_RxCpltCallback+0x50>)
 8000824:	7812      	ldrb	r2, [r2, #0]
 8000826:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(Command_Pin_GPIO_Port, Command_Pin_Pin, GPIO_PIN_SET);
 8000828:	2390      	movs	r3, #144	; 0x90
 800082a:	05db      	lsls	r3, r3, #23
 800082c:	2201      	movs	r2, #1
 800082e:	2110      	movs	r1, #16
 8000830:	0018      	movs	r0, r3
 8000832:	f000 ff2d 	bl	8001690 <HAL_GPIO_WritePin>
  command_flag = 0x01;
 8000836:	4b06      	ldr	r3, [pc, #24]	; (8000850 <HAL_UART_RxCpltCallback+0x54>)
 8000838:	2201      	movs	r2, #1
 800083a:	701a      	strb	r2, [r3, #0]
}
 800083c:	46c0      	nop			; (mov r8, r8)
 800083e:	46bd      	mov	sp, r7
 8000840:	b004      	add	sp, #16
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20000128 	.word	0x20000128
 8000848:	2000012a 	.word	0x2000012a
 800084c:	2000012b 	.word	0x2000012b
 8000850:	2000012c 	.word	0x2000012c

08000854 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000854:	b5b0      	push	{r4, r5, r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000858:	f000 fbc6 	bl	8000fe8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800085c:	f000 f8ee 	bl	8000a3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000860:	f000 fa12 	bl	8000c88 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000864:	f000 f94c 	bl	8000b00 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000868:	f000 f9de 	bl	8000c28 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 800086c:	4b6a      	ldr	r3, [pc, #424]	; (8000a18 <main+0x1c4>)
 800086e:	0018      	movs	r0, r3
 8000870:	f001 fcb8 	bl	80021e4 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);
 8000874:	4b68      	ldr	r3, [pc, #416]	; (8000a18 <main+0x1c4>)
 8000876:	2104      	movs	r1, #4
 8000878:	0018      	movs	r0, r3
 800087a:	f001 fd55 	bl	8002328 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_3);
 800087e:	4b66      	ldr	r3, [pc, #408]	; (8000a18 <main+0x1c4>)
 8000880:	2108      	movs	r1, #8
 8000882:	0018      	movs	r0, r3
 8000884:	f001 fd50 	bl	8002328 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 8000888:	4b63      	ldr	r3, [pc, #396]	; (8000a18 <main+0x1c4>)
 800088a:	210c      	movs	r1, #12
 800088c:	0018      	movs	r0, r3
 800088e:	f001 fd4b 	bl	8002328 <HAL_TIM_PWM_Start>
  __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_2, toggle_pwms[0]);
 8000892:	4b62      	ldr	r3, [pc, #392]	; (8000a1c <main+0x1c8>)
 8000894:	681a      	ldr	r2, [r3, #0]
 8000896:	4b60      	ldr	r3, [pc, #384]	; (8000a18 <main+0x1c4>)
 8000898:	681c      	ldr	r4, [r3, #0]
 800089a:	1c10      	adds	r0, r2, #0
 800089c:	f7ff fcc0 	bl	8000220 <__aeabi_f2uiz>
 80008a0:	0003      	movs	r3, r0
 80008a2:	63a3      	str	r3, [r4, #56]	; 0x38
  __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, toggle_pwms[0]);
 80008a4:	4b5d      	ldr	r3, [pc, #372]	; (8000a1c <main+0x1c8>)
 80008a6:	681a      	ldr	r2, [r3, #0]
 80008a8:	4b5b      	ldr	r3, [pc, #364]	; (8000a18 <main+0x1c4>)
 80008aa:	681c      	ldr	r4, [r3, #0]
 80008ac:	1c10      	adds	r0, r2, #0
 80008ae:	f7ff fcb7 	bl	8000220 <__aeabi_f2uiz>
 80008b2:	0003      	movs	r3, r0
 80008b4:	63e3      	str	r3, [r4, #60]	; 0x3c
  __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4, toggle_pwms[0]);
 80008b6:	4b59      	ldr	r3, [pc, #356]	; (8000a1c <main+0x1c8>)
 80008b8:	681a      	ldr	r2, [r3, #0]
 80008ba:	4b57      	ldr	r3, [pc, #348]	; (8000a18 <main+0x1c4>)
 80008bc:	681c      	ldr	r4, [r3, #0]
 80008be:	1c10      	adds	r0, r2, #0
 80008c0:	f7ff fcae 	bl	8000220 <__aeabi_f2uiz>
 80008c4:	0003      	movs	r3, r0
 80008c6:	6423      	str	r3, [r4, #64]	; 0x40
  HAL_UART_Receive_IT(&huart1, RXbuffer, RXsize);
 80008c8:	4955      	ldr	r1, [pc, #340]	; (8000a20 <main+0x1cc>)
 80008ca:	4b56      	ldr	r3, [pc, #344]	; (8000a24 <main+0x1d0>)
 80008cc:	2202      	movs	r2, #2
 80008ce:	0018      	movs	r0, r3
 80008d0:	f002 fb68 	bl	8002fa4 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (command_flag != 0x00)
 80008d4:	4b54      	ldr	r3, [pc, #336]	; (8000a28 <main+0x1d4>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d0fb      	beq.n	80008d4 <main+0x80>
	  {
		  HAL_Delay(250);
 80008dc:	20fa      	movs	r0, #250	; 0xfa
 80008de:	f000 fbe7 	bl	80010b0 <HAL_Delay>
		  if (action >= 0x00 && action <= 0x03)
 80008e2:	4b52      	ldr	r3, [pc, #328]	; (8000a2c <main+0x1d8>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	2b03      	cmp	r3, #3
 80008e8:	d823      	bhi.n	8000932 <main+0xde>
			   * 0x00 = Slot 1 Chamber 1
			   * 0x01 = Slot 2 Chamber 2
			   * 0x02 = Slot 3 Chamber 3
			   * 0x03 = Slot 4 Chamber 4
			   */
			  __HAL_TIM_SetCompare(&htim2 , TIM_CHANNEL_2 , dispenser_a_pwms[action % 4]);
 80008ea:	4b50      	ldr	r3, [pc, #320]	; (8000a2c <main+0x1d8>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	001a      	movs	r2, r3
 80008f0:	2303      	movs	r3, #3
 80008f2:	401a      	ands	r2, r3
 80008f4:	4b4e      	ldr	r3, [pc, #312]	; (8000a30 <main+0x1dc>)
 80008f6:	0092      	lsls	r2, r2, #2
 80008f8:	58d2      	ldr	r2, [r2, r3]
 80008fa:	4b47      	ldr	r3, [pc, #284]	; (8000a18 <main+0x1c4>)
 80008fc:	681c      	ldr	r4, [r3, #0]
 80008fe:	1c10      	adds	r0, r2, #0
 8000900:	f7ff fc8e 	bl	8000220 <__aeabi_f2uiz>
 8000904:	0003      	movs	r3, r0
 8000906:	63a3      	str	r3, [r4, #56]	; 0x38
			  HAL_Delay(500 * amount);
 8000908:	4b4a      	ldr	r3, [pc, #296]	; (8000a34 <main+0x1e0>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	001a      	movs	r2, r3
 800090e:	0013      	movs	r3, r2
 8000910:	015b      	lsls	r3, r3, #5
 8000912:	1a9b      	subs	r3, r3, r2
 8000914:	009b      	lsls	r3, r3, #2
 8000916:	189b      	adds	r3, r3, r2
 8000918:	009b      	lsls	r3, r3, #2
 800091a:	0018      	movs	r0, r3
 800091c:	f000 fbc8 	bl	80010b0 <HAL_Delay>
			  __HAL_TIM_SetCompare(&htim2 , TIM_CHANNEL_2 , dispenser_a_pwms[pwm_size - 1]);
 8000920:	4b43      	ldr	r3, [pc, #268]	; (8000a30 <main+0x1dc>)
 8000922:	691a      	ldr	r2, [r3, #16]
 8000924:	4b3c      	ldr	r3, [pc, #240]	; (8000a18 <main+0x1c4>)
 8000926:	681c      	ldr	r4, [r3, #0]
 8000928:	1c10      	adds	r0, r2, #0
 800092a:	f7ff fc79 	bl	8000220 <__aeabi_f2uiz>
 800092e:	0003      	movs	r3, r0
 8000930:	63a3      	str	r3, [r4, #56]	; 0x38
		  }
		  if (action >= 0x04 && action <= 0x07)
 8000932:	4b3e      	ldr	r3, [pc, #248]	; (8000a2c <main+0x1d8>)
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	2b03      	cmp	r3, #3
 8000938:	d927      	bls.n	800098a <main+0x136>
 800093a:	4b3c      	ldr	r3, [pc, #240]	; (8000a2c <main+0x1d8>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	2b07      	cmp	r3, #7
 8000940:	d823      	bhi.n	800098a <main+0x136>
			   * 0x04 = Slot 1 Chamber 2
			   * 0x05 = Slot 2 Chamber 2
			   * 0x06 = Slot 3 Chamber 2
			   * 0x07 = Slot 4 Chamber 2
			   */
			  __HAL_TIM_SetCompare(&htim2 , TIM_CHANNEL_3 , dispenser_b_pwms[action % 4]);
 8000942:	4b3a      	ldr	r3, [pc, #232]	; (8000a2c <main+0x1d8>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	001a      	movs	r2, r3
 8000948:	2303      	movs	r3, #3
 800094a:	401a      	ands	r2, r3
 800094c:	4b3a      	ldr	r3, [pc, #232]	; (8000a38 <main+0x1e4>)
 800094e:	0092      	lsls	r2, r2, #2
 8000950:	58d2      	ldr	r2, [r2, r3]
 8000952:	4b31      	ldr	r3, [pc, #196]	; (8000a18 <main+0x1c4>)
 8000954:	681c      	ldr	r4, [r3, #0]
 8000956:	1c10      	adds	r0, r2, #0
 8000958:	f7ff fc62 	bl	8000220 <__aeabi_f2uiz>
 800095c:	0003      	movs	r3, r0
 800095e:	63e3      	str	r3, [r4, #60]	; 0x3c
			  HAL_Delay(500 * amount);
 8000960:	4b34      	ldr	r3, [pc, #208]	; (8000a34 <main+0x1e0>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	001a      	movs	r2, r3
 8000966:	0013      	movs	r3, r2
 8000968:	015b      	lsls	r3, r3, #5
 800096a:	1a9b      	subs	r3, r3, r2
 800096c:	009b      	lsls	r3, r3, #2
 800096e:	189b      	adds	r3, r3, r2
 8000970:	009b      	lsls	r3, r3, #2
 8000972:	0018      	movs	r0, r3
 8000974:	f000 fb9c 	bl	80010b0 <HAL_Delay>
			  __HAL_TIM_SetCompare(&htim2 , TIM_CHANNEL_3 , dispenser_b_pwms[pwm_size - 1]);
 8000978:	4b2f      	ldr	r3, [pc, #188]	; (8000a38 <main+0x1e4>)
 800097a:	691a      	ldr	r2, [r3, #16]
 800097c:	4b26      	ldr	r3, [pc, #152]	; (8000a18 <main+0x1c4>)
 800097e:	681c      	ldr	r4, [r3, #0]
 8000980:	1c10      	adds	r0, r2, #0
 8000982:	f7ff fc4d 	bl	8000220 <__aeabi_f2uiz>
 8000986:	0003      	movs	r3, r0
 8000988:	63e3      	str	r3, [r4, #60]	; 0x3c
		  }
		  if (action == 0x08)
 800098a:	4b28      	ldr	r3, [pc, #160]	; (8000a2c <main+0x1d8>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	2b08      	cmp	r3, #8
 8000990:	d119      	bne.n	80009c6 <main+0x172>
		  {
			  /*
			   * 0x08 = Interact Medicine Chambers
			   */
			  __HAL_TIM_SetCompare(&htim2 , TIM_CHANNEL_2 , toggle_pwms[amount]);
 8000992:	4b28      	ldr	r3, [pc, #160]	; (8000a34 <main+0x1e0>)
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	001a      	movs	r2, r3
 8000998:	4b20      	ldr	r3, [pc, #128]	; (8000a1c <main+0x1c8>)
 800099a:	0092      	lsls	r2, r2, #2
 800099c:	58d2      	ldr	r2, [r2, r3]
 800099e:	4b1e      	ldr	r3, [pc, #120]	; (8000a18 <main+0x1c4>)
 80009a0:	681c      	ldr	r4, [r3, #0]
 80009a2:	1c10      	adds	r0, r2, #0
 80009a4:	f7ff fc3c 	bl	8000220 <__aeabi_f2uiz>
 80009a8:	0003      	movs	r3, r0
 80009aa:	63a3      	str	r3, [r4, #56]	; 0x38
			  __HAL_TIM_SetCompare(&htim2 , TIM_CHANNEL_3 , toggle_pwms[amount]);
 80009ac:	4b21      	ldr	r3, [pc, #132]	; (8000a34 <main+0x1e0>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	001a      	movs	r2, r3
 80009b2:	4b1a      	ldr	r3, [pc, #104]	; (8000a1c <main+0x1c8>)
 80009b4:	0092      	lsls	r2, r2, #2
 80009b6:	58d2      	ldr	r2, [r2, r3]
 80009b8:	4b17      	ldr	r3, [pc, #92]	; (8000a18 <main+0x1c4>)
 80009ba:	681c      	ldr	r4, [r3, #0]
 80009bc:	1c10      	adds	r0, r2, #0
 80009be:	f7ff fc2f 	bl	8000220 <__aeabi_f2uiz>
 80009c2:	0003      	movs	r3, r0
 80009c4:	63e3      	str	r3, [r4, #60]	; 0x3c
		  }
		  if (action == 0x09)
 80009c6:	4b19      	ldr	r3, [pc, #100]	; (8000a2c <main+0x1d8>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	2b09      	cmp	r3, #9
 80009cc:	d10c      	bne.n	80009e8 <main+0x194>
		  {
			  /*
			   * 0x09 = Interact Medicine Tray
			   */
			  __HAL_TIM_SetCompare(&htim2 , TIM_CHANNEL_4 , toggle_pwms[amount]);
 80009ce:	4b19      	ldr	r3, [pc, #100]	; (8000a34 <main+0x1e0>)
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	001a      	movs	r2, r3
 80009d4:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <main+0x1c8>)
 80009d6:	0092      	lsls	r2, r2, #2
 80009d8:	58d2      	ldr	r2, [r2, r3]
 80009da:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <main+0x1c4>)
 80009dc:	681c      	ldr	r4, [r3, #0]
 80009de:	1c10      	adds	r0, r2, #0
 80009e0:	f7ff fc1e 	bl	8000220 <__aeabi_f2uiz>
 80009e4:	0003      	movs	r3, r0
 80009e6:	6423      	str	r3, [r4, #64]	; 0x40
		  }
		  RXbuffer[ACTION_INDEX] = 0x00;
 80009e8:	4b0d      	ldr	r3, [pc, #52]	; (8000a20 <main+0x1cc>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	701a      	strb	r2, [r3, #0]
		  RXbuffer[AMOUNT_INDEX] = 0x00;
 80009ee:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <main+0x1cc>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	705a      	strb	r2, [r3, #1]
		  command_flag = 0x00;
 80009f4:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <main+0x1d4>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(Command_Pin_GPIO_Port, Command_Pin_Pin, GPIO_PIN_RESET);
 80009fa:	2390      	movs	r3, #144	; 0x90
 80009fc:	05db      	lsls	r3, r3, #23
 80009fe:	2200      	movs	r2, #0
 8000a00:	2110      	movs	r1, #16
 8000a02:	0018      	movs	r0, r3
 8000a04:	f000 fe44 	bl	8001690 <HAL_GPIO_WritePin>
		  HAL_UART_Receive_IT(&huart1, RXbuffer, RXsize);
 8000a08:	4905      	ldr	r1, [pc, #20]	; (8000a20 <main+0x1cc>)
 8000a0a:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <main+0x1d0>)
 8000a0c:	2202      	movs	r2, #2
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f002 fac8 	bl	8002fa4 <HAL_UART_Receive_IT>
	  if (command_flag != 0x00)
 8000a14:	e75e      	b.n	80008d4 <main+0x80>
 8000a16:	46c0      	nop			; (mov r8, r8)
 8000a18:	20000058 	.word	0x20000058
 8000a1c:	20000028 	.word	0x20000028
 8000a20:	20000128 	.word	0x20000128
 8000a24:	200000a0 	.word	0x200000a0
 8000a28:	2000012c 	.word	0x2000012c
 8000a2c:	2000012a 	.word	0x2000012a
 8000a30:	20000000 	.word	0x20000000
 8000a34:	2000012b 	.word	0x2000012b
 8000a38:	20000014 	.word	0x20000014

08000a3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a3c:	b590      	push	{r4, r7, lr}
 8000a3e:	b097      	sub	sp, #92	; 0x5c
 8000a40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a42:	2428      	movs	r4, #40	; 0x28
 8000a44:	193b      	adds	r3, r7, r4
 8000a46:	0018      	movs	r0, r3
 8000a48:	2330      	movs	r3, #48	; 0x30
 8000a4a:	001a      	movs	r2, r3
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	f003 fc43 	bl	80042d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a52:	2318      	movs	r3, #24
 8000a54:	18fb      	adds	r3, r7, r3
 8000a56:	0018      	movs	r0, r3
 8000a58:	2310      	movs	r3, #16
 8000a5a:	001a      	movs	r2, r3
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	f003 fc3b 	bl	80042d8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a62:	1d3b      	adds	r3, r7, #4
 8000a64:	0018      	movs	r0, r3
 8000a66:	2314      	movs	r3, #20
 8000a68:	001a      	movs	r2, r3
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	f003 fc34 	bl	80042d8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a70:	0021      	movs	r1, r4
 8000a72:	187b      	adds	r3, r7, r1
 8000a74:	2202      	movs	r2, #2
 8000a76:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a78:	187b      	adds	r3, r7, r1
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a7e:	187b      	adds	r3, r7, r1
 8000a80:	2210      	movs	r2, #16
 8000a82:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a84:	187b      	adds	r3, r7, r1
 8000a86:	2202      	movs	r2, #2
 8000a88:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a8a:	187b      	adds	r3, r7, r1
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000a90:	187b      	adds	r3, r7, r1
 8000a92:	22a0      	movs	r2, #160	; 0xa0
 8000a94:	0392      	lsls	r2, r2, #14
 8000a96:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000a98:	187b      	adds	r3, r7, r1
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a9e:	187b      	adds	r3, r7, r1
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	f000 fe13 	bl	80016cc <HAL_RCC_OscConfig>
 8000aa6:	1e03      	subs	r3, r0, #0
 8000aa8:	d001      	beq.n	8000aae <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000aaa:	f000 f96f 	bl	8000d8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aae:	2118      	movs	r1, #24
 8000ab0:	187b      	adds	r3, r7, r1
 8000ab2:	2207      	movs	r2, #7
 8000ab4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ab6:	187b      	adds	r3, r7, r1
 8000ab8:	2202      	movs	r2, #2
 8000aba:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000abc:	187b      	adds	r3, r7, r1
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ac2:	187b      	adds	r3, r7, r1
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ac8:	187b      	adds	r3, r7, r1
 8000aca:	2101      	movs	r1, #1
 8000acc:	0018      	movs	r0, r3
 8000ace:	f001 f917 	bl	8001d00 <HAL_RCC_ClockConfig>
 8000ad2:	1e03      	subs	r3, r0, #0
 8000ad4:	d001      	beq.n	8000ada <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000ad6:	f000 f959 	bl	8000d8c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ada:	1d3b      	adds	r3, r7, #4
 8000adc:	2201      	movs	r2, #1
 8000ade:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000ae0:	1d3b      	adds	r3, r7, #4
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ae6:	1d3b      	adds	r3, r7, #4
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f001 fa4d 	bl	8001f88 <HAL_RCCEx_PeriphCLKConfig>
 8000aee:	1e03      	subs	r3, r0, #0
 8000af0:	d001      	beq.n	8000af6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000af2:	f000 f94b 	bl	8000d8c <Error_Handler>
  }
}
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	46bd      	mov	sp, r7
 8000afa:	b017      	add	sp, #92	; 0x5c
 8000afc:	bd90      	pop	{r4, r7, pc}
	...

08000b00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08e      	sub	sp, #56	; 0x38
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b06:	2328      	movs	r3, #40	; 0x28
 8000b08:	18fb      	adds	r3, r7, r3
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	2310      	movs	r3, #16
 8000b0e:	001a      	movs	r2, r3
 8000b10:	2100      	movs	r1, #0
 8000b12:	f003 fbe1 	bl	80042d8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b16:	2320      	movs	r3, #32
 8000b18:	18fb      	adds	r3, r7, r3
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	2308      	movs	r3, #8
 8000b1e:	001a      	movs	r2, r3
 8000b20:	2100      	movs	r1, #0
 8000b22:	f003 fbd9 	bl	80042d8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b26:	1d3b      	adds	r3, r7, #4
 8000b28:	0018      	movs	r0, r3
 8000b2a:	231c      	movs	r3, #28
 8000b2c:	001a      	movs	r2, r3
 8000b2e:	2100      	movs	r1, #0
 8000b30:	f003 fbd2 	bl	80042d8 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b34:	4b3b      	ldr	r3, [pc, #236]	; (8000c24 <MX_TIM2_Init+0x124>)
 8000b36:	2280      	movs	r2, #128	; 0x80
 8000b38:	05d2      	lsls	r2, r2, #23
 8000b3a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 960;
 8000b3c:	4b39      	ldr	r3, [pc, #228]	; (8000c24 <MX_TIM2_Init+0x124>)
 8000b3e:	22f0      	movs	r2, #240	; 0xf0
 8000b40:	0092      	lsls	r2, r2, #2
 8000b42:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b44:	4b37      	ldr	r3, [pc, #220]	; (8000c24 <MX_TIM2_Init+0x124>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8000b4a:	4b36      	ldr	r3, [pc, #216]	; (8000c24 <MX_TIM2_Init+0x124>)
 8000b4c:	22fa      	movs	r2, #250	; 0xfa
 8000b4e:	0092      	lsls	r2, r2, #2
 8000b50:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b52:	4b34      	ldr	r3, [pc, #208]	; (8000c24 <MX_TIM2_Init+0x124>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b58:	4b32      	ldr	r3, [pc, #200]	; (8000c24 <MX_TIM2_Init+0x124>)
 8000b5a:	2280      	movs	r2, #128	; 0x80
 8000b5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b5e:	4b31      	ldr	r3, [pc, #196]	; (8000c24 <MX_TIM2_Init+0x124>)
 8000b60:	0018      	movs	r0, r3
 8000b62:	f001 faef 	bl	8002144 <HAL_TIM_Base_Init>
 8000b66:	1e03      	subs	r3, r0, #0
 8000b68:	d001      	beq.n	8000b6e <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8000b6a:	f000 f90f 	bl	8000d8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b6e:	2128      	movs	r1, #40	; 0x28
 8000b70:	187b      	adds	r3, r7, r1
 8000b72:	2280      	movs	r2, #128	; 0x80
 8000b74:	0152      	lsls	r2, r2, #5
 8000b76:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b78:	187a      	adds	r2, r7, r1
 8000b7a:	4b2a      	ldr	r3, [pc, #168]	; (8000c24 <MX_TIM2_Init+0x124>)
 8000b7c:	0011      	movs	r1, r2
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f001 fd50 	bl	8002624 <HAL_TIM_ConfigClockSource>
 8000b84:	1e03      	subs	r3, r0, #0
 8000b86:	d001      	beq.n	8000b8c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000b88:	f000 f900 	bl	8000d8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b8c:	4b25      	ldr	r3, [pc, #148]	; (8000c24 <MX_TIM2_Init+0x124>)
 8000b8e:	0018      	movs	r0, r3
 8000b90:	f001 fb72 	bl	8002278 <HAL_TIM_PWM_Init>
 8000b94:	1e03      	subs	r3, r0, #0
 8000b96:	d001      	beq.n	8000b9c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000b98:	f000 f8f8 	bl	8000d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b9c:	2120      	movs	r1, #32
 8000b9e:	187b      	adds	r3, r7, r1
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ba4:	187b      	adds	r3, r7, r1
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000baa:	187a      	adds	r2, r7, r1
 8000bac:	4b1d      	ldr	r3, [pc, #116]	; (8000c24 <MX_TIM2_Init+0x124>)
 8000bae:	0011      	movs	r1, r2
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f002 f945 	bl	8002e40 <HAL_TIMEx_MasterConfigSynchronization>
 8000bb6:	1e03      	subs	r3, r0, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_TIM2_Init+0xbe>
  {
    Error_Handler();
 8000bba:	f000 f8e7 	bl	8000d8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bbe:	1d3b      	adds	r3, r7, #4
 8000bc0:	2260      	movs	r2, #96	; 0x60
 8000bc2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000bc4:	1d3b      	adds	r3, r7, #4
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bd0:	1d3b      	adds	r3, r7, #4
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bd6:	1d39      	adds	r1, r7, #4
 8000bd8:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <MX_TIM2_Init+0x124>)
 8000bda:	2204      	movs	r2, #4
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f001 fc5b 	bl	8002498 <HAL_TIM_PWM_ConfigChannel>
 8000be2:	1e03      	subs	r3, r0, #0
 8000be4:	d001      	beq.n	8000bea <MX_TIM2_Init+0xea>
  {
    Error_Handler();
 8000be6:	f000 f8d1 	bl	8000d8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bea:	1d39      	adds	r1, r7, #4
 8000bec:	4b0d      	ldr	r3, [pc, #52]	; (8000c24 <MX_TIM2_Init+0x124>)
 8000bee:	2208      	movs	r2, #8
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	f001 fc51 	bl	8002498 <HAL_TIM_PWM_ConfigChannel>
 8000bf6:	1e03      	subs	r3, r0, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_TIM2_Init+0xfe>
  {
    Error_Handler();
 8000bfa:	f000 f8c7 	bl	8000d8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000bfe:	1d39      	adds	r1, r7, #4
 8000c00:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <MX_TIM2_Init+0x124>)
 8000c02:	220c      	movs	r2, #12
 8000c04:	0018      	movs	r0, r3
 8000c06:	f001 fc47 	bl	8002498 <HAL_TIM_PWM_ConfigChannel>
 8000c0a:	1e03      	subs	r3, r0, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_TIM2_Init+0x112>
  {
    Error_Handler();
 8000c0e:	f000 f8bd 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c12:	4b04      	ldr	r3, [pc, #16]	; (8000c24 <MX_TIM2_Init+0x124>)
 8000c14:	0018      	movs	r0, r3
 8000c16:	f000 f8ff 	bl	8000e18 <HAL_TIM_MspPostInit>

}
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	b00e      	add	sp, #56	; 0x38
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	46c0      	nop			; (mov r8, r8)
 8000c24:	20000058 	.word	0x20000058

08000c28 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c2c:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <MX_USART1_UART_Init+0x58>)
 8000c2e:	4a15      	ldr	r2, [pc, #84]	; (8000c84 <MX_USART1_UART_Init+0x5c>)
 8000c30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000c32:	4b13      	ldr	r3, [pc, #76]	; (8000c80 <MX_USART1_UART_Init+0x58>)
 8000c34:	2296      	movs	r2, #150	; 0x96
 8000c36:	0192      	lsls	r2, r2, #6
 8000c38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c3a:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <MX_USART1_UART_Init+0x58>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c40:	4b0f      	ldr	r3, [pc, #60]	; (8000c80 <MX_USART1_UART_Init+0x58>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c46:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <MX_USART1_UART_Init+0x58>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c4c:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <MX_USART1_UART_Init+0x58>)
 8000c4e:	220c      	movs	r2, #12
 8000c50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c52:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <MX_USART1_UART_Init+0x58>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c58:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <MX_USART1_UART_Init+0x58>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c5e:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <MX_USART1_UART_Init+0x58>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c64:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <MX_USART1_UART_Init+0x58>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c6a:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <MX_USART1_UART_Init+0x58>)
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	f002 f945 	bl	8002efc <HAL_UART_Init>
 8000c72:	1e03      	subs	r3, r0, #0
 8000c74:	d001      	beq.n	8000c7a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c76:	f000 f889 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	200000a0 	.word	0x200000a0
 8000c84:	40013800 	.word	0x40013800

08000c88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c88:	b590      	push	{r4, r7, lr}
 8000c8a:	b089      	sub	sp, #36	; 0x24
 8000c8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8e:	240c      	movs	r4, #12
 8000c90:	193b      	adds	r3, r7, r4
 8000c92:	0018      	movs	r0, r3
 8000c94:	2314      	movs	r3, #20
 8000c96:	001a      	movs	r2, r3
 8000c98:	2100      	movs	r1, #0
 8000c9a:	f003 fb1d 	bl	80042d8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9e:	4b39      	ldr	r3, [pc, #228]	; (8000d84 <MX_GPIO_Init+0xfc>)
 8000ca0:	695a      	ldr	r2, [r3, #20]
 8000ca2:	4b38      	ldr	r3, [pc, #224]	; (8000d84 <MX_GPIO_Init+0xfc>)
 8000ca4:	2180      	movs	r1, #128	; 0x80
 8000ca6:	0289      	lsls	r1, r1, #10
 8000ca8:	430a      	orrs	r2, r1
 8000caa:	615a      	str	r2, [r3, #20]
 8000cac:	4b35      	ldr	r3, [pc, #212]	; (8000d84 <MX_GPIO_Init+0xfc>)
 8000cae:	695a      	ldr	r2, [r3, #20]
 8000cb0:	2380      	movs	r3, #128	; 0x80
 8000cb2:	029b      	lsls	r3, r3, #10
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	60bb      	str	r3, [r7, #8]
 8000cb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cba:	4b32      	ldr	r3, [pc, #200]	; (8000d84 <MX_GPIO_Init+0xfc>)
 8000cbc:	695a      	ldr	r2, [r3, #20]
 8000cbe:	4b31      	ldr	r3, [pc, #196]	; (8000d84 <MX_GPIO_Init+0xfc>)
 8000cc0:	2180      	movs	r1, #128	; 0x80
 8000cc2:	0309      	lsls	r1, r1, #12
 8000cc4:	430a      	orrs	r2, r1
 8000cc6:	615a      	str	r2, [r3, #20]
 8000cc8:	4b2e      	ldr	r3, [pc, #184]	; (8000d84 <MX_GPIO_Init+0xfc>)
 8000cca:	695a      	ldr	r2, [r3, #20]
 8000ccc:	2380      	movs	r3, #128	; 0x80
 8000cce:	031b      	lsls	r3, r3, #12
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	607b      	str	r3, [r7, #4]
 8000cd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd6:	4b2b      	ldr	r3, [pc, #172]	; (8000d84 <MX_GPIO_Init+0xfc>)
 8000cd8:	695a      	ldr	r2, [r3, #20]
 8000cda:	4b2a      	ldr	r3, [pc, #168]	; (8000d84 <MX_GPIO_Init+0xfc>)
 8000cdc:	2180      	movs	r1, #128	; 0x80
 8000cde:	02c9      	lsls	r1, r1, #11
 8000ce0:	430a      	orrs	r2, r1
 8000ce2:	615a      	str	r2, [r3, #20]
 8000ce4:	4b27      	ldr	r3, [pc, #156]	; (8000d84 <MX_GPIO_Init+0xfc>)
 8000ce6:	695a      	ldr	r2, [r3, #20]
 8000ce8:	2380      	movs	r3, #128	; 0x80
 8000cea:	02db      	lsls	r3, r3, #11
 8000cec:	4013      	ands	r3, r2
 8000cee:	603b      	str	r3, [r7, #0]
 8000cf0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Command_Pin_GPIO_Port, Command_Pin_Pin, GPIO_PIN_RESET);
 8000cf2:	2390      	movs	r3, #144	; 0x90
 8000cf4:	05db      	lsls	r3, r3, #23
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2110      	movs	r1, #16
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f000 fcc8 	bl	8001690 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Blink_GPIO_Port, Blink_Pin, GPIO_PIN_SET);
 8000d00:	2380      	movs	r3, #128	; 0x80
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	4820      	ldr	r0, [pc, #128]	; (8000d88 <MX_GPIO_Init+0x100>)
 8000d06:	2201      	movs	r2, #1
 8000d08:	0019      	movs	r1, r3
 8000d0a:	f000 fcc1 	bl	8001690 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : User_Pin */
  GPIO_InitStruct.Pin = User_Pin;
 8000d0e:	193b      	adds	r3, r7, r4
 8000d10:	2201      	movs	r2, #1
 8000d12:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d14:	193b      	adds	r3, r7, r4
 8000d16:	2200      	movs	r2, #0
 8000d18:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	193b      	adds	r3, r7, r4
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_GPIO_Port, &GPIO_InitStruct);
 8000d20:	193a      	adds	r2, r7, r4
 8000d22:	2390      	movs	r3, #144	; 0x90
 8000d24:	05db      	lsls	r3, r3, #23
 8000d26:	0011      	movs	r1, r2
 8000d28:	0018      	movs	r0, r3
 8000d2a:	f000 fb41 	bl	80013b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Command_Pin_Pin */
  GPIO_InitStruct.Pin = Command_Pin_Pin;
 8000d2e:	193b      	adds	r3, r7, r4
 8000d30:	2210      	movs	r2, #16
 8000d32:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d34:	193b      	adds	r3, r7, r4
 8000d36:	2201      	movs	r2, #1
 8000d38:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	193b      	adds	r3, r7, r4
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d40:	193b      	adds	r3, r7, r4
 8000d42:	2200      	movs	r2, #0
 8000d44:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Command_Pin_GPIO_Port, &GPIO_InitStruct);
 8000d46:	193a      	adds	r2, r7, r4
 8000d48:	2390      	movs	r3, #144	; 0x90
 8000d4a:	05db      	lsls	r3, r3, #23
 8000d4c:	0011      	movs	r1, r2
 8000d4e:	0018      	movs	r0, r3
 8000d50:	f000 fb2e 	bl	80013b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Blink_Pin */
  GPIO_InitStruct.Pin = Blink_Pin;
 8000d54:	0021      	movs	r1, r4
 8000d56:	187b      	adds	r3, r7, r1
 8000d58:	2280      	movs	r2, #128	; 0x80
 8000d5a:	0052      	lsls	r2, r2, #1
 8000d5c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5e:	187b      	adds	r3, r7, r1
 8000d60:	2201      	movs	r2, #1
 8000d62:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	187b      	adds	r3, r7, r1
 8000d66:	2200      	movs	r2, #0
 8000d68:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d6a:	187b      	adds	r3, r7, r1
 8000d6c:	2203      	movs	r2, #3
 8000d6e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Blink_GPIO_Port, &GPIO_InitStruct);
 8000d70:	187b      	adds	r3, r7, r1
 8000d72:	4a05      	ldr	r2, [pc, #20]	; (8000d88 <MX_GPIO_Init+0x100>)
 8000d74:	0019      	movs	r1, r3
 8000d76:	0010      	movs	r0, r2
 8000d78:	f000 fb1a 	bl	80013b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d7c:	46c0      	nop			; (mov r8, r8)
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	b009      	add	sp, #36	; 0x24
 8000d82:	bd90      	pop	{r4, r7, pc}
 8000d84:	40021000 	.word	0x40021000
 8000d88:	48000800 	.word	0x48000800

08000d8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d90:	b672      	cpsid	i
}
 8000d92:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <Error_Handler+0x8>
	...

08000d98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9e:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <HAL_MspInit+0x44>)
 8000da0:	699a      	ldr	r2, [r3, #24]
 8000da2:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <HAL_MspInit+0x44>)
 8000da4:	2101      	movs	r1, #1
 8000da6:	430a      	orrs	r2, r1
 8000da8:	619a      	str	r2, [r3, #24]
 8000daa:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <HAL_MspInit+0x44>)
 8000dac:	699b      	ldr	r3, [r3, #24]
 8000dae:	2201      	movs	r2, #1
 8000db0:	4013      	ands	r3, r2
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db6:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <HAL_MspInit+0x44>)
 8000db8:	69da      	ldr	r2, [r3, #28]
 8000dba:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <HAL_MspInit+0x44>)
 8000dbc:	2180      	movs	r1, #128	; 0x80
 8000dbe:	0549      	lsls	r1, r1, #21
 8000dc0:	430a      	orrs	r2, r1
 8000dc2:	61da      	str	r2, [r3, #28]
 8000dc4:	4b05      	ldr	r3, [pc, #20]	; (8000ddc <HAL_MspInit+0x44>)
 8000dc6:	69da      	ldr	r2, [r3, #28]
 8000dc8:	2380      	movs	r3, #128	; 0x80
 8000dca:	055b      	lsls	r3, r3, #21
 8000dcc:	4013      	ands	r3, r2
 8000dce:	603b      	str	r3, [r7, #0]
 8000dd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd2:	46c0      	nop			; (mov r8, r8)
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	b002      	add	sp, #8
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	40021000 	.word	0x40021000

08000de0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	2380      	movs	r3, #128	; 0x80
 8000dee:	05db      	lsls	r3, r3, #23
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d10b      	bne.n	8000e0c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000df4:	4b07      	ldr	r3, [pc, #28]	; (8000e14 <HAL_TIM_Base_MspInit+0x34>)
 8000df6:	69da      	ldr	r2, [r3, #28]
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <HAL_TIM_Base_MspInit+0x34>)
 8000dfa:	2101      	movs	r1, #1
 8000dfc:	430a      	orrs	r2, r1
 8000dfe:	61da      	str	r2, [r3, #28]
 8000e00:	4b04      	ldr	r3, [pc, #16]	; (8000e14 <HAL_TIM_Base_MspInit+0x34>)
 8000e02:	69db      	ldr	r3, [r3, #28]
 8000e04:	2201      	movs	r2, #1
 8000e06:	4013      	ands	r3, r2
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e0c:	46c0      	nop			; (mov r8, r8)
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	b004      	add	sp, #16
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	40021000 	.word	0x40021000

08000e18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e18:	b590      	push	{r4, r7, lr}
 8000e1a:	b089      	sub	sp, #36	; 0x24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e20:	240c      	movs	r4, #12
 8000e22:	193b      	adds	r3, r7, r4
 8000e24:	0018      	movs	r0, r3
 8000e26:	2314      	movs	r3, #20
 8000e28:	001a      	movs	r2, r3
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	f003 fa54 	bl	80042d8 <memset>
  if(htim->Instance==TIM2)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	2380      	movs	r3, #128	; 0x80
 8000e36:	05db      	lsls	r3, r3, #23
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d124      	bne.n	8000e86 <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3c:	4b14      	ldr	r3, [pc, #80]	; (8000e90 <HAL_TIM_MspPostInit+0x78>)
 8000e3e:	695a      	ldr	r2, [r3, #20]
 8000e40:	4b13      	ldr	r3, [pc, #76]	; (8000e90 <HAL_TIM_MspPostInit+0x78>)
 8000e42:	2180      	movs	r1, #128	; 0x80
 8000e44:	0289      	lsls	r1, r1, #10
 8000e46:	430a      	orrs	r2, r1
 8000e48:	615a      	str	r2, [r3, #20]
 8000e4a:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <HAL_TIM_MspPostInit+0x78>)
 8000e4c:	695a      	ldr	r2, [r3, #20]
 8000e4e:	2380      	movs	r3, #128	; 0x80
 8000e50:	029b      	lsls	r3, r3, #10
 8000e52:	4013      	ands	r3, r2
 8000e54:	60bb      	str	r3, [r7, #8]
 8000e56:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = Dispenser_A_Pin|Dispenser_B_Pin|Lock_Pin;
 8000e58:	0021      	movs	r1, r4
 8000e5a:	187b      	adds	r3, r7, r1
 8000e5c:	220e      	movs	r2, #14
 8000e5e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e60:	187b      	adds	r3, r7, r1
 8000e62:	2202      	movs	r2, #2
 8000e64:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	187b      	adds	r3, r7, r1
 8000e68:	2200      	movs	r2, #0
 8000e6a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6c:	187b      	adds	r3, r7, r1
 8000e6e:	2200      	movs	r2, #0
 8000e70:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000e72:	187b      	adds	r3, r7, r1
 8000e74:	2202      	movs	r2, #2
 8000e76:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e78:	187a      	adds	r2, r7, r1
 8000e7a:	2390      	movs	r3, #144	; 0x90
 8000e7c:	05db      	lsls	r3, r3, #23
 8000e7e:	0011      	movs	r1, r2
 8000e80:	0018      	movs	r0, r3
 8000e82:	f000 fa95 	bl	80013b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	b009      	add	sp, #36	; 0x24
 8000e8c:	bd90      	pop	{r4, r7, pc}
 8000e8e:	46c0      	nop			; (mov r8, r8)
 8000e90:	40021000 	.word	0x40021000

08000e94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e94:	b590      	push	{r4, r7, lr}
 8000e96:	b08b      	sub	sp, #44	; 0x2c
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9c:	2414      	movs	r4, #20
 8000e9e:	193b      	adds	r3, r7, r4
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	2314      	movs	r3, #20
 8000ea4:	001a      	movs	r2, r3
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	f003 fa16 	bl	80042d8 <memset>
  if(huart->Instance==USART1)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a20      	ldr	r2, [pc, #128]	; (8000f34 <HAL_UART_MspInit+0xa0>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d139      	bne.n	8000f2a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000eb6:	4b20      	ldr	r3, [pc, #128]	; (8000f38 <HAL_UART_MspInit+0xa4>)
 8000eb8:	699a      	ldr	r2, [r3, #24]
 8000eba:	4b1f      	ldr	r3, [pc, #124]	; (8000f38 <HAL_UART_MspInit+0xa4>)
 8000ebc:	2180      	movs	r1, #128	; 0x80
 8000ebe:	01c9      	lsls	r1, r1, #7
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	619a      	str	r2, [r3, #24]
 8000ec4:	4b1c      	ldr	r3, [pc, #112]	; (8000f38 <HAL_UART_MspInit+0xa4>)
 8000ec6:	699a      	ldr	r2, [r3, #24]
 8000ec8:	2380      	movs	r3, #128	; 0x80
 8000eca:	01db      	lsls	r3, r3, #7
 8000ecc:	4013      	ands	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]
 8000ed0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed2:	4b19      	ldr	r3, [pc, #100]	; (8000f38 <HAL_UART_MspInit+0xa4>)
 8000ed4:	695a      	ldr	r2, [r3, #20]
 8000ed6:	4b18      	ldr	r3, [pc, #96]	; (8000f38 <HAL_UART_MspInit+0xa4>)
 8000ed8:	2180      	movs	r1, #128	; 0x80
 8000eda:	02c9      	lsls	r1, r1, #11
 8000edc:	430a      	orrs	r2, r1
 8000ede:	615a      	str	r2, [r3, #20]
 8000ee0:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <HAL_UART_MspInit+0xa4>)
 8000ee2:	695a      	ldr	r2, [r3, #20]
 8000ee4:	2380      	movs	r3, #128	; 0x80
 8000ee6:	02db      	lsls	r3, r3, #11
 8000ee8:	4013      	ands	r3, r2
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = RPI_TX_Pin|RPI_RX_Pin;
 8000eee:	0021      	movs	r1, r4
 8000ef0:	187b      	adds	r3, r7, r1
 8000ef2:	22c0      	movs	r2, #192	; 0xc0
 8000ef4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef6:	187b      	adds	r3, r7, r1
 8000ef8:	2202      	movs	r2, #2
 8000efa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	187b      	adds	r3, r7, r1
 8000efe:	2200      	movs	r2, #0
 8000f00:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f02:	187b      	adds	r3, r7, r1
 8000f04:	2203      	movs	r2, #3
 8000f06:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000f08:	187b      	adds	r3, r7, r1
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f0e:	187b      	adds	r3, r7, r1
 8000f10:	4a0a      	ldr	r2, [pc, #40]	; (8000f3c <HAL_UART_MspInit+0xa8>)
 8000f12:	0019      	movs	r1, r3
 8000f14:	0010      	movs	r0, r2
 8000f16:	f000 fa4b 	bl	80013b0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	201b      	movs	r0, #27
 8000f20:	f000 f996 	bl	8001250 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f24:	201b      	movs	r0, #27
 8000f26:	f000 f9a8 	bl	800127a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f2a:	46c0      	nop			; (mov r8, r8)
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	b00b      	add	sp, #44	; 0x2c
 8000f30:	bd90      	pop	{r4, r7, pc}
 8000f32:	46c0      	nop			; (mov r8, r8)
 8000f34:	40013800 	.word	0x40013800
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	48000400 	.word	0x48000400

08000f40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <NMI_Handler+0x4>

08000f46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f4a:	e7fe      	b.n	8000f4a <HardFault_Handler+0x4>

08000f4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f50:	46c0      	nop			; (mov r8, r8)
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f5a:	46c0      	nop			; (mov r8, r8)
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f64:	f000 f888 	bl	8001078 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f68:	46c0      	nop			; (mov r8, r8)
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
	...

08000f70 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f74:	4b03      	ldr	r3, [pc, #12]	; (8000f84 <USART1_IRQHandler+0x14>)
 8000f76:	0018      	movs	r0, r3
 8000f78:	f002 f86c 	bl	8003054 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f7c:	46c0      	nop			; (mov r8, r8)
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	46c0      	nop			; (mov r8, r8)
 8000f84:	200000a0 	.word	0x200000a0

08000f88 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000f8c:	46c0      	nop			; (mov r8, r8)
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
	...

08000f94 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f94:	480d      	ldr	r0, [pc, #52]	; (8000fcc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f96:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f98:	480d      	ldr	r0, [pc, #52]	; (8000fd0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f9a:	490e      	ldr	r1, [pc, #56]	; (8000fd4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f9c:	4a0e      	ldr	r2, [pc, #56]	; (8000fd8 <LoopForever+0xe>)
  movs r3, #0
 8000f9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fa0:	e002      	b.n	8000fa8 <LoopCopyDataInit>

08000fa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fa6:	3304      	adds	r3, #4

08000fa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000faa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fac:	d3f9      	bcc.n	8000fa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fae:	4a0b      	ldr	r2, [pc, #44]	; (8000fdc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fb0:	4c0b      	ldr	r4, [pc, #44]	; (8000fe0 <LoopForever+0x16>)
  movs r3, #0
 8000fb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb4:	e001      	b.n	8000fba <LoopFillZerobss>

08000fb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb8:	3204      	adds	r2, #4

08000fba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fbc:	d3fb      	bcc.n	8000fb6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000fbe:	f7ff ffe3 	bl	8000f88 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000fc2:	f003 f965 	bl	8004290 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fc6:	f7ff fc45 	bl	8000854 <main>

08000fca <LoopForever>:

LoopForever:
    b LoopForever
 8000fca:	e7fe      	b.n	8000fca <LoopForever>
  ldr   r0, =_estack
 8000fcc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000fd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fd4:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8000fd8:	08004340 	.word	0x08004340
  ldr r2, =_sbss
 8000fdc:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8000fe0:	20000134 	.word	0x20000134

08000fe4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fe4:	e7fe      	b.n	8000fe4 <ADC1_COMP_IRQHandler>
	...

08000fe8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fec:	4b07      	ldr	r3, [pc, #28]	; (800100c <HAL_Init+0x24>)
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_Init+0x24>)
 8000ff2:	2110      	movs	r1, #16
 8000ff4:	430a      	orrs	r2, r1
 8000ff6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	f000 f809 	bl	8001010 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ffe:	f7ff fecb 	bl	8000d98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001002:	2300      	movs	r3, #0
}
 8001004:	0018      	movs	r0, r3
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	40022000 	.word	0x40022000

08001010 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001010:	b590      	push	{r4, r7, lr}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001018:	4b14      	ldr	r3, [pc, #80]	; (800106c <HAL_InitTick+0x5c>)
 800101a:	681c      	ldr	r4, [r3, #0]
 800101c:	4b14      	ldr	r3, [pc, #80]	; (8001070 <HAL_InitTick+0x60>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	0019      	movs	r1, r3
 8001022:	23fa      	movs	r3, #250	; 0xfa
 8001024:	0098      	lsls	r0, r3, #2
 8001026:	f7ff f86f 	bl	8000108 <__udivsi3>
 800102a:	0003      	movs	r3, r0
 800102c:	0019      	movs	r1, r3
 800102e:	0020      	movs	r0, r4
 8001030:	f7ff f86a 	bl	8000108 <__udivsi3>
 8001034:	0003      	movs	r3, r0
 8001036:	0018      	movs	r0, r3
 8001038:	f000 f92f 	bl	800129a <HAL_SYSTICK_Config>
 800103c:	1e03      	subs	r3, r0, #0
 800103e:	d001      	beq.n	8001044 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	e00f      	b.n	8001064 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2b03      	cmp	r3, #3
 8001048:	d80b      	bhi.n	8001062 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	2301      	movs	r3, #1
 800104e:	425b      	negs	r3, r3
 8001050:	2200      	movs	r2, #0
 8001052:	0018      	movs	r0, r3
 8001054:	f000 f8fc 	bl	8001250 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001058:	4b06      	ldr	r3, [pc, #24]	; (8001074 <HAL_InitTick+0x64>)
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800105e:	2300      	movs	r3, #0
 8001060:	e000      	b.n	8001064 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
}
 8001064:	0018      	movs	r0, r3
 8001066:	46bd      	mov	sp, r7
 8001068:	b003      	add	sp, #12
 800106a:	bd90      	pop	{r4, r7, pc}
 800106c:	20000030 	.word	0x20000030
 8001070:	20000038 	.word	0x20000038
 8001074:	20000034 	.word	0x20000034

08001078 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800107c:	4b05      	ldr	r3, [pc, #20]	; (8001094 <HAL_IncTick+0x1c>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	001a      	movs	r2, r3
 8001082:	4b05      	ldr	r3, [pc, #20]	; (8001098 <HAL_IncTick+0x20>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	18d2      	adds	r2, r2, r3
 8001088:	4b03      	ldr	r3, [pc, #12]	; (8001098 <HAL_IncTick+0x20>)
 800108a:	601a      	str	r2, [r3, #0]
}
 800108c:	46c0      	nop			; (mov r8, r8)
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	46c0      	nop			; (mov r8, r8)
 8001094:	20000038 	.word	0x20000038
 8001098:	20000130 	.word	0x20000130

0800109c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  return uwTick;
 80010a0:	4b02      	ldr	r3, [pc, #8]	; (80010ac <HAL_GetTick+0x10>)
 80010a2:	681b      	ldr	r3, [r3, #0]
}
 80010a4:	0018      	movs	r0, r3
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	46c0      	nop			; (mov r8, r8)
 80010ac:	20000130 	.word	0x20000130

080010b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010b8:	f7ff fff0 	bl	800109c <HAL_GetTick>
 80010bc:	0003      	movs	r3, r0
 80010be:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	3301      	adds	r3, #1
 80010c8:	d005      	beq.n	80010d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ca:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <HAL_Delay+0x44>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	001a      	movs	r2, r3
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	189b      	adds	r3, r3, r2
 80010d4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80010d6:	46c0      	nop			; (mov r8, r8)
 80010d8:	f7ff ffe0 	bl	800109c <HAL_GetTick>
 80010dc:	0002      	movs	r2, r0
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	68fa      	ldr	r2, [r7, #12]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d8f7      	bhi.n	80010d8 <HAL_Delay+0x28>
  {
  }
}
 80010e8:	46c0      	nop			; (mov r8, r8)
 80010ea:	46c0      	nop			; (mov r8, r8)
 80010ec:	46bd      	mov	sp, r7
 80010ee:	b004      	add	sp, #16
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	46c0      	nop			; (mov r8, r8)
 80010f4:	20000038 	.word	0x20000038

080010f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	0002      	movs	r2, r0
 8001100:	1dfb      	adds	r3, r7, #7
 8001102:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001104:	1dfb      	adds	r3, r7, #7
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b7f      	cmp	r3, #127	; 0x7f
 800110a:	d809      	bhi.n	8001120 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800110c:	1dfb      	adds	r3, r7, #7
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	001a      	movs	r2, r3
 8001112:	231f      	movs	r3, #31
 8001114:	401a      	ands	r2, r3
 8001116:	4b04      	ldr	r3, [pc, #16]	; (8001128 <__NVIC_EnableIRQ+0x30>)
 8001118:	2101      	movs	r1, #1
 800111a:	4091      	lsls	r1, r2
 800111c:	000a      	movs	r2, r1
 800111e:	601a      	str	r2, [r3, #0]
  }
}
 8001120:	46c0      	nop			; (mov r8, r8)
 8001122:	46bd      	mov	sp, r7
 8001124:	b002      	add	sp, #8
 8001126:	bd80      	pop	{r7, pc}
 8001128:	e000e100 	.word	0xe000e100

0800112c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800112c:	b590      	push	{r4, r7, lr}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	0002      	movs	r2, r0
 8001134:	6039      	str	r1, [r7, #0]
 8001136:	1dfb      	adds	r3, r7, #7
 8001138:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800113a:	1dfb      	adds	r3, r7, #7
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2b7f      	cmp	r3, #127	; 0x7f
 8001140:	d828      	bhi.n	8001194 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001142:	4a2f      	ldr	r2, [pc, #188]	; (8001200 <__NVIC_SetPriority+0xd4>)
 8001144:	1dfb      	adds	r3, r7, #7
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	b25b      	sxtb	r3, r3
 800114a:	089b      	lsrs	r3, r3, #2
 800114c:	33c0      	adds	r3, #192	; 0xc0
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	589b      	ldr	r3, [r3, r2]
 8001152:	1dfa      	adds	r2, r7, #7
 8001154:	7812      	ldrb	r2, [r2, #0]
 8001156:	0011      	movs	r1, r2
 8001158:	2203      	movs	r2, #3
 800115a:	400a      	ands	r2, r1
 800115c:	00d2      	lsls	r2, r2, #3
 800115e:	21ff      	movs	r1, #255	; 0xff
 8001160:	4091      	lsls	r1, r2
 8001162:	000a      	movs	r2, r1
 8001164:	43d2      	mvns	r2, r2
 8001166:	401a      	ands	r2, r3
 8001168:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	019b      	lsls	r3, r3, #6
 800116e:	22ff      	movs	r2, #255	; 0xff
 8001170:	401a      	ands	r2, r3
 8001172:	1dfb      	adds	r3, r7, #7
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	0018      	movs	r0, r3
 8001178:	2303      	movs	r3, #3
 800117a:	4003      	ands	r3, r0
 800117c:	00db      	lsls	r3, r3, #3
 800117e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001180:	481f      	ldr	r0, [pc, #124]	; (8001200 <__NVIC_SetPriority+0xd4>)
 8001182:	1dfb      	adds	r3, r7, #7
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	b25b      	sxtb	r3, r3
 8001188:	089b      	lsrs	r3, r3, #2
 800118a:	430a      	orrs	r2, r1
 800118c:	33c0      	adds	r3, #192	; 0xc0
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001192:	e031      	b.n	80011f8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001194:	4a1b      	ldr	r2, [pc, #108]	; (8001204 <__NVIC_SetPriority+0xd8>)
 8001196:	1dfb      	adds	r3, r7, #7
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	0019      	movs	r1, r3
 800119c:	230f      	movs	r3, #15
 800119e:	400b      	ands	r3, r1
 80011a0:	3b08      	subs	r3, #8
 80011a2:	089b      	lsrs	r3, r3, #2
 80011a4:	3306      	adds	r3, #6
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	18d3      	adds	r3, r2, r3
 80011aa:	3304      	adds	r3, #4
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	1dfa      	adds	r2, r7, #7
 80011b0:	7812      	ldrb	r2, [r2, #0]
 80011b2:	0011      	movs	r1, r2
 80011b4:	2203      	movs	r2, #3
 80011b6:	400a      	ands	r2, r1
 80011b8:	00d2      	lsls	r2, r2, #3
 80011ba:	21ff      	movs	r1, #255	; 0xff
 80011bc:	4091      	lsls	r1, r2
 80011be:	000a      	movs	r2, r1
 80011c0:	43d2      	mvns	r2, r2
 80011c2:	401a      	ands	r2, r3
 80011c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	019b      	lsls	r3, r3, #6
 80011ca:	22ff      	movs	r2, #255	; 0xff
 80011cc:	401a      	ands	r2, r3
 80011ce:	1dfb      	adds	r3, r7, #7
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	0018      	movs	r0, r3
 80011d4:	2303      	movs	r3, #3
 80011d6:	4003      	ands	r3, r0
 80011d8:	00db      	lsls	r3, r3, #3
 80011da:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011dc:	4809      	ldr	r0, [pc, #36]	; (8001204 <__NVIC_SetPriority+0xd8>)
 80011de:	1dfb      	adds	r3, r7, #7
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	001c      	movs	r4, r3
 80011e4:	230f      	movs	r3, #15
 80011e6:	4023      	ands	r3, r4
 80011e8:	3b08      	subs	r3, #8
 80011ea:	089b      	lsrs	r3, r3, #2
 80011ec:	430a      	orrs	r2, r1
 80011ee:	3306      	adds	r3, #6
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	18c3      	adds	r3, r0, r3
 80011f4:	3304      	adds	r3, #4
 80011f6:	601a      	str	r2, [r3, #0]
}
 80011f8:	46c0      	nop			; (mov r8, r8)
 80011fa:	46bd      	mov	sp, r7
 80011fc:	b003      	add	sp, #12
 80011fe:	bd90      	pop	{r4, r7, pc}
 8001200:	e000e100 	.word	0xe000e100
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	1e5a      	subs	r2, r3, #1
 8001214:	2380      	movs	r3, #128	; 0x80
 8001216:	045b      	lsls	r3, r3, #17
 8001218:	429a      	cmp	r2, r3
 800121a:	d301      	bcc.n	8001220 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800121c:	2301      	movs	r3, #1
 800121e:	e010      	b.n	8001242 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001220:	4b0a      	ldr	r3, [pc, #40]	; (800124c <SysTick_Config+0x44>)
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	3a01      	subs	r2, #1
 8001226:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001228:	2301      	movs	r3, #1
 800122a:	425b      	negs	r3, r3
 800122c:	2103      	movs	r1, #3
 800122e:	0018      	movs	r0, r3
 8001230:	f7ff ff7c 	bl	800112c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001234:	4b05      	ldr	r3, [pc, #20]	; (800124c <SysTick_Config+0x44>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800123a:	4b04      	ldr	r3, [pc, #16]	; (800124c <SysTick_Config+0x44>)
 800123c:	2207      	movs	r2, #7
 800123e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001240:	2300      	movs	r3, #0
}
 8001242:	0018      	movs	r0, r3
 8001244:	46bd      	mov	sp, r7
 8001246:	b002      	add	sp, #8
 8001248:	bd80      	pop	{r7, pc}
 800124a:	46c0      	nop			; (mov r8, r8)
 800124c:	e000e010 	.word	0xe000e010

08001250 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	60b9      	str	r1, [r7, #8]
 8001258:	607a      	str	r2, [r7, #4]
 800125a:	210f      	movs	r1, #15
 800125c:	187b      	adds	r3, r7, r1
 800125e:	1c02      	adds	r2, r0, #0
 8001260:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001262:	68ba      	ldr	r2, [r7, #8]
 8001264:	187b      	adds	r3, r7, r1
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	b25b      	sxtb	r3, r3
 800126a:	0011      	movs	r1, r2
 800126c:	0018      	movs	r0, r3
 800126e:	f7ff ff5d 	bl	800112c <__NVIC_SetPriority>
}
 8001272:	46c0      	nop			; (mov r8, r8)
 8001274:	46bd      	mov	sp, r7
 8001276:	b004      	add	sp, #16
 8001278:	bd80      	pop	{r7, pc}

0800127a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b082      	sub	sp, #8
 800127e:	af00      	add	r7, sp, #0
 8001280:	0002      	movs	r2, r0
 8001282:	1dfb      	adds	r3, r7, #7
 8001284:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001286:	1dfb      	adds	r3, r7, #7
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	b25b      	sxtb	r3, r3
 800128c:	0018      	movs	r0, r3
 800128e:	f7ff ff33 	bl	80010f8 <__NVIC_EnableIRQ>
}
 8001292:	46c0      	nop			; (mov r8, r8)
 8001294:	46bd      	mov	sp, r7
 8001296:	b002      	add	sp, #8
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	0018      	movs	r0, r3
 80012a6:	f7ff ffaf 	bl	8001208 <SysTick_Config>
 80012aa:	0003      	movs	r3, r0
}
 80012ac:	0018      	movs	r0, r3
 80012ae:	46bd      	mov	sp, r7
 80012b0:	b002      	add	sp, #8
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2221      	movs	r2, #33	; 0x21
 80012c0:	5c9b      	ldrb	r3, [r3, r2]
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d008      	beq.n	80012da <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2204      	movs	r2, #4
 80012cc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2220      	movs	r2, #32
 80012d2:	2100      	movs	r1, #0
 80012d4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e020      	b.n	800131c <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	210e      	movs	r1, #14
 80012e6:	438a      	bics	r2, r1
 80012e8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2101      	movs	r1, #1
 80012f6:	438a      	bics	r2, r1
 80012f8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001302:	2101      	movs	r1, #1
 8001304:	4091      	lsls	r1, r2
 8001306:	000a      	movs	r2, r1
 8001308:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2221      	movs	r2, #33	; 0x21
 800130e:	2101      	movs	r1, #1
 8001310:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2220      	movs	r2, #32
 8001316:	2100      	movs	r1, #0
 8001318:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800131a:	2300      	movs	r3, #0
}
 800131c:	0018      	movs	r0, r3
 800131e:	46bd      	mov	sp, r7
 8001320:	b002      	add	sp, #8
 8001322:	bd80      	pop	{r7, pc}

08001324 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800132c:	210f      	movs	r1, #15
 800132e:	187b      	adds	r3, r7, r1
 8001330:	2200      	movs	r2, #0
 8001332:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2221      	movs	r2, #33	; 0x21
 8001338:	5c9b      	ldrb	r3, [r3, r2]
 800133a:	b2db      	uxtb	r3, r3
 800133c:	2b02      	cmp	r3, #2
 800133e:	d006      	beq.n	800134e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2204      	movs	r2, #4
 8001344:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8001346:	187b      	adds	r3, r7, r1
 8001348:	2201      	movs	r2, #1
 800134a:	701a      	strb	r2, [r3, #0]
 800134c:	e028      	b.n	80013a0 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	210e      	movs	r1, #14
 800135a:	438a      	bics	r2, r1
 800135c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2101      	movs	r1, #1
 800136a:	438a      	bics	r2, r1
 800136c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001376:	2101      	movs	r1, #1
 8001378:	4091      	lsls	r1, r2
 800137a:	000a      	movs	r2, r1
 800137c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2221      	movs	r2, #33	; 0x21
 8001382:	2101      	movs	r1, #1
 8001384:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2220      	movs	r2, #32
 800138a:	2100      	movs	r1, #0
 800138c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001392:	2b00      	cmp	r3, #0
 8001394:	d004      	beq.n	80013a0 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	0010      	movs	r0, r2
 800139e:	4798      	blx	r3
    }
  }
  return status;
 80013a0:	230f      	movs	r3, #15
 80013a2:	18fb      	adds	r3, r7, r3
 80013a4:	781b      	ldrb	r3, [r3, #0]
}
 80013a6:	0018      	movs	r0, r3
 80013a8:	46bd      	mov	sp, r7
 80013aa:	b004      	add	sp, #16
 80013ac:	bd80      	pop	{r7, pc}
	...

080013b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013ba:	2300      	movs	r3, #0
 80013bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013be:	e14f      	b.n	8001660 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2101      	movs	r1, #1
 80013c6:	697a      	ldr	r2, [r7, #20]
 80013c8:	4091      	lsls	r1, r2
 80013ca:	000a      	movs	r2, r1
 80013cc:	4013      	ands	r3, r2
 80013ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d100      	bne.n	80013d8 <HAL_GPIO_Init+0x28>
 80013d6:	e140      	b.n	800165a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	2203      	movs	r2, #3
 80013de:	4013      	ands	r3, r2
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d005      	beq.n	80013f0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	2203      	movs	r2, #3
 80013ea:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d130      	bne.n	8001452 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	2203      	movs	r2, #3
 80013fc:	409a      	lsls	r2, r3
 80013fe:	0013      	movs	r3, r2
 8001400:	43da      	mvns	r2, r3
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	4013      	ands	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	68da      	ldr	r2, [r3, #12]
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	409a      	lsls	r2, r3
 8001412:	0013      	movs	r3, r2
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	4313      	orrs	r3, r2
 8001418:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001426:	2201      	movs	r2, #1
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	409a      	lsls	r2, r3
 800142c:	0013      	movs	r3, r2
 800142e:	43da      	mvns	r2, r3
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	4013      	ands	r3, r2
 8001434:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	091b      	lsrs	r3, r3, #4
 800143c:	2201      	movs	r2, #1
 800143e:	401a      	ands	r2, r3
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	409a      	lsls	r2, r3
 8001444:	0013      	movs	r3, r2
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	4313      	orrs	r3, r2
 800144a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	2203      	movs	r2, #3
 8001458:	4013      	ands	r3, r2
 800145a:	2b03      	cmp	r3, #3
 800145c:	d017      	beq.n	800148e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	68db      	ldr	r3, [r3, #12]
 8001462:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	2203      	movs	r2, #3
 800146a:	409a      	lsls	r2, r3
 800146c:	0013      	movs	r3, r2
 800146e:	43da      	mvns	r2, r3
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	4013      	ands	r3, r2
 8001474:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	689a      	ldr	r2, [r3, #8]
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	409a      	lsls	r2, r3
 8001480:	0013      	movs	r3, r2
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	4313      	orrs	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	2203      	movs	r2, #3
 8001494:	4013      	ands	r3, r2
 8001496:	2b02      	cmp	r3, #2
 8001498:	d123      	bne.n	80014e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	08da      	lsrs	r2, r3, #3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	3208      	adds	r2, #8
 80014a2:	0092      	lsls	r2, r2, #2
 80014a4:	58d3      	ldr	r3, [r2, r3]
 80014a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	2207      	movs	r2, #7
 80014ac:	4013      	ands	r3, r2
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	220f      	movs	r2, #15
 80014b2:	409a      	lsls	r2, r3
 80014b4:	0013      	movs	r3, r2
 80014b6:	43da      	mvns	r2, r3
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	4013      	ands	r3, r2
 80014bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	691a      	ldr	r2, [r3, #16]
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	2107      	movs	r1, #7
 80014c6:	400b      	ands	r3, r1
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	409a      	lsls	r2, r3
 80014cc:	0013      	movs	r3, r2
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	08da      	lsrs	r2, r3, #3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	3208      	adds	r2, #8
 80014dc:	0092      	lsls	r2, r2, #2
 80014de:	6939      	ldr	r1, [r7, #16]
 80014e0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	2203      	movs	r2, #3
 80014ee:	409a      	lsls	r2, r3
 80014f0:	0013      	movs	r3, r2
 80014f2:	43da      	mvns	r2, r3
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	4013      	ands	r3, r2
 80014f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	2203      	movs	r2, #3
 8001500:	401a      	ands	r2, r3
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	409a      	lsls	r2, r3
 8001508:	0013      	movs	r3, r2
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	4313      	orrs	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685a      	ldr	r2, [r3, #4]
 800151a:	23c0      	movs	r3, #192	; 0xc0
 800151c:	029b      	lsls	r3, r3, #10
 800151e:	4013      	ands	r3, r2
 8001520:	d100      	bne.n	8001524 <HAL_GPIO_Init+0x174>
 8001522:	e09a      	b.n	800165a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001524:	4b54      	ldr	r3, [pc, #336]	; (8001678 <HAL_GPIO_Init+0x2c8>)
 8001526:	699a      	ldr	r2, [r3, #24]
 8001528:	4b53      	ldr	r3, [pc, #332]	; (8001678 <HAL_GPIO_Init+0x2c8>)
 800152a:	2101      	movs	r1, #1
 800152c:	430a      	orrs	r2, r1
 800152e:	619a      	str	r2, [r3, #24]
 8001530:	4b51      	ldr	r3, [pc, #324]	; (8001678 <HAL_GPIO_Init+0x2c8>)
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	2201      	movs	r2, #1
 8001536:	4013      	ands	r3, r2
 8001538:	60bb      	str	r3, [r7, #8]
 800153a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800153c:	4a4f      	ldr	r2, [pc, #316]	; (800167c <HAL_GPIO_Init+0x2cc>)
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	089b      	lsrs	r3, r3, #2
 8001542:	3302      	adds	r3, #2
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	589b      	ldr	r3, [r3, r2]
 8001548:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	2203      	movs	r2, #3
 800154e:	4013      	ands	r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	220f      	movs	r2, #15
 8001554:	409a      	lsls	r2, r3
 8001556:	0013      	movs	r3, r2
 8001558:	43da      	mvns	r2, r3
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	4013      	ands	r3, r2
 800155e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	2390      	movs	r3, #144	; 0x90
 8001564:	05db      	lsls	r3, r3, #23
 8001566:	429a      	cmp	r2, r3
 8001568:	d013      	beq.n	8001592 <HAL_GPIO_Init+0x1e2>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a44      	ldr	r2, [pc, #272]	; (8001680 <HAL_GPIO_Init+0x2d0>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d00d      	beq.n	800158e <HAL_GPIO_Init+0x1de>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a43      	ldr	r2, [pc, #268]	; (8001684 <HAL_GPIO_Init+0x2d4>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d007      	beq.n	800158a <HAL_GPIO_Init+0x1da>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a42      	ldr	r2, [pc, #264]	; (8001688 <HAL_GPIO_Init+0x2d8>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d101      	bne.n	8001586 <HAL_GPIO_Init+0x1d6>
 8001582:	2303      	movs	r3, #3
 8001584:	e006      	b.n	8001594 <HAL_GPIO_Init+0x1e4>
 8001586:	2305      	movs	r3, #5
 8001588:	e004      	b.n	8001594 <HAL_GPIO_Init+0x1e4>
 800158a:	2302      	movs	r3, #2
 800158c:	e002      	b.n	8001594 <HAL_GPIO_Init+0x1e4>
 800158e:	2301      	movs	r3, #1
 8001590:	e000      	b.n	8001594 <HAL_GPIO_Init+0x1e4>
 8001592:	2300      	movs	r3, #0
 8001594:	697a      	ldr	r2, [r7, #20]
 8001596:	2103      	movs	r1, #3
 8001598:	400a      	ands	r2, r1
 800159a:	0092      	lsls	r2, r2, #2
 800159c:	4093      	lsls	r3, r2
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015a4:	4935      	ldr	r1, [pc, #212]	; (800167c <HAL_GPIO_Init+0x2cc>)
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	089b      	lsrs	r3, r3, #2
 80015aa:	3302      	adds	r3, #2
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015b2:	4b36      	ldr	r3, [pc, #216]	; (800168c <HAL_GPIO_Init+0x2dc>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	43da      	mvns	r2, r3
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	4013      	ands	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685a      	ldr	r2, [r3, #4]
 80015c6:	2380      	movs	r3, #128	; 0x80
 80015c8:	035b      	lsls	r3, r3, #13
 80015ca:	4013      	ands	r3, r2
 80015cc:	d003      	beq.n	80015d6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80015d6:	4b2d      	ldr	r3, [pc, #180]	; (800168c <HAL_GPIO_Init+0x2dc>)
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80015dc:	4b2b      	ldr	r3, [pc, #172]	; (800168c <HAL_GPIO_Init+0x2dc>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	43da      	mvns	r2, r3
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	4013      	ands	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685a      	ldr	r2, [r3, #4]
 80015f0:	2380      	movs	r3, #128	; 0x80
 80015f2:	039b      	lsls	r3, r3, #14
 80015f4:	4013      	ands	r3, r2
 80015f6:	d003      	beq.n	8001600 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001600:	4b22      	ldr	r3, [pc, #136]	; (800168c <HAL_GPIO_Init+0x2dc>)
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001606:	4b21      	ldr	r3, [pc, #132]	; (800168c <HAL_GPIO_Init+0x2dc>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	43da      	mvns	r2, r3
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	4013      	ands	r3, r2
 8001614:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685a      	ldr	r2, [r3, #4]
 800161a:	2380      	movs	r3, #128	; 0x80
 800161c:	029b      	lsls	r3, r3, #10
 800161e:	4013      	ands	r3, r2
 8001620:	d003      	beq.n	800162a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	4313      	orrs	r3, r2
 8001628:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800162a:	4b18      	ldr	r3, [pc, #96]	; (800168c <HAL_GPIO_Init+0x2dc>)
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001630:	4b16      	ldr	r3, [pc, #88]	; (800168c <HAL_GPIO_Init+0x2dc>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	43da      	mvns	r2, r3
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	4013      	ands	r3, r2
 800163e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685a      	ldr	r2, [r3, #4]
 8001644:	2380      	movs	r3, #128	; 0x80
 8001646:	025b      	lsls	r3, r3, #9
 8001648:	4013      	ands	r3, r2
 800164a:	d003      	beq.n	8001654 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800164c:	693a      	ldr	r2, [r7, #16]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	4313      	orrs	r3, r2
 8001652:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001654:	4b0d      	ldr	r3, [pc, #52]	; (800168c <HAL_GPIO_Init+0x2dc>)
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	3301      	adds	r3, #1
 800165e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	40da      	lsrs	r2, r3
 8001668:	1e13      	subs	r3, r2, #0
 800166a:	d000      	beq.n	800166e <HAL_GPIO_Init+0x2be>
 800166c:	e6a8      	b.n	80013c0 <HAL_GPIO_Init+0x10>
  } 
}
 800166e:	46c0      	nop			; (mov r8, r8)
 8001670:	46c0      	nop			; (mov r8, r8)
 8001672:	46bd      	mov	sp, r7
 8001674:	b006      	add	sp, #24
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40021000 	.word	0x40021000
 800167c:	40010000 	.word	0x40010000
 8001680:	48000400 	.word	0x48000400
 8001684:	48000800 	.word	0x48000800
 8001688:	48000c00 	.word	0x48000c00
 800168c:	40010400 	.word	0x40010400

08001690 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	0008      	movs	r0, r1
 800169a:	0011      	movs	r1, r2
 800169c:	1cbb      	adds	r3, r7, #2
 800169e:	1c02      	adds	r2, r0, #0
 80016a0:	801a      	strh	r2, [r3, #0]
 80016a2:	1c7b      	adds	r3, r7, #1
 80016a4:	1c0a      	adds	r2, r1, #0
 80016a6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016a8:	1c7b      	adds	r3, r7, #1
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d004      	beq.n	80016ba <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016b0:	1cbb      	adds	r3, r7, #2
 80016b2:	881a      	ldrh	r2, [r3, #0]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016b8:	e003      	b.n	80016c2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016ba:	1cbb      	adds	r3, r7, #2
 80016bc:	881a      	ldrh	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016c2:	46c0      	nop			; (mov r8, r8)
 80016c4:	46bd      	mov	sp, r7
 80016c6:	b002      	add	sp, #8
 80016c8:	bd80      	pop	{r7, pc}
	...

080016cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b088      	sub	sp, #32
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d101      	bne.n	80016de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e301      	b.n	8001ce2 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2201      	movs	r2, #1
 80016e4:	4013      	ands	r3, r2
 80016e6:	d100      	bne.n	80016ea <HAL_RCC_OscConfig+0x1e>
 80016e8:	e08d      	b.n	8001806 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80016ea:	4bc3      	ldr	r3, [pc, #780]	; (80019f8 <HAL_RCC_OscConfig+0x32c>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	220c      	movs	r2, #12
 80016f0:	4013      	ands	r3, r2
 80016f2:	2b04      	cmp	r3, #4
 80016f4:	d00e      	beq.n	8001714 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016f6:	4bc0      	ldr	r3, [pc, #768]	; (80019f8 <HAL_RCC_OscConfig+0x32c>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	220c      	movs	r2, #12
 80016fc:	4013      	ands	r3, r2
 80016fe:	2b08      	cmp	r3, #8
 8001700:	d116      	bne.n	8001730 <HAL_RCC_OscConfig+0x64>
 8001702:	4bbd      	ldr	r3, [pc, #756]	; (80019f8 <HAL_RCC_OscConfig+0x32c>)
 8001704:	685a      	ldr	r2, [r3, #4]
 8001706:	2380      	movs	r3, #128	; 0x80
 8001708:	025b      	lsls	r3, r3, #9
 800170a:	401a      	ands	r2, r3
 800170c:	2380      	movs	r3, #128	; 0x80
 800170e:	025b      	lsls	r3, r3, #9
 8001710:	429a      	cmp	r2, r3
 8001712:	d10d      	bne.n	8001730 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001714:	4bb8      	ldr	r3, [pc, #736]	; (80019f8 <HAL_RCC_OscConfig+0x32c>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	2380      	movs	r3, #128	; 0x80
 800171a:	029b      	lsls	r3, r3, #10
 800171c:	4013      	ands	r3, r2
 800171e:	d100      	bne.n	8001722 <HAL_RCC_OscConfig+0x56>
 8001720:	e070      	b.n	8001804 <HAL_RCC_OscConfig+0x138>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d000      	beq.n	800172c <HAL_RCC_OscConfig+0x60>
 800172a:	e06b      	b.n	8001804 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e2d8      	b.n	8001ce2 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d107      	bne.n	8001748 <HAL_RCC_OscConfig+0x7c>
 8001738:	4baf      	ldr	r3, [pc, #700]	; (80019f8 <HAL_RCC_OscConfig+0x32c>)
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	4bae      	ldr	r3, [pc, #696]	; (80019f8 <HAL_RCC_OscConfig+0x32c>)
 800173e:	2180      	movs	r1, #128	; 0x80
 8001740:	0249      	lsls	r1, r1, #9
 8001742:	430a      	orrs	r2, r1
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	e02f      	b.n	80017a8 <HAL_RCC_OscConfig+0xdc>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d10c      	bne.n	800176a <HAL_RCC_OscConfig+0x9e>
 8001750:	4ba9      	ldr	r3, [pc, #676]	; (80019f8 <HAL_RCC_OscConfig+0x32c>)
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	4ba8      	ldr	r3, [pc, #672]	; (80019f8 <HAL_RCC_OscConfig+0x32c>)
 8001756:	49a9      	ldr	r1, [pc, #676]	; (80019fc <HAL_RCC_OscConfig+0x330>)
 8001758:	400a      	ands	r2, r1
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	4ba6      	ldr	r3, [pc, #664]	; (80019f8 <HAL_RCC_OscConfig+0x32c>)
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	4ba5      	ldr	r3, [pc, #660]	; (80019f8 <HAL_RCC_OscConfig+0x32c>)
 8001762:	49a7      	ldr	r1, [pc, #668]	; (8001a00 <HAL_RCC_OscConfig+0x334>)
 8001764:	400a      	ands	r2, r1
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	e01e      	b.n	80017a8 <HAL_RCC_OscConfig+0xdc>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	2b05      	cmp	r3, #5
 8001770:	d10e      	bne.n	8001790 <HAL_RCC_OscConfig+0xc4>
 8001772:	4ba1      	ldr	r3, [pc, #644]	; (80019f8 <HAL_RCC_OscConfig+0x32c>)
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	4ba0      	ldr	r3, [pc, #640]	; (80019f8 <HAL_RCC_OscConfig+0x32c>)
 8001778:	2180      	movs	r1, #128	; 0x80
 800177a:	02c9      	lsls	r1, r1, #11
 800177c:	430a      	orrs	r2, r1
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	4b9d      	ldr	r3, [pc, #628]	; (80019f8 <HAL_RCC_OscConfig+0x32c>)
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	4b9c      	ldr	r3, [pc, #624]	; (80019f8 <HAL_RCC_OscConfig+0x32c>)
 8001786:	2180      	movs	r1, #128	; 0x80
 8001788:	0249      	lsls	r1, r1, #9
 800178a:	430a      	orrs	r2, r1
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	e00b      	b.n	80017a8 <HAL_RCC_OscConfig+0xdc>
 8001790:	4b99      	ldr	r3, [pc, #612]	; (80019f8 <HAL_RCC_OscConfig+0x32c>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	4b98      	ldr	r3, [pc, #608]	; (80019f8 <HAL_RCC_OscConfig+0x32c>)
 8001796:	4999      	ldr	r1, [pc, #612]	; (80019fc <HAL_RCC_OscConfig+0x330>)
 8001798:	400a      	ands	r2, r1
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	4b96      	ldr	r3, [pc, #600]	; (80019f8 <HAL_RCC_OscConfig+0x32c>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	4b95      	ldr	r3, [pc, #596]	; (80019f8 <HAL_RCC_OscConfig+0x32c>)
 80017a2:	4997      	ldr	r1, [pc, #604]	; (8001a00 <HAL_RCC_OscConfig+0x334>)
 80017a4:	400a      	ands	r2, r1
 80017a6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d014      	beq.n	80017da <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b0:	f7ff fc74 	bl	800109c <HAL_GetTick>
 80017b4:	0003      	movs	r3, r0
 80017b6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017b8:	e008      	b.n	80017cc <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017ba:	f7ff fc6f 	bl	800109c <HAL_GetTick>
 80017be:	0002      	movs	r2, r0
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b64      	cmp	r3, #100	; 0x64
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e28a      	b.n	8001ce2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017cc:	4b8a      	ldr	r3, [pc, #552]	; (80019f8 <HAL_RCC_OscConfig+0x32c>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	2380      	movs	r3, #128	; 0x80
 80017d2:	029b      	lsls	r3, r3, #10
 80017d4:	4013      	ands	r3, r2
 80017d6:	d0f0      	beq.n	80017ba <HAL_RCC_OscConfig+0xee>
 80017d8:	e015      	b.n	8001806 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017da:	f7ff fc5f 	bl	800109c <HAL_GetTick>
 80017de:	0003      	movs	r3, r0
 80017e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017e4:	f7ff fc5a 	bl	800109c <HAL_GetTick>
 80017e8:	0002      	movs	r2, r0
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b64      	cmp	r3, #100	; 0x64
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e275      	b.n	8001ce2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017f6:	4b80      	ldr	r3, [pc, #512]	; (80019f8 <HAL_RCC_OscConfig+0x32c>)
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	2380      	movs	r3, #128	; 0x80
 80017fc:	029b      	lsls	r3, r3, #10
 80017fe:	4013      	ands	r3, r2
 8001800:	d1f0      	bne.n	80017e4 <HAL_RCC_OscConfig+0x118>
 8001802:	e000      	b.n	8001806 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001804:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2202      	movs	r2, #2
 800180c:	4013      	ands	r3, r2
 800180e:	d100      	bne.n	8001812 <HAL_RCC_OscConfig+0x146>
 8001810:	e069      	b.n	80018e6 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001812:	4b79      	ldr	r3, [pc, #484]	; (80019f8 <HAL_RCC_OscConfig+0x32c>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	220c      	movs	r2, #12
 8001818:	4013      	ands	r3, r2
 800181a:	d00b      	beq.n	8001834 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800181c:	4b76      	ldr	r3, [pc, #472]	; (80019f8 <HAL_RCC_OscConfig+0x32c>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	220c      	movs	r2, #12
 8001822:	4013      	ands	r3, r2
 8001824:	2b08      	cmp	r3, #8
 8001826:	d11c      	bne.n	8001862 <HAL_RCC_OscConfig+0x196>
 8001828:	4b73      	ldr	r3, [pc, #460]	; (80019f8 <HAL_RCC_OscConfig+0x32c>)
 800182a:	685a      	ldr	r2, [r3, #4]
 800182c:	2380      	movs	r3, #128	; 0x80
 800182e:	025b      	lsls	r3, r3, #9
 8001830:	4013      	ands	r3, r2
 8001832:	d116      	bne.n	8001862 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001834:	4b70      	ldr	r3, [pc, #448]	; (80019f8 <HAL_RCC_OscConfig+0x32c>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2202      	movs	r2, #2
 800183a:	4013      	ands	r3, r2
 800183c:	d005      	beq.n	800184a <HAL_RCC_OscConfig+0x17e>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d001      	beq.n	800184a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e24b      	b.n	8001ce2 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800184a:	4b6b      	ldr	r3, [pc, #428]	; (80019f8 <HAL_RCC_OscConfig+0x32c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	22f8      	movs	r2, #248	; 0xf8
 8001850:	4393      	bics	r3, r2
 8001852:	0019      	movs	r1, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	691b      	ldr	r3, [r3, #16]
 8001858:	00da      	lsls	r2, r3, #3
 800185a:	4b67      	ldr	r3, [pc, #412]	; (80019f8 <HAL_RCC_OscConfig+0x32c>)
 800185c:	430a      	orrs	r2, r1
 800185e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001860:	e041      	b.n	80018e6 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d024      	beq.n	80018b4 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800186a:	4b63      	ldr	r3, [pc, #396]	; (80019f8 <HAL_RCC_OscConfig+0x32c>)
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	4b62      	ldr	r3, [pc, #392]	; (80019f8 <HAL_RCC_OscConfig+0x32c>)
 8001870:	2101      	movs	r1, #1
 8001872:	430a      	orrs	r2, r1
 8001874:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001876:	f7ff fc11 	bl	800109c <HAL_GetTick>
 800187a:	0003      	movs	r3, r0
 800187c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001880:	f7ff fc0c 	bl	800109c <HAL_GetTick>
 8001884:	0002      	movs	r2, r0
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b02      	cmp	r3, #2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e227      	b.n	8001ce2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001892:	4b59      	ldr	r3, [pc, #356]	; (80019f8 <HAL_RCC_OscConfig+0x32c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2202      	movs	r2, #2
 8001898:	4013      	ands	r3, r2
 800189a:	d0f1      	beq.n	8001880 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800189c:	4b56      	ldr	r3, [pc, #344]	; (80019f8 <HAL_RCC_OscConfig+0x32c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	22f8      	movs	r2, #248	; 0xf8
 80018a2:	4393      	bics	r3, r2
 80018a4:	0019      	movs	r1, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	00da      	lsls	r2, r3, #3
 80018ac:	4b52      	ldr	r3, [pc, #328]	; (80019f8 <HAL_RCC_OscConfig+0x32c>)
 80018ae:	430a      	orrs	r2, r1
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	e018      	b.n	80018e6 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018b4:	4b50      	ldr	r3, [pc, #320]	; (80019f8 <HAL_RCC_OscConfig+0x32c>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	4b4f      	ldr	r3, [pc, #316]	; (80019f8 <HAL_RCC_OscConfig+0x32c>)
 80018ba:	2101      	movs	r1, #1
 80018bc:	438a      	bics	r2, r1
 80018be:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c0:	f7ff fbec 	bl	800109c <HAL_GetTick>
 80018c4:	0003      	movs	r3, r0
 80018c6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018c8:	e008      	b.n	80018dc <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018ca:	f7ff fbe7 	bl	800109c <HAL_GetTick>
 80018ce:	0002      	movs	r2, r0
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e202      	b.n	8001ce2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018dc:	4b46      	ldr	r3, [pc, #280]	; (80019f8 <HAL_RCC_OscConfig+0x32c>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2202      	movs	r2, #2
 80018e2:	4013      	ands	r3, r2
 80018e4:	d1f1      	bne.n	80018ca <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2208      	movs	r2, #8
 80018ec:	4013      	ands	r3, r2
 80018ee:	d036      	beq.n	800195e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	69db      	ldr	r3, [r3, #28]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d019      	beq.n	800192c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018f8:	4b3f      	ldr	r3, [pc, #252]	; (80019f8 <HAL_RCC_OscConfig+0x32c>)
 80018fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018fc:	4b3e      	ldr	r3, [pc, #248]	; (80019f8 <HAL_RCC_OscConfig+0x32c>)
 80018fe:	2101      	movs	r1, #1
 8001900:	430a      	orrs	r2, r1
 8001902:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001904:	f7ff fbca 	bl	800109c <HAL_GetTick>
 8001908:	0003      	movs	r3, r0
 800190a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800190c:	e008      	b.n	8001920 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800190e:	f7ff fbc5 	bl	800109c <HAL_GetTick>
 8001912:	0002      	movs	r2, r0
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d901      	bls.n	8001920 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e1e0      	b.n	8001ce2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001920:	4b35      	ldr	r3, [pc, #212]	; (80019f8 <HAL_RCC_OscConfig+0x32c>)
 8001922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001924:	2202      	movs	r2, #2
 8001926:	4013      	ands	r3, r2
 8001928:	d0f1      	beq.n	800190e <HAL_RCC_OscConfig+0x242>
 800192a:	e018      	b.n	800195e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800192c:	4b32      	ldr	r3, [pc, #200]	; (80019f8 <HAL_RCC_OscConfig+0x32c>)
 800192e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001930:	4b31      	ldr	r3, [pc, #196]	; (80019f8 <HAL_RCC_OscConfig+0x32c>)
 8001932:	2101      	movs	r1, #1
 8001934:	438a      	bics	r2, r1
 8001936:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001938:	f7ff fbb0 	bl	800109c <HAL_GetTick>
 800193c:	0003      	movs	r3, r0
 800193e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001940:	e008      	b.n	8001954 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001942:	f7ff fbab 	bl	800109c <HAL_GetTick>
 8001946:	0002      	movs	r2, r0
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e1c6      	b.n	8001ce2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001954:	4b28      	ldr	r3, [pc, #160]	; (80019f8 <HAL_RCC_OscConfig+0x32c>)
 8001956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001958:	2202      	movs	r2, #2
 800195a:	4013      	ands	r3, r2
 800195c:	d1f1      	bne.n	8001942 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2204      	movs	r2, #4
 8001964:	4013      	ands	r3, r2
 8001966:	d100      	bne.n	800196a <HAL_RCC_OscConfig+0x29e>
 8001968:	e0b4      	b.n	8001ad4 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800196a:	201f      	movs	r0, #31
 800196c:	183b      	adds	r3, r7, r0
 800196e:	2200      	movs	r2, #0
 8001970:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001972:	4b21      	ldr	r3, [pc, #132]	; (80019f8 <HAL_RCC_OscConfig+0x32c>)
 8001974:	69da      	ldr	r2, [r3, #28]
 8001976:	2380      	movs	r3, #128	; 0x80
 8001978:	055b      	lsls	r3, r3, #21
 800197a:	4013      	ands	r3, r2
 800197c:	d110      	bne.n	80019a0 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800197e:	4b1e      	ldr	r3, [pc, #120]	; (80019f8 <HAL_RCC_OscConfig+0x32c>)
 8001980:	69da      	ldr	r2, [r3, #28]
 8001982:	4b1d      	ldr	r3, [pc, #116]	; (80019f8 <HAL_RCC_OscConfig+0x32c>)
 8001984:	2180      	movs	r1, #128	; 0x80
 8001986:	0549      	lsls	r1, r1, #21
 8001988:	430a      	orrs	r2, r1
 800198a:	61da      	str	r2, [r3, #28]
 800198c:	4b1a      	ldr	r3, [pc, #104]	; (80019f8 <HAL_RCC_OscConfig+0x32c>)
 800198e:	69da      	ldr	r2, [r3, #28]
 8001990:	2380      	movs	r3, #128	; 0x80
 8001992:	055b      	lsls	r3, r3, #21
 8001994:	4013      	ands	r3, r2
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800199a:	183b      	adds	r3, r7, r0
 800199c:	2201      	movs	r2, #1
 800199e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a0:	4b18      	ldr	r3, [pc, #96]	; (8001a04 <HAL_RCC_OscConfig+0x338>)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	2380      	movs	r3, #128	; 0x80
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	4013      	ands	r3, r2
 80019aa:	d11a      	bne.n	80019e2 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019ac:	4b15      	ldr	r3, [pc, #84]	; (8001a04 <HAL_RCC_OscConfig+0x338>)
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	4b14      	ldr	r3, [pc, #80]	; (8001a04 <HAL_RCC_OscConfig+0x338>)
 80019b2:	2180      	movs	r1, #128	; 0x80
 80019b4:	0049      	lsls	r1, r1, #1
 80019b6:	430a      	orrs	r2, r1
 80019b8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ba:	f7ff fb6f 	bl	800109c <HAL_GetTick>
 80019be:	0003      	movs	r3, r0
 80019c0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019c4:	f7ff fb6a 	bl	800109c <HAL_GetTick>
 80019c8:	0002      	movs	r2, r0
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b64      	cmp	r3, #100	; 0x64
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e185      	b.n	8001ce2 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d6:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <HAL_RCC_OscConfig+0x338>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	2380      	movs	r3, #128	; 0x80
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	4013      	ands	r3, r2
 80019e0:	d0f0      	beq.n	80019c4 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d10e      	bne.n	8001a08 <HAL_RCC_OscConfig+0x33c>
 80019ea:	4b03      	ldr	r3, [pc, #12]	; (80019f8 <HAL_RCC_OscConfig+0x32c>)
 80019ec:	6a1a      	ldr	r2, [r3, #32]
 80019ee:	4b02      	ldr	r3, [pc, #8]	; (80019f8 <HAL_RCC_OscConfig+0x32c>)
 80019f0:	2101      	movs	r1, #1
 80019f2:	430a      	orrs	r2, r1
 80019f4:	621a      	str	r2, [r3, #32]
 80019f6:	e035      	b.n	8001a64 <HAL_RCC_OscConfig+0x398>
 80019f8:	40021000 	.word	0x40021000
 80019fc:	fffeffff 	.word	0xfffeffff
 8001a00:	fffbffff 	.word	0xfffbffff
 8001a04:	40007000 	.word	0x40007000
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d10c      	bne.n	8001a2a <HAL_RCC_OscConfig+0x35e>
 8001a10:	4bb6      	ldr	r3, [pc, #728]	; (8001cec <HAL_RCC_OscConfig+0x620>)
 8001a12:	6a1a      	ldr	r2, [r3, #32]
 8001a14:	4bb5      	ldr	r3, [pc, #724]	; (8001cec <HAL_RCC_OscConfig+0x620>)
 8001a16:	2101      	movs	r1, #1
 8001a18:	438a      	bics	r2, r1
 8001a1a:	621a      	str	r2, [r3, #32]
 8001a1c:	4bb3      	ldr	r3, [pc, #716]	; (8001cec <HAL_RCC_OscConfig+0x620>)
 8001a1e:	6a1a      	ldr	r2, [r3, #32]
 8001a20:	4bb2      	ldr	r3, [pc, #712]	; (8001cec <HAL_RCC_OscConfig+0x620>)
 8001a22:	2104      	movs	r1, #4
 8001a24:	438a      	bics	r2, r1
 8001a26:	621a      	str	r2, [r3, #32]
 8001a28:	e01c      	b.n	8001a64 <HAL_RCC_OscConfig+0x398>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	2b05      	cmp	r3, #5
 8001a30:	d10c      	bne.n	8001a4c <HAL_RCC_OscConfig+0x380>
 8001a32:	4bae      	ldr	r3, [pc, #696]	; (8001cec <HAL_RCC_OscConfig+0x620>)
 8001a34:	6a1a      	ldr	r2, [r3, #32]
 8001a36:	4bad      	ldr	r3, [pc, #692]	; (8001cec <HAL_RCC_OscConfig+0x620>)
 8001a38:	2104      	movs	r1, #4
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	621a      	str	r2, [r3, #32]
 8001a3e:	4bab      	ldr	r3, [pc, #684]	; (8001cec <HAL_RCC_OscConfig+0x620>)
 8001a40:	6a1a      	ldr	r2, [r3, #32]
 8001a42:	4baa      	ldr	r3, [pc, #680]	; (8001cec <HAL_RCC_OscConfig+0x620>)
 8001a44:	2101      	movs	r1, #1
 8001a46:	430a      	orrs	r2, r1
 8001a48:	621a      	str	r2, [r3, #32]
 8001a4a:	e00b      	b.n	8001a64 <HAL_RCC_OscConfig+0x398>
 8001a4c:	4ba7      	ldr	r3, [pc, #668]	; (8001cec <HAL_RCC_OscConfig+0x620>)
 8001a4e:	6a1a      	ldr	r2, [r3, #32]
 8001a50:	4ba6      	ldr	r3, [pc, #664]	; (8001cec <HAL_RCC_OscConfig+0x620>)
 8001a52:	2101      	movs	r1, #1
 8001a54:	438a      	bics	r2, r1
 8001a56:	621a      	str	r2, [r3, #32]
 8001a58:	4ba4      	ldr	r3, [pc, #656]	; (8001cec <HAL_RCC_OscConfig+0x620>)
 8001a5a:	6a1a      	ldr	r2, [r3, #32]
 8001a5c:	4ba3      	ldr	r3, [pc, #652]	; (8001cec <HAL_RCC_OscConfig+0x620>)
 8001a5e:	2104      	movs	r1, #4
 8001a60:	438a      	bics	r2, r1
 8001a62:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d014      	beq.n	8001a96 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a6c:	f7ff fb16 	bl	800109c <HAL_GetTick>
 8001a70:	0003      	movs	r3, r0
 8001a72:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a74:	e009      	b.n	8001a8a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a76:	f7ff fb11 	bl	800109c <HAL_GetTick>
 8001a7a:	0002      	movs	r2, r0
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	4a9b      	ldr	r2, [pc, #620]	; (8001cf0 <HAL_RCC_OscConfig+0x624>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e12b      	b.n	8001ce2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a8a:	4b98      	ldr	r3, [pc, #608]	; (8001cec <HAL_RCC_OscConfig+0x620>)
 8001a8c:	6a1b      	ldr	r3, [r3, #32]
 8001a8e:	2202      	movs	r2, #2
 8001a90:	4013      	ands	r3, r2
 8001a92:	d0f0      	beq.n	8001a76 <HAL_RCC_OscConfig+0x3aa>
 8001a94:	e013      	b.n	8001abe <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a96:	f7ff fb01 	bl	800109c <HAL_GetTick>
 8001a9a:	0003      	movs	r3, r0
 8001a9c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a9e:	e009      	b.n	8001ab4 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001aa0:	f7ff fafc 	bl	800109c <HAL_GetTick>
 8001aa4:	0002      	movs	r2, r0
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	4a91      	ldr	r2, [pc, #580]	; (8001cf0 <HAL_RCC_OscConfig+0x624>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e116      	b.n	8001ce2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ab4:	4b8d      	ldr	r3, [pc, #564]	; (8001cec <HAL_RCC_OscConfig+0x620>)
 8001ab6:	6a1b      	ldr	r3, [r3, #32]
 8001ab8:	2202      	movs	r2, #2
 8001aba:	4013      	ands	r3, r2
 8001abc:	d1f0      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001abe:	231f      	movs	r3, #31
 8001ac0:	18fb      	adds	r3, r7, r3
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d105      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ac8:	4b88      	ldr	r3, [pc, #544]	; (8001cec <HAL_RCC_OscConfig+0x620>)
 8001aca:	69da      	ldr	r2, [r3, #28]
 8001acc:	4b87      	ldr	r3, [pc, #540]	; (8001cec <HAL_RCC_OscConfig+0x620>)
 8001ace:	4989      	ldr	r1, [pc, #548]	; (8001cf4 <HAL_RCC_OscConfig+0x628>)
 8001ad0:	400a      	ands	r2, r1
 8001ad2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2210      	movs	r2, #16
 8001ada:	4013      	ands	r3, r2
 8001adc:	d063      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	695b      	ldr	r3, [r3, #20]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d12a      	bne.n	8001b3c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001ae6:	4b81      	ldr	r3, [pc, #516]	; (8001cec <HAL_RCC_OscConfig+0x620>)
 8001ae8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001aea:	4b80      	ldr	r3, [pc, #512]	; (8001cec <HAL_RCC_OscConfig+0x620>)
 8001aec:	2104      	movs	r1, #4
 8001aee:	430a      	orrs	r2, r1
 8001af0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001af2:	4b7e      	ldr	r3, [pc, #504]	; (8001cec <HAL_RCC_OscConfig+0x620>)
 8001af4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001af6:	4b7d      	ldr	r3, [pc, #500]	; (8001cec <HAL_RCC_OscConfig+0x620>)
 8001af8:	2101      	movs	r1, #1
 8001afa:	430a      	orrs	r2, r1
 8001afc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001afe:	f7ff facd 	bl	800109c <HAL_GetTick>
 8001b02:	0003      	movs	r3, r0
 8001b04:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001b06:	e008      	b.n	8001b1a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001b08:	f7ff fac8 	bl	800109c <HAL_GetTick>
 8001b0c:	0002      	movs	r2, r0
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e0e3      	b.n	8001ce2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001b1a:	4b74      	ldr	r3, [pc, #464]	; (8001cec <HAL_RCC_OscConfig+0x620>)
 8001b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b1e:	2202      	movs	r2, #2
 8001b20:	4013      	ands	r3, r2
 8001b22:	d0f1      	beq.n	8001b08 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001b24:	4b71      	ldr	r3, [pc, #452]	; (8001cec <HAL_RCC_OscConfig+0x620>)
 8001b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b28:	22f8      	movs	r2, #248	; 0xf8
 8001b2a:	4393      	bics	r3, r2
 8001b2c:	0019      	movs	r1, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	699b      	ldr	r3, [r3, #24]
 8001b32:	00da      	lsls	r2, r3, #3
 8001b34:	4b6d      	ldr	r3, [pc, #436]	; (8001cec <HAL_RCC_OscConfig+0x620>)
 8001b36:	430a      	orrs	r2, r1
 8001b38:	635a      	str	r2, [r3, #52]	; 0x34
 8001b3a:	e034      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	695b      	ldr	r3, [r3, #20]
 8001b40:	3305      	adds	r3, #5
 8001b42:	d111      	bne.n	8001b68 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001b44:	4b69      	ldr	r3, [pc, #420]	; (8001cec <HAL_RCC_OscConfig+0x620>)
 8001b46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b48:	4b68      	ldr	r3, [pc, #416]	; (8001cec <HAL_RCC_OscConfig+0x620>)
 8001b4a:	2104      	movs	r1, #4
 8001b4c:	438a      	bics	r2, r1
 8001b4e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001b50:	4b66      	ldr	r3, [pc, #408]	; (8001cec <HAL_RCC_OscConfig+0x620>)
 8001b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b54:	22f8      	movs	r2, #248	; 0xf8
 8001b56:	4393      	bics	r3, r2
 8001b58:	0019      	movs	r1, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	699b      	ldr	r3, [r3, #24]
 8001b5e:	00da      	lsls	r2, r3, #3
 8001b60:	4b62      	ldr	r3, [pc, #392]	; (8001cec <HAL_RCC_OscConfig+0x620>)
 8001b62:	430a      	orrs	r2, r1
 8001b64:	635a      	str	r2, [r3, #52]	; 0x34
 8001b66:	e01e      	b.n	8001ba6 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001b68:	4b60      	ldr	r3, [pc, #384]	; (8001cec <HAL_RCC_OscConfig+0x620>)
 8001b6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b6c:	4b5f      	ldr	r3, [pc, #380]	; (8001cec <HAL_RCC_OscConfig+0x620>)
 8001b6e:	2104      	movs	r1, #4
 8001b70:	430a      	orrs	r2, r1
 8001b72:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001b74:	4b5d      	ldr	r3, [pc, #372]	; (8001cec <HAL_RCC_OscConfig+0x620>)
 8001b76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b78:	4b5c      	ldr	r3, [pc, #368]	; (8001cec <HAL_RCC_OscConfig+0x620>)
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	438a      	bics	r2, r1
 8001b7e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b80:	f7ff fa8c 	bl	800109c <HAL_GetTick>
 8001b84:	0003      	movs	r3, r0
 8001b86:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001b88:	e008      	b.n	8001b9c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001b8a:	f7ff fa87 	bl	800109c <HAL_GetTick>
 8001b8e:	0002      	movs	r2, r0
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d901      	bls.n	8001b9c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e0a2      	b.n	8001ce2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001b9c:	4b53      	ldr	r3, [pc, #332]	; (8001cec <HAL_RCC_OscConfig+0x620>)
 8001b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ba0:	2202      	movs	r2, #2
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	d1f1      	bne.n	8001b8a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a1b      	ldr	r3, [r3, #32]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d100      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x4e4>
 8001bae:	e097      	b.n	8001ce0 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bb0:	4b4e      	ldr	r3, [pc, #312]	; (8001cec <HAL_RCC_OscConfig+0x620>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	220c      	movs	r2, #12
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	2b08      	cmp	r3, #8
 8001bba:	d100      	bne.n	8001bbe <HAL_RCC_OscConfig+0x4f2>
 8001bbc:	e06b      	b.n	8001c96 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6a1b      	ldr	r3, [r3, #32]
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d14c      	bne.n	8001c60 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bc6:	4b49      	ldr	r3, [pc, #292]	; (8001cec <HAL_RCC_OscConfig+0x620>)
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	4b48      	ldr	r3, [pc, #288]	; (8001cec <HAL_RCC_OscConfig+0x620>)
 8001bcc:	494a      	ldr	r1, [pc, #296]	; (8001cf8 <HAL_RCC_OscConfig+0x62c>)
 8001bce:	400a      	ands	r2, r1
 8001bd0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd2:	f7ff fa63 	bl	800109c <HAL_GetTick>
 8001bd6:	0003      	movs	r3, r0
 8001bd8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bdc:	f7ff fa5e 	bl	800109c <HAL_GetTick>
 8001be0:	0002      	movs	r2, r0
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e079      	b.n	8001ce2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bee:	4b3f      	ldr	r3, [pc, #252]	; (8001cec <HAL_RCC_OscConfig+0x620>)
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	2380      	movs	r3, #128	; 0x80
 8001bf4:	049b      	lsls	r3, r3, #18
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	d1f0      	bne.n	8001bdc <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bfa:	4b3c      	ldr	r3, [pc, #240]	; (8001cec <HAL_RCC_OscConfig+0x620>)
 8001bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfe:	220f      	movs	r2, #15
 8001c00:	4393      	bics	r3, r2
 8001c02:	0019      	movs	r1, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c08:	4b38      	ldr	r3, [pc, #224]	; (8001cec <HAL_RCC_OscConfig+0x620>)
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c0e:	4b37      	ldr	r3, [pc, #220]	; (8001cec <HAL_RCC_OscConfig+0x620>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	4a3a      	ldr	r2, [pc, #232]	; (8001cfc <HAL_RCC_OscConfig+0x630>)
 8001c14:	4013      	ands	r3, r2
 8001c16:	0019      	movs	r1, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c20:	431a      	orrs	r2, r3
 8001c22:	4b32      	ldr	r3, [pc, #200]	; (8001cec <HAL_RCC_OscConfig+0x620>)
 8001c24:	430a      	orrs	r2, r1
 8001c26:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c28:	4b30      	ldr	r3, [pc, #192]	; (8001cec <HAL_RCC_OscConfig+0x620>)
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	4b2f      	ldr	r3, [pc, #188]	; (8001cec <HAL_RCC_OscConfig+0x620>)
 8001c2e:	2180      	movs	r1, #128	; 0x80
 8001c30:	0449      	lsls	r1, r1, #17
 8001c32:	430a      	orrs	r2, r1
 8001c34:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c36:	f7ff fa31 	bl	800109c <HAL_GetTick>
 8001c3a:	0003      	movs	r3, r0
 8001c3c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c40:	f7ff fa2c 	bl	800109c <HAL_GetTick>
 8001c44:	0002      	movs	r2, r0
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e047      	b.n	8001ce2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c52:	4b26      	ldr	r3, [pc, #152]	; (8001cec <HAL_RCC_OscConfig+0x620>)
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	2380      	movs	r3, #128	; 0x80
 8001c58:	049b      	lsls	r3, r3, #18
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	d0f0      	beq.n	8001c40 <HAL_RCC_OscConfig+0x574>
 8001c5e:	e03f      	b.n	8001ce0 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c60:	4b22      	ldr	r3, [pc, #136]	; (8001cec <HAL_RCC_OscConfig+0x620>)
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	4b21      	ldr	r3, [pc, #132]	; (8001cec <HAL_RCC_OscConfig+0x620>)
 8001c66:	4924      	ldr	r1, [pc, #144]	; (8001cf8 <HAL_RCC_OscConfig+0x62c>)
 8001c68:	400a      	ands	r2, r1
 8001c6a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c6c:	f7ff fa16 	bl	800109c <HAL_GetTick>
 8001c70:	0003      	movs	r3, r0
 8001c72:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c74:	e008      	b.n	8001c88 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c76:	f7ff fa11 	bl	800109c <HAL_GetTick>
 8001c7a:	0002      	movs	r2, r0
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d901      	bls.n	8001c88 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e02c      	b.n	8001ce2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c88:	4b18      	ldr	r3, [pc, #96]	; (8001cec <HAL_RCC_OscConfig+0x620>)
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	2380      	movs	r3, #128	; 0x80
 8001c8e:	049b      	lsls	r3, r3, #18
 8001c90:	4013      	ands	r3, r2
 8001c92:	d1f0      	bne.n	8001c76 <HAL_RCC_OscConfig+0x5aa>
 8001c94:	e024      	b.n	8001ce0 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a1b      	ldr	r3, [r3, #32]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d101      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e01f      	b.n	8001ce2 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001ca2:	4b12      	ldr	r3, [pc, #72]	; (8001cec <HAL_RCC_OscConfig+0x620>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001ca8:	4b10      	ldr	r3, [pc, #64]	; (8001cec <HAL_RCC_OscConfig+0x620>)
 8001caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cac:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cae:	697a      	ldr	r2, [r7, #20]
 8001cb0:	2380      	movs	r3, #128	; 0x80
 8001cb2:	025b      	lsls	r3, r3, #9
 8001cb4:	401a      	ands	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d10e      	bne.n	8001cdc <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	220f      	movs	r2, #15
 8001cc2:	401a      	ands	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d107      	bne.n	8001cdc <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001ccc:	697a      	ldr	r2, [r7, #20]
 8001cce:	23f0      	movs	r3, #240	; 0xf0
 8001cd0:	039b      	lsls	r3, r3, #14
 8001cd2:	401a      	ands	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d001      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e000      	b.n	8001ce2 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	0018      	movs	r0, r3
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	b008      	add	sp, #32
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	46c0      	nop			; (mov r8, r8)
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	00001388 	.word	0x00001388
 8001cf4:	efffffff 	.word	0xefffffff
 8001cf8:	feffffff 	.word	0xfeffffff
 8001cfc:	ffc2ffff 	.word	0xffc2ffff

08001d00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d101      	bne.n	8001d14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e0b3      	b.n	8001e7c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d14:	4b5b      	ldr	r3, [pc, #364]	; (8001e84 <HAL_RCC_ClockConfig+0x184>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d911      	bls.n	8001d46 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d22:	4b58      	ldr	r3, [pc, #352]	; (8001e84 <HAL_RCC_ClockConfig+0x184>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2201      	movs	r2, #1
 8001d28:	4393      	bics	r3, r2
 8001d2a:	0019      	movs	r1, r3
 8001d2c:	4b55      	ldr	r3, [pc, #340]	; (8001e84 <HAL_RCC_ClockConfig+0x184>)
 8001d2e:	683a      	ldr	r2, [r7, #0]
 8001d30:	430a      	orrs	r2, r1
 8001d32:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d34:	4b53      	ldr	r3, [pc, #332]	; (8001e84 <HAL_RCC_ClockConfig+0x184>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	683a      	ldr	r2, [r7, #0]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d001      	beq.n	8001d46 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e09a      	b.n	8001e7c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2202      	movs	r2, #2
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	d015      	beq.n	8001d7c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2204      	movs	r2, #4
 8001d56:	4013      	ands	r3, r2
 8001d58:	d006      	beq.n	8001d68 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001d5a:	4b4b      	ldr	r3, [pc, #300]	; (8001e88 <HAL_RCC_ClockConfig+0x188>)
 8001d5c:	685a      	ldr	r2, [r3, #4]
 8001d5e:	4b4a      	ldr	r3, [pc, #296]	; (8001e88 <HAL_RCC_ClockConfig+0x188>)
 8001d60:	21e0      	movs	r1, #224	; 0xe0
 8001d62:	00c9      	lsls	r1, r1, #3
 8001d64:	430a      	orrs	r2, r1
 8001d66:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d68:	4b47      	ldr	r3, [pc, #284]	; (8001e88 <HAL_RCC_ClockConfig+0x188>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	22f0      	movs	r2, #240	; 0xf0
 8001d6e:	4393      	bics	r3, r2
 8001d70:	0019      	movs	r1, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	689a      	ldr	r2, [r3, #8]
 8001d76:	4b44      	ldr	r3, [pc, #272]	; (8001e88 <HAL_RCC_ClockConfig+0x188>)
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2201      	movs	r2, #1
 8001d82:	4013      	ands	r3, r2
 8001d84:	d040      	beq.n	8001e08 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d107      	bne.n	8001d9e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d8e:	4b3e      	ldr	r3, [pc, #248]	; (8001e88 <HAL_RCC_ClockConfig+0x188>)
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	2380      	movs	r3, #128	; 0x80
 8001d94:	029b      	lsls	r3, r3, #10
 8001d96:	4013      	ands	r3, r2
 8001d98:	d114      	bne.n	8001dc4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e06e      	b.n	8001e7c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d107      	bne.n	8001db6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001da6:	4b38      	ldr	r3, [pc, #224]	; (8001e88 <HAL_RCC_ClockConfig+0x188>)
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	2380      	movs	r3, #128	; 0x80
 8001dac:	049b      	lsls	r3, r3, #18
 8001dae:	4013      	ands	r3, r2
 8001db0:	d108      	bne.n	8001dc4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e062      	b.n	8001e7c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001db6:	4b34      	ldr	r3, [pc, #208]	; (8001e88 <HAL_RCC_ClockConfig+0x188>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2202      	movs	r2, #2
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	d101      	bne.n	8001dc4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e05b      	b.n	8001e7c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dc4:	4b30      	ldr	r3, [pc, #192]	; (8001e88 <HAL_RCC_ClockConfig+0x188>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	2203      	movs	r2, #3
 8001dca:	4393      	bics	r3, r2
 8001dcc:	0019      	movs	r1, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685a      	ldr	r2, [r3, #4]
 8001dd2:	4b2d      	ldr	r3, [pc, #180]	; (8001e88 <HAL_RCC_ClockConfig+0x188>)
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dd8:	f7ff f960 	bl	800109c <HAL_GetTick>
 8001ddc:	0003      	movs	r3, r0
 8001dde:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001de0:	e009      	b.n	8001df6 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001de2:	f7ff f95b 	bl	800109c <HAL_GetTick>
 8001de6:	0002      	movs	r2, r0
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	4a27      	ldr	r2, [pc, #156]	; (8001e8c <HAL_RCC_ClockConfig+0x18c>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e042      	b.n	8001e7c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001df6:	4b24      	ldr	r3, [pc, #144]	; (8001e88 <HAL_RCC_ClockConfig+0x188>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	220c      	movs	r2, #12
 8001dfc:	401a      	ands	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d1ec      	bne.n	8001de2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e08:	4b1e      	ldr	r3, [pc, #120]	; (8001e84 <HAL_RCC_ClockConfig+0x184>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	4013      	ands	r3, r2
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d211      	bcs.n	8001e3a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e16:	4b1b      	ldr	r3, [pc, #108]	; (8001e84 <HAL_RCC_ClockConfig+0x184>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	4393      	bics	r3, r2
 8001e1e:	0019      	movs	r1, r3
 8001e20:	4b18      	ldr	r3, [pc, #96]	; (8001e84 <HAL_RCC_ClockConfig+0x184>)
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	430a      	orrs	r2, r1
 8001e26:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e28:	4b16      	ldr	r3, [pc, #88]	; (8001e84 <HAL_RCC_ClockConfig+0x184>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	4013      	ands	r3, r2
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d001      	beq.n	8001e3a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e020      	b.n	8001e7c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2204      	movs	r2, #4
 8001e40:	4013      	ands	r3, r2
 8001e42:	d009      	beq.n	8001e58 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001e44:	4b10      	ldr	r3, [pc, #64]	; (8001e88 <HAL_RCC_ClockConfig+0x188>)
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	4a11      	ldr	r2, [pc, #68]	; (8001e90 <HAL_RCC_ClockConfig+0x190>)
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	0019      	movs	r1, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	68da      	ldr	r2, [r3, #12]
 8001e52:	4b0d      	ldr	r3, [pc, #52]	; (8001e88 <HAL_RCC_ClockConfig+0x188>)
 8001e54:	430a      	orrs	r2, r1
 8001e56:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001e58:	f000 f820 	bl	8001e9c <HAL_RCC_GetSysClockFreq>
 8001e5c:	0001      	movs	r1, r0
 8001e5e:	4b0a      	ldr	r3, [pc, #40]	; (8001e88 <HAL_RCC_ClockConfig+0x188>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	091b      	lsrs	r3, r3, #4
 8001e64:	220f      	movs	r2, #15
 8001e66:	4013      	ands	r3, r2
 8001e68:	4a0a      	ldr	r2, [pc, #40]	; (8001e94 <HAL_RCC_ClockConfig+0x194>)
 8001e6a:	5cd3      	ldrb	r3, [r2, r3]
 8001e6c:	000a      	movs	r2, r1
 8001e6e:	40da      	lsrs	r2, r3
 8001e70:	4b09      	ldr	r3, [pc, #36]	; (8001e98 <HAL_RCC_ClockConfig+0x198>)
 8001e72:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001e74:	2000      	movs	r0, #0
 8001e76:	f7ff f8cb 	bl	8001010 <HAL_InitTick>
  
  return HAL_OK;
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	b004      	add	sp, #16
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40022000 	.word	0x40022000
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	00001388 	.word	0x00001388
 8001e90:	fffff8ff 	.word	0xfffff8ff
 8001e94:	08004300 	.word	0x08004300
 8001e98:	20000030 	.word	0x20000030

08001e9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60bb      	str	r3, [r7, #8]
 8001eaa:	2300      	movs	r3, #0
 8001eac:	617b      	str	r3, [r7, #20]
 8001eae:	2300      	movs	r3, #0
 8001eb0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001eb6:	4b20      	ldr	r3, [pc, #128]	; (8001f38 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	220c      	movs	r2, #12
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	2b04      	cmp	r3, #4
 8001ec4:	d002      	beq.n	8001ecc <HAL_RCC_GetSysClockFreq+0x30>
 8001ec6:	2b08      	cmp	r3, #8
 8001ec8:	d003      	beq.n	8001ed2 <HAL_RCC_GetSysClockFreq+0x36>
 8001eca:	e02c      	b.n	8001f26 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ecc:	4b1b      	ldr	r3, [pc, #108]	; (8001f3c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ece:	613b      	str	r3, [r7, #16]
      break;
 8001ed0:	e02c      	b.n	8001f2c <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	0c9b      	lsrs	r3, r3, #18
 8001ed6:	220f      	movs	r2, #15
 8001ed8:	4013      	ands	r3, r2
 8001eda:	4a19      	ldr	r2, [pc, #100]	; (8001f40 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001edc:	5cd3      	ldrb	r3, [r2, r3]
 8001ede:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001ee0:	4b15      	ldr	r3, [pc, #84]	; (8001f38 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee4:	220f      	movs	r2, #15
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	4a16      	ldr	r2, [pc, #88]	; (8001f44 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001eea:	5cd3      	ldrb	r3, [r2, r3]
 8001eec:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	2380      	movs	r3, #128	; 0x80
 8001ef2:	025b      	lsls	r3, r3, #9
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	d009      	beq.n	8001f0c <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ef8:	68b9      	ldr	r1, [r7, #8]
 8001efa:	4810      	ldr	r0, [pc, #64]	; (8001f3c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001efc:	f7fe f904 	bl	8000108 <__udivsi3>
 8001f00:	0003      	movs	r3, r0
 8001f02:	001a      	movs	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4353      	muls	r3, r2
 8001f08:	617b      	str	r3, [r7, #20]
 8001f0a:	e009      	b.n	8001f20 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001f0c:	6879      	ldr	r1, [r7, #4]
 8001f0e:	000a      	movs	r2, r1
 8001f10:	0152      	lsls	r2, r2, #5
 8001f12:	1a52      	subs	r2, r2, r1
 8001f14:	0193      	lsls	r3, r2, #6
 8001f16:	1a9b      	subs	r3, r3, r2
 8001f18:	00db      	lsls	r3, r3, #3
 8001f1a:	185b      	adds	r3, r3, r1
 8001f1c:	021b      	lsls	r3, r3, #8
 8001f1e:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	613b      	str	r3, [r7, #16]
      break;
 8001f24:	e002      	b.n	8001f2c <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f26:	4b05      	ldr	r3, [pc, #20]	; (8001f3c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f28:	613b      	str	r3, [r7, #16]
      break;
 8001f2a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001f2c:	693b      	ldr	r3, [r7, #16]
}
 8001f2e:	0018      	movs	r0, r3
 8001f30:	46bd      	mov	sp, r7
 8001f32:	b006      	add	sp, #24
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	46c0      	nop			; (mov r8, r8)
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	007a1200 	.word	0x007a1200
 8001f40:	08004318 	.word	0x08004318
 8001f44:	08004328 	.word	0x08004328

08001f48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f4c:	4b02      	ldr	r3, [pc, #8]	; (8001f58 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
}
 8001f50:	0018      	movs	r0, r3
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	20000030 	.word	0x20000030

08001f5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001f60:	f7ff fff2 	bl	8001f48 <HAL_RCC_GetHCLKFreq>
 8001f64:	0001      	movs	r1, r0
 8001f66:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	0a1b      	lsrs	r3, r3, #8
 8001f6c:	2207      	movs	r2, #7
 8001f6e:	4013      	ands	r3, r2
 8001f70:	4a04      	ldr	r2, [pc, #16]	; (8001f84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f72:	5cd3      	ldrb	r3, [r2, r3]
 8001f74:	40d9      	lsrs	r1, r3
 8001f76:	000b      	movs	r3, r1
}    
 8001f78:	0018      	movs	r0, r3
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	46c0      	nop			; (mov r8, r8)
 8001f80:	40021000 	.word	0x40021000
 8001f84:	08004310 	.word	0x08004310

08001f88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f90:	2300      	movs	r3, #0
 8001f92:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001f94:	2300      	movs	r3, #0
 8001f96:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	2380      	movs	r3, #128	; 0x80
 8001f9e:	025b      	lsls	r3, r3, #9
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	d100      	bne.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001fa4:	e08e      	b.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001fa6:	2017      	movs	r0, #23
 8001fa8:	183b      	adds	r3, r7, r0
 8001faa:	2200      	movs	r2, #0
 8001fac:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fae:	4b5f      	ldr	r3, [pc, #380]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001fb0:	69da      	ldr	r2, [r3, #28]
 8001fb2:	2380      	movs	r3, #128	; 0x80
 8001fb4:	055b      	lsls	r3, r3, #21
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	d110      	bne.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001fba:	4b5c      	ldr	r3, [pc, #368]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001fbc:	69da      	ldr	r2, [r3, #28]
 8001fbe:	4b5b      	ldr	r3, [pc, #364]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001fc0:	2180      	movs	r1, #128	; 0x80
 8001fc2:	0549      	lsls	r1, r1, #21
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	61da      	str	r2, [r3, #28]
 8001fc8:	4b58      	ldr	r3, [pc, #352]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001fca:	69da      	ldr	r2, [r3, #28]
 8001fcc:	2380      	movs	r3, #128	; 0x80
 8001fce:	055b      	lsls	r3, r3, #21
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	60bb      	str	r3, [r7, #8]
 8001fd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fd6:	183b      	adds	r3, r7, r0
 8001fd8:	2201      	movs	r2, #1
 8001fda:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fdc:	4b54      	ldr	r3, [pc, #336]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	2380      	movs	r3, #128	; 0x80
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	d11a      	bne.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fe8:	4b51      	ldr	r3, [pc, #324]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	4b50      	ldr	r3, [pc, #320]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001fee:	2180      	movs	r1, #128	; 0x80
 8001ff0:	0049      	lsls	r1, r1, #1
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ff6:	f7ff f851 	bl	800109c <HAL_GetTick>
 8001ffa:	0003      	movs	r3, r0
 8001ffc:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ffe:	e008      	b.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002000:	f7ff f84c 	bl	800109c <HAL_GetTick>
 8002004:	0002      	movs	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b64      	cmp	r3, #100	; 0x64
 800200c:	d901      	bls.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e087      	b.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002012:	4b47      	ldr	r3, [pc, #284]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	2380      	movs	r3, #128	; 0x80
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	4013      	ands	r3, r2
 800201c:	d0f0      	beq.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800201e:	4b43      	ldr	r3, [pc, #268]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002020:	6a1a      	ldr	r2, [r3, #32]
 8002022:	23c0      	movs	r3, #192	; 0xc0
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	4013      	ands	r3, r2
 8002028:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d034      	beq.n	800209a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685a      	ldr	r2, [r3, #4]
 8002034:	23c0      	movs	r3, #192	; 0xc0
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4013      	ands	r3, r2
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	429a      	cmp	r2, r3
 800203e:	d02c      	beq.n	800209a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002040:	4b3a      	ldr	r3, [pc, #232]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002042:	6a1b      	ldr	r3, [r3, #32]
 8002044:	4a3b      	ldr	r2, [pc, #236]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002046:	4013      	ands	r3, r2
 8002048:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800204a:	4b38      	ldr	r3, [pc, #224]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800204c:	6a1a      	ldr	r2, [r3, #32]
 800204e:	4b37      	ldr	r3, [pc, #220]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002050:	2180      	movs	r1, #128	; 0x80
 8002052:	0249      	lsls	r1, r1, #9
 8002054:	430a      	orrs	r2, r1
 8002056:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002058:	4b34      	ldr	r3, [pc, #208]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800205a:	6a1a      	ldr	r2, [r3, #32]
 800205c:	4b33      	ldr	r3, [pc, #204]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800205e:	4936      	ldr	r1, [pc, #216]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002060:	400a      	ands	r2, r1
 8002062:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002064:	4b31      	ldr	r3, [pc, #196]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2201      	movs	r2, #1
 800206e:	4013      	ands	r3, r2
 8002070:	d013      	beq.n	800209a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002072:	f7ff f813 	bl	800109c <HAL_GetTick>
 8002076:	0003      	movs	r3, r0
 8002078:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800207a:	e009      	b.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800207c:	f7ff f80e 	bl	800109c <HAL_GetTick>
 8002080:	0002      	movs	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	4a2d      	ldr	r2, [pc, #180]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d901      	bls.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e048      	b.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002090:	4b26      	ldr	r3, [pc, #152]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002092:	6a1b      	ldr	r3, [r3, #32]
 8002094:	2202      	movs	r2, #2
 8002096:	4013      	ands	r3, r2
 8002098:	d0f0      	beq.n	800207c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800209a:	4b24      	ldr	r3, [pc, #144]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800209c:	6a1b      	ldr	r3, [r3, #32]
 800209e:	4a25      	ldr	r2, [pc, #148]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020a0:	4013      	ands	r3, r2
 80020a2:	0019      	movs	r1, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685a      	ldr	r2, [r3, #4]
 80020a8:	4b20      	ldr	r3, [pc, #128]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80020aa:	430a      	orrs	r2, r1
 80020ac:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80020ae:	2317      	movs	r3, #23
 80020b0:	18fb      	adds	r3, r7, r3
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d105      	bne.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020b8:	4b1c      	ldr	r3, [pc, #112]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80020ba:	69da      	ldr	r2, [r3, #28]
 80020bc:	4b1b      	ldr	r3, [pc, #108]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80020be:	4920      	ldr	r1, [pc, #128]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80020c0:	400a      	ands	r2, r1
 80020c2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2201      	movs	r2, #1
 80020ca:	4013      	ands	r3, r2
 80020cc:	d009      	beq.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020ce:	4b17      	ldr	r3, [pc, #92]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	2203      	movs	r2, #3
 80020d4:	4393      	bics	r3, r2
 80020d6:	0019      	movs	r1, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	4b13      	ldr	r3, [pc, #76]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80020de:	430a      	orrs	r2, r1
 80020e0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2220      	movs	r2, #32
 80020e8:	4013      	ands	r3, r2
 80020ea:	d009      	beq.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020ec:	4b0f      	ldr	r3, [pc, #60]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80020ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f0:	2210      	movs	r2, #16
 80020f2:	4393      	bics	r3, r2
 80020f4:	0019      	movs	r1, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	68da      	ldr	r2, [r3, #12]
 80020fa:	4b0c      	ldr	r3, [pc, #48]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80020fc:	430a      	orrs	r2, r1
 80020fe:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	2380      	movs	r3, #128	; 0x80
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	4013      	ands	r3, r2
 800210a:	d009      	beq.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800210c:	4b07      	ldr	r3, [pc, #28]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800210e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002110:	2240      	movs	r2, #64	; 0x40
 8002112:	4393      	bics	r3, r2
 8002114:	0019      	movs	r1, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	691a      	ldr	r2, [r3, #16]
 800211a:	4b04      	ldr	r3, [pc, #16]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800211c:	430a      	orrs	r2, r1
 800211e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	0018      	movs	r0, r3
 8002124:	46bd      	mov	sp, r7
 8002126:	b006      	add	sp, #24
 8002128:	bd80      	pop	{r7, pc}
 800212a:	46c0      	nop			; (mov r8, r8)
 800212c:	40021000 	.word	0x40021000
 8002130:	40007000 	.word	0x40007000
 8002134:	fffffcff 	.word	0xfffffcff
 8002138:	fffeffff 	.word	0xfffeffff
 800213c:	00001388 	.word	0x00001388
 8002140:	efffffff 	.word	0xefffffff

08002144 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d101      	bne.n	8002156 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e042      	b.n	80021dc <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	223d      	movs	r2, #61	; 0x3d
 800215a:	5c9b      	ldrb	r3, [r3, r2]
 800215c:	b2db      	uxtb	r3, r3
 800215e:	2b00      	cmp	r3, #0
 8002160:	d107      	bne.n	8002172 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	223c      	movs	r2, #60	; 0x3c
 8002166:	2100      	movs	r1, #0
 8002168:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	0018      	movs	r0, r3
 800216e:	f7fe fe37 	bl	8000de0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	223d      	movs	r2, #61	; 0x3d
 8002176:	2102      	movs	r1, #2
 8002178:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	3304      	adds	r3, #4
 8002182:	0019      	movs	r1, r3
 8002184:	0010      	movs	r0, r2
 8002186:	f000 fb21 	bl	80027cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2246      	movs	r2, #70	; 0x46
 800218e:	2101      	movs	r1, #1
 8002190:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	223e      	movs	r2, #62	; 0x3e
 8002196:	2101      	movs	r1, #1
 8002198:	5499      	strb	r1, [r3, r2]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	223f      	movs	r2, #63	; 0x3f
 800219e:	2101      	movs	r1, #1
 80021a0:	5499      	strb	r1, [r3, r2]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2240      	movs	r2, #64	; 0x40
 80021a6:	2101      	movs	r1, #1
 80021a8:	5499      	strb	r1, [r3, r2]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2241      	movs	r2, #65	; 0x41
 80021ae:	2101      	movs	r1, #1
 80021b0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2242      	movs	r2, #66	; 0x42
 80021b6:	2101      	movs	r1, #1
 80021b8:	5499      	strb	r1, [r3, r2]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2243      	movs	r2, #67	; 0x43
 80021be:	2101      	movs	r1, #1
 80021c0:	5499      	strb	r1, [r3, r2]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2244      	movs	r2, #68	; 0x44
 80021c6:	2101      	movs	r1, #1
 80021c8:	5499      	strb	r1, [r3, r2]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2245      	movs	r2, #69	; 0x45
 80021ce:	2101      	movs	r1, #1
 80021d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	223d      	movs	r2, #61	; 0x3d
 80021d6:	2101      	movs	r1, #1
 80021d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80021da:	2300      	movs	r3, #0
}
 80021dc:	0018      	movs	r0, r3
 80021de:	46bd      	mov	sp, r7
 80021e0:	b002      	add	sp, #8
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	223d      	movs	r2, #61	; 0x3d
 80021f0:	5c9b      	ldrb	r3, [r3, r2]
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d001      	beq.n	80021fc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e033      	b.n	8002264 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	223d      	movs	r2, #61	; 0x3d
 8002200:	2102      	movs	r1, #2
 8002202:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a18      	ldr	r2, [pc, #96]	; (800226c <HAL_TIM_Base_Start+0x88>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d00f      	beq.n	800222e <HAL_TIM_Base_Start+0x4a>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	2380      	movs	r3, #128	; 0x80
 8002214:	05db      	lsls	r3, r3, #23
 8002216:	429a      	cmp	r2, r3
 8002218:	d009      	beq.n	800222e <HAL_TIM_Base_Start+0x4a>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a14      	ldr	r2, [pc, #80]	; (8002270 <HAL_TIM_Base_Start+0x8c>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d004      	beq.n	800222e <HAL_TIM_Base_Start+0x4a>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a12      	ldr	r2, [pc, #72]	; (8002274 <HAL_TIM_Base_Start+0x90>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d111      	bne.n	8002252 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	2207      	movs	r2, #7
 8002236:	4013      	ands	r3, r2
 8002238:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2b06      	cmp	r3, #6
 800223e:	d010      	beq.n	8002262 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2101      	movs	r1, #1
 800224c:	430a      	orrs	r2, r1
 800224e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002250:	e007      	b.n	8002262 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2101      	movs	r1, #1
 800225e:	430a      	orrs	r2, r1
 8002260:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002262:	2300      	movs	r3, #0
}
 8002264:	0018      	movs	r0, r3
 8002266:	46bd      	mov	sp, r7
 8002268:	b004      	add	sp, #16
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40012c00 	.word	0x40012c00
 8002270:	40000400 	.word	0x40000400
 8002274:	40014000 	.word	0x40014000

08002278 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d101      	bne.n	800228a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e042      	b.n	8002310 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	223d      	movs	r2, #61	; 0x3d
 800228e:	5c9b      	ldrb	r3, [r3, r2]
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d107      	bne.n	80022a6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	223c      	movs	r2, #60	; 0x3c
 800229a:	2100      	movs	r1, #0
 800229c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	0018      	movs	r0, r3
 80022a2:	f000 f839 	bl	8002318 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	223d      	movs	r2, #61	; 0x3d
 80022aa:	2102      	movs	r1, #2
 80022ac:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	3304      	adds	r3, #4
 80022b6:	0019      	movs	r1, r3
 80022b8:	0010      	movs	r0, r2
 80022ba:	f000 fa87 	bl	80027cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2246      	movs	r2, #70	; 0x46
 80022c2:	2101      	movs	r1, #1
 80022c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	223e      	movs	r2, #62	; 0x3e
 80022ca:	2101      	movs	r1, #1
 80022cc:	5499      	strb	r1, [r3, r2]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	223f      	movs	r2, #63	; 0x3f
 80022d2:	2101      	movs	r1, #1
 80022d4:	5499      	strb	r1, [r3, r2]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2240      	movs	r2, #64	; 0x40
 80022da:	2101      	movs	r1, #1
 80022dc:	5499      	strb	r1, [r3, r2]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2241      	movs	r2, #65	; 0x41
 80022e2:	2101      	movs	r1, #1
 80022e4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2242      	movs	r2, #66	; 0x42
 80022ea:	2101      	movs	r1, #1
 80022ec:	5499      	strb	r1, [r3, r2]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2243      	movs	r2, #67	; 0x43
 80022f2:	2101      	movs	r1, #1
 80022f4:	5499      	strb	r1, [r3, r2]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2244      	movs	r2, #68	; 0x44
 80022fa:	2101      	movs	r1, #1
 80022fc:	5499      	strb	r1, [r3, r2]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2245      	movs	r2, #69	; 0x45
 8002302:	2101      	movs	r1, #1
 8002304:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	223d      	movs	r2, #61	; 0x3d
 800230a:	2101      	movs	r1, #1
 800230c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800230e:	2300      	movs	r3, #0
}
 8002310:	0018      	movs	r0, r3
 8002312:	46bd      	mov	sp, r7
 8002314:	b002      	add	sp, #8
 8002316:	bd80      	pop	{r7, pc}

08002318 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002320:	46c0      	nop			; (mov r8, r8)
 8002322:	46bd      	mov	sp, r7
 8002324:	b002      	add	sp, #8
 8002326:	bd80      	pop	{r7, pc}

08002328 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d108      	bne.n	800234a <HAL_TIM_PWM_Start+0x22>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	223e      	movs	r2, #62	; 0x3e
 800233c:	5c9b      	ldrb	r3, [r3, r2]
 800233e:	b2db      	uxtb	r3, r3
 8002340:	3b01      	subs	r3, #1
 8002342:	1e5a      	subs	r2, r3, #1
 8002344:	4193      	sbcs	r3, r2
 8002346:	b2db      	uxtb	r3, r3
 8002348:	e01f      	b.n	800238a <HAL_TIM_PWM_Start+0x62>
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	2b04      	cmp	r3, #4
 800234e:	d108      	bne.n	8002362 <HAL_TIM_PWM_Start+0x3a>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	223f      	movs	r2, #63	; 0x3f
 8002354:	5c9b      	ldrb	r3, [r3, r2]
 8002356:	b2db      	uxtb	r3, r3
 8002358:	3b01      	subs	r3, #1
 800235a:	1e5a      	subs	r2, r3, #1
 800235c:	4193      	sbcs	r3, r2
 800235e:	b2db      	uxtb	r3, r3
 8002360:	e013      	b.n	800238a <HAL_TIM_PWM_Start+0x62>
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	2b08      	cmp	r3, #8
 8002366:	d108      	bne.n	800237a <HAL_TIM_PWM_Start+0x52>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2240      	movs	r2, #64	; 0x40
 800236c:	5c9b      	ldrb	r3, [r3, r2]
 800236e:	b2db      	uxtb	r3, r3
 8002370:	3b01      	subs	r3, #1
 8002372:	1e5a      	subs	r2, r3, #1
 8002374:	4193      	sbcs	r3, r2
 8002376:	b2db      	uxtb	r3, r3
 8002378:	e007      	b.n	800238a <HAL_TIM_PWM_Start+0x62>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2241      	movs	r2, #65	; 0x41
 800237e:	5c9b      	ldrb	r3, [r3, r2]
 8002380:	b2db      	uxtb	r3, r3
 8002382:	3b01      	subs	r3, #1
 8002384:	1e5a      	subs	r2, r3, #1
 8002386:	4193      	sbcs	r3, r2
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e074      	b.n	800247c <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d104      	bne.n	80023a2 <HAL_TIM_PWM_Start+0x7a>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	223e      	movs	r2, #62	; 0x3e
 800239c:	2102      	movs	r1, #2
 800239e:	5499      	strb	r1, [r3, r2]
 80023a0:	e013      	b.n	80023ca <HAL_TIM_PWM_Start+0xa2>
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	2b04      	cmp	r3, #4
 80023a6:	d104      	bne.n	80023b2 <HAL_TIM_PWM_Start+0x8a>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	223f      	movs	r2, #63	; 0x3f
 80023ac:	2102      	movs	r1, #2
 80023ae:	5499      	strb	r1, [r3, r2]
 80023b0:	e00b      	b.n	80023ca <HAL_TIM_PWM_Start+0xa2>
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	2b08      	cmp	r3, #8
 80023b6:	d104      	bne.n	80023c2 <HAL_TIM_PWM_Start+0x9a>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2240      	movs	r2, #64	; 0x40
 80023bc:	2102      	movs	r1, #2
 80023be:	5499      	strb	r1, [r3, r2]
 80023c0:	e003      	b.n	80023ca <HAL_TIM_PWM_Start+0xa2>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2241      	movs	r2, #65	; 0x41
 80023c6:	2102      	movs	r1, #2
 80023c8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	6839      	ldr	r1, [r7, #0]
 80023d0:	2201      	movs	r2, #1
 80023d2:	0018      	movs	r0, r3
 80023d4:	f000 fd10 	bl	8002df8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a29      	ldr	r2, [pc, #164]	; (8002484 <HAL_TIM_PWM_Start+0x15c>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d00e      	beq.n	8002400 <HAL_TIM_PWM_Start+0xd8>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a28      	ldr	r2, [pc, #160]	; (8002488 <HAL_TIM_PWM_Start+0x160>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d009      	beq.n	8002400 <HAL_TIM_PWM_Start+0xd8>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a26      	ldr	r2, [pc, #152]	; (800248c <HAL_TIM_PWM_Start+0x164>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d004      	beq.n	8002400 <HAL_TIM_PWM_Start+0xd8>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a25      	ldr	r2, [pc, #148]	; (8002490 <HAL_TIM_PWM_Start+0x168>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d101      	bne.n	8002404 <HAL_TIM_PWM_Start+0xdc>
 8002400:	2301      	movs	r3, #1
 8002402:	e000      	b.n	8002406 <HAL_TIM_PWM_Start+0xde>
 8002404:	2300      	movs	r3, #0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d008      	beq.n	800241c <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2180      	movs	r1, #128	; 0x80
 8002416:	0209      	lsls	r1, r1, #8
 8002418:	430a      	orrs	r2, r1
 800241a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a18      	ldr	r2, [pc, #96]	; (8002484 <HAL_TIM_PWM_Start+0x15c>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d00f      	beq.n	8002446 <HAL_TIM_PWM_Start+0x11e>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	2380      	movs	r3, #128	; 0x80
 800242c:	05db      	lsls	r3, r3, #23
 800242e:	429a      	cmp	r2, r3
 8002430:	d009      	beq.n	8002446 <HAL_TIM_PWM_Start+0x11e>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a17      	ldr	r2, [pc, #92]	; (8002494 <HAL_TIM_PWM_Start+0x16c>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d004      	beq.n	8002446 <HAL_TIM_PWM_Start+0x11e>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a11      	ldr	r2, [pc, #68]	; (8002488 <HAL_TIM_PWM_Start+0x160>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d111      	bne.n	800246a <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	2207      	movs	r2, #7
 800244e:	4013      	ands	r3, r2
 8002450:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2b06      	cmp	r3, #6
 8002456:	d010      	beq.n	800247a <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2101      	movs	r1, #1
 8002464:	430a      	orrs	r2, r1
 8002466:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002468:	e007      	b.n	800247a <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2101      	movs	r1, #1
 8002476:	430a      	orrs	r2, r1
 8002478:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800247a:	2300      	movs	r3, #0
}
 800247c:	0018      	movs	r0, r3
 800247e:	46bd      	mov	sp, r7
 8002480:	b004      	add	sp, #16
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40012c00 	.word	0x40012c00
 8002488:	40014000 	.word	0x40014000
 800248c:	40014400 	.word	0x40014400
 8002490:	40014800 	.word	0x40014800
 8002494:	40000400 	.word	0x40000400

08002498 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024a4:	2317      	movs	r3, #23
 80024a6:	18fb      	adds	r3, r7, r3
 80024a8:	2200      	movs	r2, #0
 80024aa:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	223c      	movs	r2, #60	; 0x3c
 80024b0:	5c9b      	ldrb	r3, [r3, r2]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d101      	bne.n	80024ba <HAL_TIM_PWM_ConfigChannel+0x22>
 80024b6:	2302      	movs	r3, #2
 80024b8:	e0ad      	b.n	8002616 <HAL_TIM_PWM_ConfigChannel+0x17e>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	223c      	movs	r2, #60	; 0x3c
 80024be:	2101      	movs	r1, #1
 80024c0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2b0c      	cmp	r3, #12
 80024c6:	d100      	bne.n	80024ca <HAL_TIM_PWM_ConfigChannel+0x32>
 80024c8:	e076      	b.n	80025b8 <HAL_TIM_PWM_ConfigChannel+0x120>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2b0c      	cmp	r3, #12
 80024ce:	d900      	bls.n	80024d2 <HAL_TIM_PWM_ConfigChannel+0x3a>
 80024d0:	e095      	b.n	80025fe <HAL_TIM_PWM_ConfigChannel+0x166>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2b08      	cmp	r3, #8
 80024d6:	d04e      	beq.n	8002576 <HAL_TIM_PWM_ConfigChannel+0xde>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b08      	cmp	r3, #8
 80024dc:	d900      	bls.n	80024e0 <HAL_TIM_PWM_ConfigChannel+0x48>
 80024de:	e08e      	b.n	80025fe <HAL_TIM_PWM_ConfigChannel+0x166>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d003      	beq.n	80024ee <HAL_TIM_PWM_ConfigChannel+0x56>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2b04      	cmp	r3, #4
 80024ea:	d021      	beq.n	8002530 <HAL_TIM_PWM_ConfigChannel+0x98>
 80024ec:	e087      	b.n	80025fe <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68ba      	ldr	r2, [r7, #8]
 80024f4:	0011      	movs	r1, r2
 80024f6:	0018      	movs	r0, r3
 80024f8:	f000 f9e8 	bl	80028cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	699a      	ldr	r2, [r3, #24]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2108      	movs	r1, #8
 8002508:	430a      	orrs	r2, r1
 800250a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	699a      	ldr	r2, [r3, #24]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2104      	movs	r1, #4
 8002518:	438a      	bics	r2, r1
 800251a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6999      	ldr	r1, [r3, #24]
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	691a      	ldr	r2, [r3, #16]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	430a      	orrs	r2, r1
 800252c:	619a      	str	r2, [r3, #24]
      break;
 800252e:	e06b      	b.n	8002608 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68ba      	ldr	r2, [r7, #8]
 8002536:	0011      	movs	r1, r2
 8002538:	0018      	movs	r0, r3
 800253a:	f000 fa4f 	bl	80029dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	699a      	ldr	r2, [r3, #24]
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2180      	movs	r1, #128	; 0x80
 800254a:	0109      	lsls	r1, r1, #4
 800254c:	430a      	orrs	r2, r1
 800254e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	699a      	ldr	r2, [r3, #24]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4931      	ldr	r1, [pc, #196]	; (8002620 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800255c:	400a      	ands	r2, r1
 800255e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6999      	ldr	r1, [r3, #24]
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	021a      	lsls	r2, r3, #8
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	430a      	orrs	r2, r1
 8002572:	619a      	str	r2, [r3, #24]
      break;
 8002574:	e048      	b.n	8002608 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	68ba      	ldr	r2, [r7, #8]
 800257c:	0011      	movs	r1, r2
 800257e:	0018      	movs	r0, r3
 8002580:	f000 fab0 	bl	8002ae4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	69da      	ldr	r2, [r3, #28]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2108      	movs	r1, #8
 8002590:	430a      	orrs	r2, r1
 8002592:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	69da      	ldr	r2, [r3, #28]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2104      	movs	r1, #4
 80025a0:	438a      	bics	r2, r1
 80025a2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	69d9      	ldr	r1, [r3, #28]
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	691a      	ldr	r2, [r3, #16]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	430a      	orrs	r2, r1
 80025b4:	61da      	str	r2, [r3, #28]
      break;
 80025b6:	e027      	b.n	8002608 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68ba      	ldr	r2, [r7, #8]
 80025be:	0011      	movs	r1, r2
 80025c0:	0018      	movs	r0, r3
 80025c2:	f000 fb15 	bl	8002bf0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	69da      	ldr	r2, [r3, #28]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2180      	movs	r1, #128	; 0x80
 80025d2:	0109      	lsls	r1, r1, #4
 80025d4:	430a      	orrs	r2, r1
 80025d6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	69da      	ldr	r2, [r3, #28]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	490f      	ldr	r1, [pc, #60]	; (8002620 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80025e4:	400a      	ands	r2, r1
 80025e6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	69d9      	ldr	r1, [r3, #28]
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	021a      	lsls	r2, r3, #8
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	430a      	orrs	r2, r1
 80025fa:	61da      	str	r2, [r3, #28]
      break;
 80025fc:	e004      	b.n	8002608 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80025fe:	2317      	movs	r3, #23
 8002600:	18fb      	adds	r3, r7, r3
 8002602:	2201      	movs	r2, #1
 8002604:	701a      	strb	r2, [r3, #0]
      break;
 8002606:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	223c      	movs	r2, #60	; 0x3c
 800260c:	2100      	movs	r1, #0
 800260e:	5499      	strb	r1, [r3, r2]

  return status;
 8002610:	2317      	movs	r3, #23
 8002612:	18fb      	adds	r3, r7, r3
 8002614:	781b      	ldrb	r3, [r3, #0]
}
 8002616:	0018      	movs	r0, r3
 8002618:	46bd      	mov	sp, r7
 800261a:	b006      	add	sp, #24
 800261c:	bd80      	pop	{r7, pc}
 800261e:	46c0      	nop			; (mov r8, r8)
 8002620:	fffffbff 	.word	0xfffffbff

08002624 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800262e:	230f      	movs	r3, #15
 8002630:	18fb      	adds	r3, r7, r3
 8002632:	2200      	movs	r2, #0
 8002634:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	223c      	movs	r2, #60	; 0x3c
 800263a:	5c9b      	ldrb	r3, [r3, r2]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d101      	bne.n	8002644 <HAL_TIM_ConfigClockSource+0x20>
 8002640:	2302      	movs	r3, #2
 8002642:	e0bc      	b.n	80027be <HAL_TIM_ConfigClockSource+0x19a>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	223c      	movs	r2, #60	; 0x3c
 8002648:	2101      	movs	r1, #1
 800264a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	223d      	movs	r2, #61	; 0x3d
 8002650:	2102      	movs	r1, #2
 8002652:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	2277      	movs	r2, #119	; 0x77
 8002660:	4393      	bics	r3, r2
 8002662:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	4a58      	ldr	r2, [pc, #352]	; (80027c8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002668:	4013      	ands	r3, r2
 800266a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68ba      	ldr	r2, [r7, #8]
 8002672:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2280      	movs	r2, #128	; 0x80
 800267a:	0192      	lsls	r2, r2, #6
 800267c:	4293      	cmp	r3, r2
 800267e:	d040      	beq.n	8002702 <HAL_TIM_ConfigClockSource+0xde>
 8002680:	2280      	movs	r2, #128	; 0x80
 8002682:	0192      	lsls	r2, r2, #6
 8002684:	4293      	cmp	r3, r2
 8002686:	d900      	bls.n	800268a <HAL_TIM_ConfigClockSource+0x66>
 8002688:	e088      	b.n	800279c <HAL_TIM_ConfigClockSource+0x178>
 800268a:	2280      	movs	r2, #128	; 0x80
 800268c:	0152      	lsls	r2, r2, #5
 800268e:	4293      	cmp	r3, r2
 8002690:	d100      	bne.n	8002694 <HAL_TIM_ConfigClockSource+0x70>
 8002692:	e088      	b.n	80027a6 <HAL_TIM_ConfigClockSource+0x182>
 8002694:	2280      	movs	r2, #128	; 0x80
 8002696:	0152      	lsls	r2, r2, #5
 8002698:	4293      	cmp	r3, r2
 800269a:	d900      	bls.n	800269e <HAL_TIM_ConfigClockSource+0x7a>
 800269c:	e07e      	b.n	800279c <HAL_TIM_ConfigClockSource+0x178>
 800269e:	2b70      	cmp	r3, #112	; 0x70
 80026a0:	d018      	beq.n	80026d4 <HAL_TIM_ConfigClockSource+0xb0>
 80026a2:	d900      	bls.n	80026a6 <HAL_TIM_ConfigClockSource+0x82>
 80026a4:	e07a      	b.n	800279c <HAL_TIM_ConfigClockSource+0x178>
 80026a6:	2b60      	cmp	r3, #96	; 0x60
 80026a8:	d04f      	beq.n	800274a <HAL_TIM_ConfigClockSource+0x126>
 80026aa:	d900      	bls.n	80026ae <HAL_TIM_ConfigClockSource+0x8a>
 80026ac:	e076      	b.n	800279c <HAL_TIM_ConfigClockSource+0x178>
 80026ae:	2b50      	cmp	r3, #80	; 0x50
 80026b0:	d03b      	beq.n	800272a <HAL_TIM_ConfigClockSource+0x106>
 80026b2:	d900      	bls.n	80026b6 <HAL_TIM_ConfigClockSource+0x92>
 80026b4:	e072      	b.n	800279c <HAL_TIM_ConfigClockSource+0x178>
 80026b6:	2b40      	cmp	r3, #64	; 0x40
 80026b8:	d057      	beq.n	800276a <HAL_TIM_ConfigClockSource+0x146>
 80026ba:	d900      	bls.n	80026be <HAL_TIM_ConfigClockSource+0x9a>
 80026bc:	e06e      	b.n	800279c <HAL_TIM_ConfigClockSource+0x178>
 80026be:	2b30      	cmp	r3, #48	; 0x30
 80026c0:	d063      	beq.n	800278a <HAL_TIM_ConfigClockSource+0x166>
 80026c2:	d86b      	bhi.n	800279c <HAL_TIM_ConfigClockSource+0x178>
 80026c4:	2b20      	cmp	r3, #32
 80026c6:	d060      	beq.n	800278a <HAL_TIM_ConfigClockSource+0x166>
 80026c8:	d868      	bhi.n	800279c <HAL_TIM_ConfigClockSource+0x178>
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d05d      	beq.n	800278a <HAL_TIM_ConfigClockSource+0x166>
 80026ce:	2b10      	cmp	r3, #16
 80026d0:	d05b      	beq.n	800278a <HAL_TIM_ConfigClockSource+0x166>
 80026d2:	e063      	b.n	800279c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6818      	ldr	r0, [r3, #0]
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	6899      	ldr	r1, [r3, #8]
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685a      	ldr	r2, [r3, #4]
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	f000 fb68 	bl	8002db8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	2277      	movs	r2, #119	; 0x77
 80026f4:	4313      	orrs	r3, r2
 80026f6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68ba      	ldr	r2, [r7, #8]
 80026fe:	609a      	str	r2, [r3, #8]
      break;
 8002700:	e052      	b.n	80027a8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6818      	ldr	r0, [r3, #0]
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	6899      	ldr	r1, [r3, #8]
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685a      	ldr	r2, [r3, #4]
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	f000 fb51 	bl	8002db8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	689a      	ldr	r2, [r3, #8]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2180      	movs	r1, #128	; 0x80
 8002722:	01c9      	lsls	r1, r1, #7
 8002724:	430a      	orrs	r2, r1
 8002726:	609a      	str	r2, [r3, #8]
      break;
 8002728:	e03e      	b.n	80027a8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6818      	ldr	r0, [r3, #0]
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	6859      	ldr	r1, [r3, #4]
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	001a      	movs	r2, r3
 8002738:	f000 fac4 	bl	8002cc4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2150      	movs	r1, #80	; 0x50
 8002742:	0018      	movs	r0, r3
 8002744:	f000 fb1e 	bl	8002d84 <TIM_ITRx_SetConfig>
      break;
 8002748:	e02e      	b.n	80027a8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6818      	ldr	r0, [r3, #0]
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	6859      	ldr	r1, [r3, #4]
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	001a      	movs	r2, r3
 8002758:	f000 fae2 	bl	8002d20 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2160      	movs	r1, #96	; 0x60
 8002762:	0018      	movs	r0, r3
 8002764:	f000 fb0e 	bl	8002d84 <TIM_ITRx_SetConfig>
      break;
 8002768:	e01e      	b.n	80027a8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6818      	ldr	r0, [r3, #0]
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	6859      	ldr	r1, [r3, #4]
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	001a      	movs	r2, r3
 8002778:	f000 faa4 	bl	8002cc4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2140      	movs	r1, #64	; 0x40
 8002782:	0018      	movs	r0, r3
 8002784:	f000 fafe 	bl	8002d84 <TIM_ITRx_SetConfig>
      break;
 8002788:	e00e      	b.n	80027a8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	0019      	movs	r1, r3
 8002794:	0010      	movs	r0, r2
 8002796:	f000 faf5 	bl	8002d84 <TIM_ITRx_SetConfig>
      break;
 800279a:	e005      	b.n	80027a8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800279c:	230f      	movs	r3, #15
 800279e:	18fb      	adds	r3, r7, r3
 80027a0:	2201      	movs	r2, #1
 80027a2:	701a      	strb	r2, [r3, #0]
      break;
 80027a4:	e000      	b.n	80027a8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80027a6:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	223d      	movs	r2, #61	; 0x3d
 80027ac:	2101      	movs	r1, #1
 80027ae:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	223c      	movs	r2, #60	; 0x3c
 80027b4:	2100      	movs	r1, #0
 80027b6:	5499      	strb	r1, [r3, r2]

  return status;
 80027b8:	230f      	movs	r3, #15
 80027ba:	18fb      	adds	r3, r7, r3
 80027bc:	781b      	ldrb	r3, [r3, #0]
}
 80027be:	0018      	movs	r0, r3
 80027c0:	46bd      	mov	sp, r7
 80027c2:	b004      	add	sp, #16
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	46c0      	nop			; (mov r8, r8)
 80027c8:	ffff00ff 	.word	0xffff00ff

080027cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4a34      	ldr	r2, [pc, #208]	; (80028b0 <TIM_Base_SetConfig+0xe4>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d008      	beq.n	80027f6 <TIM_Base_SetConfig+0x2a>
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	2380      	movs	r3, #128	; 0x80
 80027e8:	05db      	lsls	r3, r3, #23
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d003      	beq.n	80027f6 <TIM_Base_SetConfig+0x2a>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a30      	ldr	r2, [pc, #192]	; (80028b4 <TIM_Base_SetConfig+0xe8>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d108      	bne.n	8002808 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2270      	movs	r2, #112	; 0x70
 80027fa:	4393      	bics	r3, r2
 80027fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	4313      	orrs	r3, r2
 8002806:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a29      	ldr	r2, [pc, #164]	; (80028b0 <TIM_Base_SetConfig+0xe4>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d018      	beq.n	8002842 <TIM_Base_SetConfig+0x76>
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	2380      	movs	r3, #128	; 0x80
 8002814:	05db      	lsls	r3, r3, #23
 8002816:	429a      	cmp	r2, r3
 8002818:	d013      	beq.n	8002842 <TIM_Base_SetConfig+0x76>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a25      	ldr	r2, [pc, #148]	; (80028b4 <TIM_Base_SetConfig+0xe8>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d00f      	beq.n	8002842 <TIM_Base_SetConfig+0x76>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a24      	ldr	r2, [pc, #144]	; (80028b8 <TIM_Base_SetConfig+0xec>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d00b      	beq.n	8002842 <TIM_Base_SetConfig+0x76>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a23      	ldr	r2, [pc, #140]	; (80028bc <TIM_Base_SetConfig+0xf0>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d007      	beq.n	8002842 <TIM_Base_SetConfig+0x76>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a22      	ldr	r2, [pc, #136]	; (80028c0 <TIM_Base_SetConfig+0xf4>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d003      	beq.n	8002842 <TIM_Base_SetConfig+0x76>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a21      	ldr	r2, [pc, #132]	; (80028c4 <TIM_Base_SetConfig+0xf8>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d108      	bne.n	8002854 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	4a20      	ldr	r2, [pc, #128]	; (80028c8 <TIM_Base_SetConfig+0xfc>)
 8002846:	4013      	ands	r3, r2
 8002848:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	4313      	orrs	r3, r2
 8002852:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2280      	movs	r2, #128	; 0x80
 8002858:	4393      	bics	r3, r2
 800285a:	001a      	movs	r2, r3
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	695b      	ldr	r3, [r3, #20]
 8002860:	4313      	orrs	r3, r2
 8002862:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	689a      	ldr	r2, [r3, #8]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a0c      	ldr	r2, [pc, #48]	; (80028b0 <TIM_Base_SetConfig+0xe4>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d00b      	beq.n	800289a <TIM_Base_SetConfig+0xce>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a0d      	ldr	r2, [pc, #52]	; (80028bc <TIM_Base_SetConfig+0xf0>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d007      	beq.n	800289a <TIM_Base_SetConfig+0xce>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a0c      	ldr	r2, [pc, #48]	; (80028c0 <TIM_Base_SetConfig+0xf4>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d003      	beq.n	800289a <TIM_Base_SetConfig+0xce>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a0b      	ldr	r2, [pc, #44]	; (80028c4 <TIM_Base_SetConfig+0xf8>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d103      	bne.n	80028a2 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	691a      	ldr	r2, [r3, #16]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2201      	movs	r2, #1
 80028a6:	615a      	str	r2, [r3, #20]
}
 80028a8:	46c0      	nop			; (mov r8, r8)
 80028aa:	46bd      	mov	sp, r7
 80028ac:	b004      	add	sp, #16
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	40012c00 	.word	0x40012c00
 80028b4:	40000400 	.word	0x40000400
 80028b8:	40002000 	.word	0x40002000
 80028bc:	40014000 	.word	0x40014000
 80028c0:	40014400 	.word	0x40014400
 80028c4:	40014800 	.word	0x40014800
 80028c8:	fffffcff 	.word	0xfffffcff

080028cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	2201      	movs	r2, #1
 80028dc:	4393      	bics	r3, r2
 80028de:	001a      	movs	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a1b      	ldr	r3, [r3, #32]
 80028e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	699b      	ldr	r3, [r3, #24]
 80028f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2270      	movs	r2, #112	; 0x70
 80028fa:	4393      	bics	r3, r2
 80028fc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2203      	movs	r2, #3
 8002902:	4393      	bics	r3, r2
 8002904:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	4313      	orrs	r3, r2
 800290e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	2202      	movs	r2, #2
 8002914:	4393      	bics	r3, r2
 8002916:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	697a      	ldr	r2, [r7, #20]
 800291e:	4313      	orrs	r3, r2
 8002920:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a27      	ldr	r2, [pc, #156]	; (80029c4 <TIM_OC1_SetConfig+0xf8>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d00b      	beq.n	8002942 <TIM_OC1_SetConfig+0x76>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a26      	ldr	r2, [pc, #152]	; (80029c8 <TIM_OC1_SetConfig+0xfc>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d007      	beq.n	8002942 <TIM_OC1_SetConfig+0x76>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a25      	ldr	r2, [pc, #148]	; (80029cc <TIM_OC1_SetConfig+0x100>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d003      	beq.n	8002942 <TIM_OC1_SetConfig+0x76>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a24      	ldr	r2, [pc, #144]	; (80029d0 <TIM_OC1_SetConfig+0x104>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d10c      	bne.n	800295c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	2208      	movs	r2, #8
 8002946:	4393      	bics	r3, r2
 8002948:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	4313      	orrs	r3, r2
 8002952:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	2204      	movs	r2, #4
 8002958:	4393      	bics	r3, r2
 800295a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a19      	ldr	r2, [pc, #100]	; (80029c4 <TIM_OC1_SetConfig+0xf8>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d00b      	beq.n	800297c <TIM_OC1_SetConfig+0xb0>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a18      	ldr	r2, [pc, #96]	; (80029c8 <TIM_OC1_SetConfig+0xfc>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d007      	beq.n	800297c <TIM_OC1_SetConfig+0xb0>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a17      	ldr	r2, [pc, #92]	; (80029cc <TIM_OC1_SetConfig+0x100>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d003      	beq.n	800297c <TIM_OC1_SetConfig+0xb0>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4a16      	ldr	r2, [pc, #88]	; (80029d0 <TIM_OC1_SetConfig+0x104>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d111      	bne.n	80029a0 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	4a15      	ldr	r2, [pc, #84]	; (80029d4 <TIM_OC1_SetConfig+0x108>)
 8002980:	4013      	ands	r3, r2
 8002982:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	4a14      	ldr	r2, [pc, #80]	; (80029d8 <TIM_OC1_SetConfig+0x10c>)
 8002988:	4013      	ands	r3, r2
 800298a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	695b      	ldr	r3, [r3, #20]
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	4313      	orrs	r3, r2
 8002994:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	4313      	orrs	r3, r2
 800299e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685a      	ldr	r2, [r3, #4]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	697a      	ldr	r2, [r7, #20]
 80029b8:	621a      	str	r2, [r3, #32]
}
 80029ba:	46c0      	nop			; (mov r8, r8)
 80029bc:	46bd      	mov	sp, r7
 80029be:	b006      	add	sp, #24
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	46c0      	nop			; (mov r8, r8)
 80029c4:	40012c00 	.word	0x40012c00
 80029c8:	40014000 	.word	0x40014000
 80029cc:	40014400 	.word	0x40014400
 80029d0:	40014800 	.word	0x40014800
 80029d4:	fffffeff 	.word	0xfffffeff
 80029d8:	fffffdff 	.word	0xfffffdff

080029dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a1b      	ldr	r3, [r3, #32]
 80029ea:	2210      	movs	r2, #16
 80029ec:	4393      	bics	r3, r2
 80029ee:	001a      	movs	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a1b      	ldr	r3, [r3, #32]
 80029f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	4a2e      	ldr	r2, [pc, #184]	; (8002ac4 <TIM_OC2_SetConfig+0xe8>)
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	4a2d      	ldr	r2, [pc, #180]	; (8002ac8 <TIM_OC2_SetConfig+0xec>)
 8002a12:	4013      	ands	r3, r2
 8002a14:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	021b      	lsls	r3, r3, #8
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	2220      	movs	r2, #32
 8002a26:	4393      	bics	r3, r2
 8002a28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	011b      	lsls	r3, r3, #4
 8002a30:	697a      	ldr	r2, [r7, #20]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a24      	ldr	r2, [pc, #144]	; (8002acc <TIM_OC2_SetConfig+0xf0>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d10d      	bne.n	8002a5a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	2280      	movs	r2, #128	; 0x80
 8002a42:	4393      	bics	r3, r2
 8002a44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	011b      	lsls	r3, r3, #4
 8002a4c:	697a      	ldr	r2, [r7, #20]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	2240      	movs	r2, #64	; 0x40
 8002a56:	4393      	bics	r3, r2
 8002a58:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a1b      	ldr	r2, [pc, #108]	; (8002acc <TIM_OC2_SetConfig+0xf0>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d00b      	beq.n	8002a7a <TIM_OC2_SetConfig+0x9e>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a1a      	ldr	r2, [pc, #104]	; (8002ad0 <TIM_OC2_SetConfig+0xf4>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d007      	beq.n	8002a7a <TIM_OC2_SetConfig+0x9e>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a19      	ldr	r2, [pc, #100]	; (8002ad4 <TIM_OC2_SetConfig+0xf8>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d003      	beq.n	8002a7a <TIM_OC2_SetConfig+0x9e>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a18      	ldr	r2, [pc, #96]	; (8002ad8 <TIM_OC2_SetConfig+0xfc>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d113      	bne.n	8002aa2 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	4a17      	ldr	r2, [pc, #92]	; (8002adc <TIM_OC2_SetConfig+0x100>)
 8002a7e:	4013      	ands	r3, r2
 8002a80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	4a16      	ldr	r2, [pc, #88]	; (8002ae0 <TIM_OC2_SetConfig+0x104>)
 8002a86:	4013      	ands	r3, r2
 8002a88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685a      	ldr	r2, [r3, #4]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	697a      	ldr	r2, [r7, #20]
 8002aba:	621a      	str	r2, [r3, #32]
}
 8002abc:	46c0      	nop			; (mov r8, r8)
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	b006      	add	sp, #24
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	ffff8fff 	.word	0xffff8fff
 8002ac8:	fffffcff 	.word	0xfffffcff
 8002acc:	40012c00 	.word	0x40012c00
 8002ad0:	40014000 	.word	0x40014000
 8002ad4:	40014400 	.word	0x40014400
 8002ad8:	40014800 	.word	0x40014800
 8002adc:	fffffbff 	.word	0xfffffbff
 8002ae0:	fffff7ff 	.word	0xfffff7ff

08002ae4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a1b      	ldr	r3, [r3, #32]
 8002af2:	4a35      	ldr	r2, [pc, #212]	; (8002bc8 <TIM_OC3_SetConfig+0xe4>)
 8002af4:	401a      	ands	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	69db      	ldr	r3, [r3, #28]
 8002b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2270      	movs	r2, #112	; 0x70
 8002b10:	4393      	bics	r3, r2
 8002b12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2203      	movs	r2, #3
 8002b18:	4393      	bics	r3, r2
 8002b1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	4a28      	ldr	r2, [pc, #160]	; (8002bcc <TIM_OC3_SetConfig+0xe8>)
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	021b      	lsls	r3, r3, #8
 8002b34:	697a      	ldr	r2, [r7, #20]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a24      	ldr	r2, [pc, #144]	; (8002bd0 <TIM_OC3_SetConfig+0xec>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d10d      	bne.n	8002b5e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	4a23      	ldr	r2, [pc, #140]	; (8002bd4 <TIM_OC3_SetConfig+0xf0>)
 8002b46:	4013      	ands	r3, r2
 8002b48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	021b      	lsls	r3, r3, #8
 8002b50:	697a      	ldr	r2, [r7, #20]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	4a1f      	ldr	r2, [pc, #124]	; (8002bd8 <TIM_OC3_SetConfig+0xf4>)
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a1b      	ldr	r2, [pc, #108]	; (8002bd0 <TIM_OC3_SetConfig+0xec>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d00b      	beq.n	8002b7e <TIM_OC3_SetConfig+0x9a>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a1c      	ldr	r2, [pc, #112]	; (8002bdc <TIM_OC3_SetConfig+0xf8>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d007      	beq.n	8002b7e <TIM_OC3_SetConfig+0x9a>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a1b      	ldr	r2, [pc, #108]	; (8002be0 <TIM_OC3_SetConfig+0xfc>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d003      	beq.n	8002b7e <TIM_OC3_SetConfig+0x9a>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a1a      	ldr	r2, [pc, #104]	; (8002be4 <TIM_OC3_SetConfig+0x100>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d113      	bne.n	8002ba6 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	4a19      	ldr	r2, [pc, #100]	; (8002be8 <TIM_OC3_SetConfig+0x104>)
 8002b82:	4013      	ands	r3, r2
 8002b84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	4a18      	ldr	r2, [pc, #96]	; (8002bec <TIM_OC3_SetConfig+0x108>)
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	011b      	lsls	r3, r3, #4
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	699b      	ldr	r3, [r3, #24]
 8002b9e:	011b      	lsls	r3, r3, #4
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685a      	ldr	r2, [r3, #4]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	697a      	ldr	r2, [r7, #20]
 8002bbe:	621a      	str	r2, [r3, #32]
}
 8002bc0:	46c0      	nop			; (mov r8, r8)
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	b006      	add	sp, #24
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	fffffeff 	.word	0xfffffeff
 8002bcc:	fffffdff 	.word	0xfffffdff
 8002bd0:	40012c00 	.word	0x40012c00
 8002bd4:	fffff7ff 	.word	0xfffff7ff
 8002bd8:	fffffbff 	.word	0xfffffbff
 8002bdc:	40014000 	.word	0x40014000
 8002be0:	40014400 	.word	0x40014400
 8002be4:	40014800 	.word	0x40014800
 8002be8:	ffffefff 	.word	0xffffefff
 8002bec:	ffffdfff 	.word	0xffffdfff

08002bf0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b086      	sub	sp, #24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a1b      	ldr	r3, [r3, #32]
 8002bfe:	4a28      	ldr	r2, [pc, #160]	; (8002ca0 <TIM_OC4_SetConfig+0xb0>)
 8002c00:	401a      	ands	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a1b      	ldr	r3, [r3, #32]
 8002c0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	69db      	ldr	r3, [r3, #28]
 8002c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	4a22      	ldr	r2, [pc, #136]	; (8002ca4 <TIM_OC4_SetConfig+0xb4>)
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	4a21      	ldr	r2, [pc, #132]	; (8002ca8 <TIM_OC4_SetConfig+0xb8>)
 8002c24:	4013      	ands	r3, r2
 8002c26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	021b      	lsls	r3, r3, #8
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	4a1d      	ldr	r2, [pc, #116]	; (8002cac <TIM_OC4_SetConfig+0xbc>)
 8002c38:	4013      	ands	r3, r2
 8002c3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	031b      	lsls	r3, r3, #12
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4a19      	ldr	r2, [pc, #100]	; (8002cb0 <TIM_OC4_SetConfig+0xc0>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d00b      	beq.n	8002c68 <TIM_OC4_SetConfig+0x78>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a18      	ldr	r2, [pc, #96]	; (8002cb4 <TIM_OC4_SetConfig+0xc4>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d007      	beq.n	8002c68 <TIM_OC4_SetConfig+0x78>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a17      	ldr	r2, [pc, #92]	; (8002cb8 <TIM_OC4_SetConfig+0xc8>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d003      	beq.n	8002c68 <TIM_OC4_SetConfig+0x78>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4a16      	ldr	r2, [pc, #88]	; (8002cbc <TIM_OC4_SetConfig+0xcc>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d109      	bne.n	8002c7c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	4a15      	ldr	r2, [pc, #84]	; (8002cc0 <TIM_OC4_SetConfig+0xd0>)
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	695b      	ldr	r3, [r3, #20]
 8002c74:	019b      	lsls	r3, r3, #6
 8002c76:	697a      	ldr	r2, [r7, #20]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	68fa      	ldr	r2, [r7, #12]
 8002c86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685a      	ldr	r2, [r3, #4]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	621a      	str	r2, [r3, #32]
}
 8002c96:	46c0      	nop			; (mov r8, r8)
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	b006      	add	sp, #24
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	46c0      	nop			; (mov r8, r8)
 8002ca0:	ffffefff 	.word	0xffffefff
 8002ca4:	ffff8fff 	.word	0xffff8fff
 8002ca8:	fffffcff 	.word	0xfffffcff
 8002cac:	ffffdfff 	.word	0xffffdfff
 8002cb0:	40012c00 	.word	0x40012c00
 8002cb4:	40014000 	.word	0x40014000
 8002cb8:	40014400 	.word	0x40014400
 8002cbc:	40014800 	.word	0x40014800
 8002cc0:	ffffbfff 	.word	0xffffbfff

08002cc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b086      	sub	sp, #24
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	4393      	bics	r3, r2
 8002cde:	001a      	movs	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	22f0      	movs	r2, #240	; 0xf0
 8002cee:	4393      	bics	r3, r2
 8002cf0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	011b      	lsls	r3, r3, #4
 8002cf6:	693a      	ldr	r2, [r7, #16]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	220a      	movs	r2, #10
 8002d00:	4393      	bics	r3, r2
 8002d02:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d04:	697a      	ldr	r2, [r7, #20]
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	621a      	str	r2, [r3, #32]
}
 8002d18:	46c0      	nop			; (mov r8, r8)
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	b006      	add	sp, #24
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6a1b      	ldr	r3, [r3, #32]
 8002d30:	2210      	movs	r2, #16
 8002d32:	4393      	bics	r3, r2
 8002d34:	001a      	movs	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6a1b      	ldr	r3, [r3, #32]
 8002d44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	4a0d      	ldr	r2, [pc, #52]	; (8002d80 <TIM_TI2_ConfigInputStage+0x60>)
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	031b      	lsls	r3, r3, #12
 8002d52:	697a      	ldr	r2, [r7, #20]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	22a0      	movs	r2, #160	; 0xa0
 8002d5c:	4393      	bics	r3, r2
 8002d5e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	011b      	lsls	r3, r3, #4
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	697a      	ldr	r2, [r7, #20]
 8002d6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	621a      	str	r2, [r3, #32]
}
 8002d76:	46c0      	nop			; (mov r8, r8)
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	b006      	add	sp, #24
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	46c0      	nop			; (mov r8, r8)
 8002d80:	ffff0fff 	.word	0xffff0fff

08002d84 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2270      	movs	r2, #112	; 0x70
 8002d98:	4393      	bics	r3, r2
 8002d9a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d9c:	683a      	ldr	r2, [r7, #0]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	2207      	movs	r2, #7
 8002da4:	4313      	orrs	r3, r2
 8002da6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	609a      	str	r2, [r3, #8]
}
 8002dae:	46c0      	nop			; (mov r8, r8)
 8002db0:	46bd      	mov	sp, r7
 8002db2:	b004      	add	sp, #16
 8002db4:	bd80      	pop	{r7, pc}
	...

08002db8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
 8002dc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	4a09      	ldr	r2, [pc, #36]	; (8002df4 <TIM_ETR_SetConfig+0x3c>)
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	021a      	lsls	r2, r3, #8
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	697a      	ldr	r2, [r7, #20]
 8002dea:	609a      	str	r2, [r3, #8]
}
 8002dec:	46c0      	nop			; (mov r8, r8)
 8002dee:	46bd      	mov	sp, r7
 8002df0:	b006      	add	sp, #24
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	ffff00ff 	.word	0xffff00ff

08002df8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	221f      	movs	r2, #31
 8002e08:	4013      	ands	r3, r2
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	409a      	lsls	r2, r3
 8002e0e:	0013      	movs	r3, r2
 8002e10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6a1b      	ldr	r3, [r3, #32]
 8002e16:	697a      	ldr	r2, [r7, #20]
 8002e18:	43d2      	mvns	r2, r2
 8002e1a:	401a      	ands	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6a1a      	ldr	r2, [r3, #32]
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	211f      	movs	r1, #31
 8002e28:	400b      	ands	r3, r1
 8002e2a:	6879      	ldr	r1, [r7, #4]
 8002e2c:	4099      	lsls	r1, r3
 8002e2e:	000b      	movs	r3, r1
 8002e30:	431a      	orrs	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	621a      	str	r2, [r3, #32]
}
 8002e36:	46c0      	nop			; (mov r8, r8)
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	b006      	add	sp, #24
 8002e3c:	bd80      	pop	{r7, pc}
	...

08002e40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	223c      	movs	r2, #60	; 0x3c
 8002e4e:	5c9b      	ldrb	r3, [r3, r2]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d101      	bne.n	8002e58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e54:	2302      	movs	r3, #2
 8002e56:	e047      	b.n	8002ee8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	223c      	movs	r2, #60	; 0x3c
 8002e5c:	2101      	movs	r1, #1
 8002e5e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	223d      	movs	r2, #61	; 0x3d
 8002e64:	2102      	movs	r1, #2
 8002e66:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2270      	movs	r2, #112	; 0x70
 8002e7c:	4393      	bics	r3, r2
 8002e7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a16      	ldr	r2, [pc, #88]	; (8002ef0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d00f      	beq.n	8002ebc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	2380      	movs	r3, #128	; 0x80
 8002ea2:	05db      	lsls	r3, r3, #23
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d009      	beq.n	8002ebc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a11      	ldr	r2, [pc, #68]	; (8002ef4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d004      	beq.n	8002ebc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a10      	ldr	r2, [pc, #64]	; (8002ef8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d10c      	bne.n	8002ed6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	2280      	movs	r2, #128	; 0x80
 8002ec0:	4393      	bics	r3, r2
 8002ec2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	68ba      	ldr	r2, [r7, #8]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68ba      	ldr	r2, [r7, #8]
 8002ed4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	223d      	movs	r2, #61	; 0x3d
 8002eda:	2101      	movs	r1, #1
 8002edc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	223c      	movs	r2, #60	; 0x3c
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	0018      	movs	r0, r3
 8002eea:	46bd      	mov	sp, r7
 8002eec:	b004      	add	sp, #16
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	40012c00 	.word	0x40012c00
 8002ef4:	40000400 	.word	0x40000400
 8002ef8:	40014000 	.word	0x40014000

08002efc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e044      	b.n	8002f98 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d107      	bne.n	8002f26 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2278      	movs	r2, #120	; 0x78
 8002f1a:	2100      	movs	r1, #0
 8002f1c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	0018      	movs	r0, r3
 8002f22:	f7fd ffb7 	bl	8000e94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2224      	movs	r2, #36	; 0x24
 8002f2a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2101      	movs	r1, #1
 8002f38:	438a      	bics	r2, r1
 8002f3a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	0018      	movs	r0, r3
 8002f40:	f000 fb84 	bl	800364c <UART_SetConfig>
 8002f44:	0003      	movs	r3, r0
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d101      	bne.n	8002f4e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e024      	b.n	8002f98 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d003      	beq.n	8002f5e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	0018      	movs	r0, r3
 8002f5a:	f000 fcb7 	bl	80038cc <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	685a      	ldr	r2, [r3, #4]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	490d      	ldr	r1, [pc, #52]	; (8002fa0 <HAL_UART_Init+0xa4>)
 8002f6a:	400a      	ands	r2, r1
 8002f6c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	689a      	ldr	r2, [r3, #8]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	212a      	movs	r1, #42	; 0x2a
 8002f7a:	438a      	bics	r2, r1
 8002f7c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2101      	movs	r1, #1
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	0018      	movs	r0, r3
 8002f92:	f000 fd4f 	bl	8003a34 <UART_CheckIdleState>
 8002f96:	0003      	movs	r3, r0
}
 8002f98:	0018      	movs	r0, r3
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	b002      	add	sp, #8
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	ffffb7ff 	.word	0xffffb7ff

08002fa4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b088      	sub	sp, #32
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	1dbb      	adds	r3, r7, #6
 8002fb0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2280      	movs	r2, #128	; 0x80
 8002fb6:	589b      	ldr	r3, [r3, r2]
 8002fb8:	2b20      	cmp	r3, #32
 8002fba:	d145      	bne.n	8003048 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <HAL_UART_Receive_IT+0x26>
 8002fc2:	1dbb      	adds	r3, r7, #6
 8002fc4:	881b      	ldrh	r3, [r3, #0]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e03d      	b.n	800304a <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	689a      	ldr	r2, [r3, #8]
 8002fd2:	2380      	movs	r3, #128	; 0x80
 8002fd4:	015b      	lsls	r3, r3, #5
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d109      	bne.n	8002fee <HAL_UART_Receive_IT+0x4a>
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d105      	bne.n	8002fee <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	d001      	beq.n	8002fee <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e02d      	b.n	800304a <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	685a      	ldr	r2, [r3, #4]
 8002ffa:	2380      	movs	r3, #128	; 0x80
 8002ffc:	041b      	lsls	r3, r3, #16
 8002ffe:	4013      	ands	r3, r2
 8003000:	d019      	beq.n	8003036 <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003002:	f3ef 8310 	mrs	r3, PRIMASK
 8003006:	613b      	str	r3, [r7, #16]
  return(result);
 8003008:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800300a:	61fb      	str	r3, [r7, #28]
 800300c:	2301      	movs	r3, #1
 800300e:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	f383 8810 	msr	PRIMASK, r3
}
 8003016:	46c0      	nop			; (mov r8, r8)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2180      	movs	r1, #128	; 0x80
 8003024:	04c9      	lsls	r1, r1, #19
 8003026:	430a      	orrs	r2, r1
 8003028:	601a      	str	r2, [r3, #0]
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	f383 8810 	msr	PRIMASK, r3
}
 8003034:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003036:	1dbb      	adds	r3, r7, #6
 8003038:	881a      	ldrh	r2, [r3, #0]
 800303a:	68b9      	ldr	r1, [r7, #8]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	0018      	movs	r0, r3
 8003040:	f000 fe0a 	bl	8003c58 <UART_Start_Receive_IT>
 8003044:	0003      	movs	r3, r0
 8003046:	e000      	b.n	800304a <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8003048:	2302      	movs	r3, #2
  }
}
 800304a:	0018      	movs	r0, r3
 800304c:	46bd      	mov	sp, r7
 800304e:	b008      	add	sp, #32
 8003050:	bd80      	pop	{r7, pc}
	...

08003054 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003054:	b590      	push	{r4, r7, lr}
 8003056:	b0ab      	sub	sp, #172	; 0xac
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	22a4      	movs	r2, #164	; 0xa4
 8003064:	18b9      	adds	r1, r7, r2
 8003066:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	20a0      	movs	r0, #160	; 0xa0
 8003070:	1839      	adds	r1, r7, r0
 8003072:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	219c      	movs	r1, #156	; 0x9c
 800307c:	1879      	adds	r1, r7, r1
 800307e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003080:	0011      	movs	r1, r2
 8003082:	18bb      	adds	r3, r7, r2
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a99      	ldr	r2, [pc, #612]	; (80032ec <HAL_UART_IRQHandler+0x298>)
 8003088:	4013      	ands	r3, r2
 800308a:	2298      	movs	r2, #152	; 0x98
 800308c:	18bc      	adds	r4, r7, r2
 800308e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003090:	18bb      	adds	r3, r7, r2
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d114      	bne.n	80030c2 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003098:	187b      	adds	r3, r7, r1
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2220      	movs	r2, #32
 800309e:	4013      	ands	r3, r2
 80030a0:	d00f      	beq.n	80030c2 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80030a2:	183b      	adds	r3, r7, r0
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2220      	movs	r2, #32
 80030a8:	4013      	ands	r3, r2
 80030aa:	d00a      	beq.n	80030c2 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d100      	bne.n	80030b6 <HAL_UART_IRQHandler+0x62>
 80030b4:	e29e      	b.n	80035f4 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	0010      	movs	r0, r2
 80030be:	4798      	blx	r3
      }
      return;
 80030c0:	e298      	b.n	80035f4 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80030c2:	2398      	movs	r3, #152	; 0x98
 80030c4:	18fb      	adds	r3, r7, r3
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d100      	bne.n	80030ce <HAL_UART_IRQHandler+0x7a>
 80030cc:	e114      	b.n	80032f8 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80030ce:	239c      	movs	r3, #156	; 0x9c
 80030d0:	18fb      	adds	r3, r7, r3
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2201      	movs	r2, #1
 80030d6:	4013      	ands	r3, r2
 80030d8:	d106      	bne.n	80030e8 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80030da:	23a0      	movs	r3, #160	; 0xa0
 80030dc:	18fb      	adds	r3, r7, r3
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a83      	ldr	r2, [pc, #524]	; (80032f0 <HAL_UART_IRQHandler+0x29c>)
 80030e2:	4013      	ands	r3, r2
 80030e4:	d100      	bne.n	80030e8 <HAL_UART_IRQHandler+0x94>
 80030e6:	e107      	b.n	80032f8 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80030e8:	23a4      	movs	r3, #164	; 0xa4
 80030ea:	18fb      	adds	r3, r7, r3
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2201      	movs	r2, #1
 80030f0:	4013      	ands	r3, r2
 80030f2:	d012      	beq.n	800311a <HAL_UART_IRQHandler+0xc6>
 80030f4:	23a0      	movs	r3, #160	; 0xa0
 80030f6:	18fb      	adds	r3, r7, r3
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	2380      	movs	r3, #128	; 0x80
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	4013      	ands	r3, r2
 8003100:	d00b      	beq.n	800311a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2201      	movs	r2, #1
 8003108:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2284      	movs	r2, #132	; 0x84
 800310e:	589b      	ldr	r3, [r3, r2]
 8003110:	2201      	movs	r2, #1
 8003112:	431a      	orrs	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2184      	movs	r1, #132	; 0x84
 8003118:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800311a:	23a4      	movs	r3, #164	; 0xa4
 800311c:	18fb      	adds	r3, r7, r3
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2202      	movs	r2, #2
 8003122:	4013      	ands	r3, r2
 8003124:	d011      	beq.n	800314a <HAL_UART_IRQHandler+0xf6>
 8003126:	239c      	movs	r3, #156	; 0x9c
 8003128:	18fb      	adds	r3, r7, r3
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2201      	movs	r2, #1
 800312e:	4013      	ands	r3, r2
 8003130:	d00b      	beq.n	800314a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2202      	movs	r2, #2
 8003138:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2284      	movs	r2, #132	; 0x84
 800313e:	589b      	ldr	r3, [r3, r2]
 8003140:	2204      	movs	r2, #4
 8003142:	431a      	orrs	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2184      	movs	r1, #132	; 0x84
 8003148:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800314a:	23a4      	movs	r3, #164	; 0xa4
 800314c:	18fb      	adds	r3, r7, r3
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2204      	movs	r2, #4
 8003152:	4013      	ands	r3, r2
 8003154:	d011      	beq.n	800317a <HAL_UART_IRQHandler+0x126>
 8003156:	239c      	movs	r3, #156	; 0x9c
 8003158:	18fb      	adds	r3, r7, r3
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2201      	movs	r2, #1
 800315e:	4013      	ands	r3, r2
 8003160:	d00b      	beq.n	800317a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2204      	movs	r2, #4
 8003168:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2284      	movs	r2, #132	; 0x84
 800316e:	589b      	ldr	r3, [r3, r2]
 8003170:	2202      	movs	r2, #2
 8003172:	431a      	orrs	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2184      	movs	r1, #132	; 0x84
 8003178:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800317a:	23a4      	movs	r3, #164	; 0xa4
 800317c:	18fb      	adds	r3, r7, r3
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2208      	movs	r2, #8
 8003182:	4013      	ands	r3, r2
 8003184:	d017      	beq.n	80031b6 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003186:	23a0      	movs	r3, #160	; 0xa0
 8003188:	18fb      	adds	r3, r7, r3
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2220      	movs	r2, #32
 800318e:	4013      	ands	r3, r2
 8003190:	d105      	bne.n	800319e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003192:	239c      	movs	r3, #156	; 0x9c
 8003194:	18fb      	adds	r3, r7, r3
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2201      	movs	r2, #1
 800319a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800319c:	d00b      	beq.n	80031b6 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2208      	movs	r2, #8
 80031a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2284      	movs	r2, #132	; 0x84
 80031aa:	589b      	ldr	r3, [r3, r2]
 80031ac:	2208      	movs	r2, #8
 80031ae:	431a      	orrs	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2184      	movs	r1, #132	; 0x84
 80031b4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80031b6:	23a4      	movs	r3, #164	; 0xa4
 80031b8:	18fb      	adds	r3, r7, r3
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	2380      	movs	r3, #128	; 0x80
 80031be:	011b      	lsls	r3, r3, #4
 80031c0:	4013      	ands	r3, r2
 80031c2:	d013      	beq.n	80031ec <HAL_UART_IRQHandler+0x198>
 80031c4:	23a0      	movs	r3, #160	; 0xa0
 80031c6:	18fb      	adds	r3, r7, r3
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	2380      	movs	r3, #128	; 0x80
 80031cc:	04db      	lsls	r3, r3, #19
 80031ce:	4013      	ands	r3, r2
 80031d0:	d00c      	beq.n	80031ec <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2280      	movs	r2, #128	; 0x80
 80031d8:	0112      	lsls	r2, r2, #4
 80031da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2284      	movs	r2, #132	; 0x84
 80031e0:	589b      	ldr	r3, [r3, r2]
 80031e2:	2220      	movs	r2, #32
 80031e4:	431a      	orrs	r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2184      	movs	r1, #132	; 0x84
 80031ea:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2284      	movs	r2, #132	; 0x84
 80031f0:	589b      	ldr	r3, [r3, r2]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d100      	bne.n	80031f8 <HAL_UART_IRQHandler+0x1a4>
 80031f6:	e1ff      	b.n	80035f8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80031f8:	23a4      	movs	r3, #164	; 0xa4
 80031fa:	18fb      	adds	r3, r7, r3
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2220      	movs	r2, #32
 8003200:	4013      	ands	r3, r2
 8003202:	d00e      	beq.n	8003222 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003204:	23a0      	movs	r3, #160	; 0xa0
 8003206:	18fb      	adds	r3, r7, r3
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2220      	movs	r2, #32
 800320c:	4013      	ands	r3, r2
 800320e:	d008      	beq.n	8003222 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003214:	2b00      	cmp	r3, #0
 8003216:	d004      	beq.n	8003222 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	0010      	movs	r0, r2
 8003220:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2284      	movs	r2, #132	; 0x84
 8003226:	589b      	ldr	r3, [r3, r2]
 8003228:	2194      	movs	r1, #148	; 0x94
 800322a:	187a      	adds	r2, r7, r1
 800322c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	2240      	movs	r2, #64	; 0x40
 8003236:	4013      	ands	r3, r2
 8003238:	2b40      	cmp	r3, #64	; 0x40
 800323a:	d004      	beq.n	8003246 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800323c:	187b      	adds	r3, r7, r1
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2228      	movs	r2, #40	; 0x28
 8003242:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003244:	d047      	beq.n	80032d6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	0018      	movs	r0, r3
 800324a:	f000 fdbb 	bl	8003dc4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	2240      	movs	r2, #64	; 0x40
 8003256:	4013      	ands	r3, r2
 8003258:	2b40      	cmp	r3, #64	; 0x40
 800325a:	d137      	bne.n	80032cc <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800325c:	f3ef 8310 	mrs	r3, PRIMASK
 8003260:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003262:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003264:	2090      	movs	r0, #144	; 0x90
 8003266:	183a      	adds	r2, r7, r0
 8003268:	6013      	str	r3, [r2, #0]
 800326a:	2301      	movs	r3, #1
 800326c:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800326e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003270:	f383 8810 	msr	PRIMASK, r3
}
 8003274:	46c0      	nop			; (mov r8, r8)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	689a      	ldr	r2, [r3, #8]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2140      	movs	r1, #64	; 0x40
 8003282:	438a      	bics	r2, r1
 8003284:	609a      	str	r2, [r3, #8]
 8003286:	183b      	adds	r3, r7, r0
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800328c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800328e:	f383 8810 	msr	PRIMASK, r3
}
 8003292:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003298:	2b00      	cmp	r3, #0
 800329a:	d012      	beq.n	80032c2 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032a0:	4a14      	ldr	r2, [pc, #80]	; (80032f4 <HAL_UART_IRQHandler+0x2a0>)
 80032a2:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032a8:	0018      	movs	r0, r3
 80032aa:	f7fe f83b 	bl	8001324 <HAL_DMA_Abort_IT>
 80032ae:	1e03      	subs	r3, r0, #0
 80032b0:	d01a      	beq.n	80032e8 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032bc:	0018      	movs	r0, r3
 80032be:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032c0:	e012      	b.n	80032e8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	0018      	movs	r0, r3
 80032c6:	f000 f9ad 	bl	8003624 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032ca:	e00d      	b.n	80032e8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	0018      	movs	r0, r3
 80032d0:	f000 f9a8 	bl	8003624 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032d4:	e008      	b.n	80032e8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	0018      	movs	r0, r3
 80032da:	f000 f9a3 	bl	8003624 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2284      	movs	r2, #132	; 0x84
 80032e2:	2100      	movs	r1, #0
 80032e4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80032e6:	e187      	b.n	80035f8 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032e8:	46c0      	nop			; (mov r8, r8)
    return;
 80032ea:	e185      	b.n	80035f8 <HAL_UART_IRQHandler+0x5a4>
 80032ec:	0000080f 	.word	0x0000080f
 80032f0:	04000120 	.word	0x04000120
 80032f4:	08003e8d 	.word	0x08003e8d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d000      	beq.n	8003302 <HAL_UART_IRQHandler+0x2ae>
 8003300:	e139      	b.n	8003576 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003302:	23a4      	movs	r3, #164	; 0xa4
 8003304:	18fb      	adds	r3, r7, r3
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2210      	movs	r2, #16
 800330a:	4013      	ands	r3, r2
 800330c:	d100      	bne.n	8003310 <HAL_UART_IRQHandler+0x2bc>
 800330e:	e132      	b.n	8003576 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003310:	23a0      	movs	r3, #160	; 0xa0
 8003312:	18fb      	adds	r3, r7, r3
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2210      	movs	r2, #16
 8003318:	4013      	ands	r3, r2
 800331a:	d100      	bne.n	800331e <HAL_UART_IRQHandler+0x2ca>
 800331c:	e12b      	b.n	8003576 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2210      	movs	r2, #16
 8003324:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	2240      	movs	r2, #64	; 0x40
 800332e:	4013      	ands	r3, r2
 8003330:	2b40      	cmp	r3, #64	; 0x40
 8003332:	d000      	beq.n	8003336 <HAL_UART_IRQHandler+0x2e2>
 8003334:	e09f      	b.n	8003476 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	685a      	ldr	r2, [r3, #4]
 800333e:	217e      	movs	r1, #126	; 0x7e
 8003340:	187b      	adds	r3, r7, r1
 8003342:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003344:	187b      	adds	r3, r7, r1
 8003346:	881b      	ldrh	r3, [r3, #0]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d100      	bne.n	800334e <HAL_UART_IRQHandler+0x2fa>
 800334c:	e156      	b.n	80035fc <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2258      	movs	r2, #88	; 0x58
 8003352:	5a9b      	ldrh	r3, [r3, r2]
 8003354:	187a      	adds	r2, r7, r1
 8003356:	8812      	ldrh	r2, [r2, #0]
 8003358:	429a      	cmp	r2, r3
 800335a:	d300      	bcc.n	800335e <HAL_UART_IRQHandler+0x30a>
 800335c:	e14e      	b.n	80035fc <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	187a      	adds	r2, r7, r1
 8003362:	215a      	movs	r1, #90	; 0x5a
 8003364:	8812      	ldrh	r2, [r2, #0]
 8003366:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	2b20      	cmp	r3, #32
 8003370:	d06f      	beq.n	8003452 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003372:	f3ef 8310 	mrs	r3, PRIMASK
 8003376:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800337a:	67bb      	str	r3, [r7, #120]	; 0x78
 800337c:	2301      	movs	r3, #1
 800337e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003382:	f383 8810 	msr	PRIMASK, r3
}
 8003386:	46c0      	nop			; (mov r8, r8)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	499e      	ldr	r1, [pc, #632]	; (800360c <HAL_UART_IRQHandler+0x5b8>)
 8003394:	400a      	ands	r2, r1
 8003396:	601a      	str	r2, [r3, #0]
 8003398:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800339a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800339c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800339e:	f383 8810 	msr	PRIMASK, r3
}
 80033a2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033a4:	f3ef 8310 	mrs	r3, PRIMASK
 80033a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80033aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ac:	677b      	str	r3, [r7, #116]	; 0x74
 80033ae:	2301      	movs	r3, #1
 80033b0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033b4:	f383 8810 	msr	PRIMASK, r3
}
 80033b8:	46c0      	nop			; (mov r8, r8)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	689a      	ldr	r2, [r3, #8]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2101      	movs	r1, #1
 80033c6:	438a      	bics	r2, r1
 80033c8:	609a      	str	r2, [r3, #8]
 80033ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033cc:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033d0:	f383 8810 	msr	PRIMASK, r3
}
 80033d4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033d6:	f3ef 8310 	mrs	r3, PRIMASK
 80033da:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80033dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033de:	673b      	str	r3, [r7, #112]	; 0x70
 80033e0:	2301      	movs	r3, #1
 80033e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033e6:	f383 8810 	msr	PRIMASK, r3
}
 80033ea:	46c0      	nop			; (mov r8, r8)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	689a      	ldr	r2, [r3, #8]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2140      	movs	r1, #64	; 0x40
 80033f8:	438a      	bics	r2, r1
 80033fa:	609a      	str	r2, [r3, #8]
 80033fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033fe:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003400:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003402:	f383 8810 	msr	PRIMASK, r3
}
 8003406:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2280      	movs	r2, #128	; 0x80
 800340c:	2120      	movs	r1, #32
 800340e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003416:	f3ef 8310 	mrs	r3, PRIMASK
 800341a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800341c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800341e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003420:	2301      	movs	r3, #1
 8003422:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003424:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003426:	f383 8810 	msr	PRIMASK, r3
}
 800342a:	46c0      	nop			; (mov r8, r8)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2110      	movs	r1, #16
 8003438:	438a      	bics	r2, r1
 800343a:	601a      	str	r2, [r3, #0]
 800343c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800343e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003440:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003442:	f383 8810 	msr	PRIMASK, r3
}
 8003446:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800344c:	0018      	movs	r0, r3
 800344e:	f7fd ff31 	bl	80012b4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2202      	movs	r2, #2
 8003456:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2258      	movs	r2, #88	; 0x58
 800345c:	5a9a      	ldrh	r2, [r3, r2]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	215a      	movs	r1, #90	; 0x5a
 8003462:	5a5b      	ldrh	r3, [r3, r1]
 8003464:	b29b      	uxth	r3, r3
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	b29a      	uxth	r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	0011      	movs	r1, r2
 800346e:	0018      	movs	r0, r3
 8003470:	f000 f8e0 	bl	8003634 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003474:	e0c2      	b.n	80035fc <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2258      	movs	r2, #88	; 0x58
 800347a:	5a99      	ldrh	r1, [r3, r2]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	225a      	movs	r2, #90	; 0x5a
 8003480:	5a9b      	ldrh	r3, [r3, r2]
 8003482:	b29a      	uxth	r2, r3
 8003484:	208e      	movs	r0, #142	; 0x8e
 8003486:	183b      	adds	r3, r7, r0
 8003488:	1a8a      	subs	r2, r1, r2
 800348a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	225a      	movs	r2, #90	; 0x5a
 8003490:	5a9b      	ldrh	r3, [r3, r2]
 8003492:	b29b      	uxth	r3, r3
 8003494:	2b00      	cmp	r3, #0
 8003496:	d100      	bne.n	800349a <HAL_UART_IRQHandler+0x446>
 8003498:	e0b2      	b.n	8003600 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 800349a:	183b      	adds	r3, r7, r0
 800349c:	881b      	ldrh	r3, [r3, #0]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d100      	bne.n	80034a4 <HAL_UART_IRQHandler+0x450>
 80034a2:	e0ad      	b.n	8003600 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034a4:	f3ef 8310 	mrs	r3, PRIMASK
 80034a8:	60fb      	str	r3, [r7, #12]
  return(result);
 80034aa:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034ac:	2488      	movs	r4, #136	; 0x88
 80034ae:	193a      	adds	r2, r7, r4
 80034b0:	6013      	str	r3, [r2, #0]
 80034b2:	2301      	movs	r3, #1
 80034b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	f383 8810 	msr	PRIMASK, r3
}
 80034bc:	46c0      	nop			; (mov r8, r8)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4951      	ldr	r1, [pc, #324]	; (8003610 <HAL_UART_IRQHandler+0x5bc>)
 80034ca:	400a      	ands	r2, r1
 80034cc:	601a      	str	r2, [r3, #0]
 80034ce:	193b      	adds	r3, r7, r4
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	f383 8810 	msr	PRIMASK, r3
}
 80034da:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034dc:	f3ef 8310 	mrs	r3, PRIMASK
 80034e0:	61bb      	str	r3, [r7, #24]
  return(result);
 80034e2:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034e4:	2484      	movs	r4, #132	; 0x84
 80034e6:	193a      	adds	r2, r7, r4
 80034e8:	6013      	str	r3, [r2, #0]
 80034ea:	2301      	movs	r3, #1
 80034ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	f383 8810 	msr	PRIMASK, r3
}
 80034f4:	46c0      	nop			; (mov r8, r8)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	689a      	ldr	r2, [r3, #8]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2101      	movs	r1, #1
 8003502:	438a      	bics	r2, r1
 8003504:	609a      	str	r2, [r3, #8]
 8003506:	193b      	adds	r3, r7, r4
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800350c:	6a3b      	ldr	r3, [r7, #32]
 800350e:	f383 8810 	msr	PRIMASK, r3
}
 8003512:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2280      	movs	r2, #128	; 0x80
 8003518:	2120      	movs	r1, #32
 800351a:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003528:	f3ef 8310 	mrs	r3, PRIMASK
 800352c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800352e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003530:	2480      	movs	r4, #128	; 0x80
 8003532:	193a      	adds	r2, r7, r4
 8003534:	6013      	str	r3, [r2, #0]
 8003536:	2301      	movs	r3, #1
 8003538:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800353a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800353c:	f383 8810 	msr	PRIMASK, r3
}
 8003540:	46c0      	nop			; (mov r8, r8)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2110      	movs	r1, #16
 800354e:	438a      	bics	r2, r1
 8003550:	601a      	str	r2, [r3, #0]
 8003552:	193b      	adds	r3, r7, r4
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800355a:	f383 8810 	msr	PRIMASK, r3
}
 800355e:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2202      	movs	r2, #2
 8003564:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003566:	183b      	adds	r3, r7, r0
 8003568:	881a      	ldrh	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	0011      	movs	r1, r2
 800356e:	0018      	movs	r0, r3
 8003570:	f000 f860 	bl	8003634 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003574:	e044      	b.n	8003600 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003576:	23a4      	movs	r3, #164	; 0xa4
 8003578:	18fb      	adds	r3, r7, r3
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	2380      	movs	r3, #128	; 0x80
 800357e:	035b      	lsls	r3, r3, #13
 8003580:	4013      	ands	r3, r2
 8003582:	d010      	beq.n	80035a6 <HAL_UART_IRQHandler+0x552>
 8003584:	239c      	movs	r3, #156	; 0x9c
 8003586:	18fb      	adds	r3, r7, r3
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	2380      	movs	r3, #128	; 0x80
 800358c:	03db      	lsls	r3, r3, #15
 800358e:	4013      	ands	r3, r2
 8003590:	d009      	beq.n	80035a6 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2280      	movs	r2, #128	; 0x80
 8003598:	0352      	lsls	r2, r2, #13
 800359a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	0018      	movs	r0, r3
 80035a0:	f000 fe6e 	bl	8004280 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80035a4:	e02f      	b.n	8003606 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80035a6:	23a4      	movs	r3, #164	; 0xa4
 80035a8:	18fb      	adds	r3, r7, r3
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2280      	movs	r2, #128	; 0x80
 80035ae:	4013      	ands	r3, r2
 80035b0:	d00f      	beq.n	80035d2 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80035b2:	23a0      	movs	r3, #160	; 0xa0
 80035b4:	18fb      	adds	r3, r7, r3
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2280      	movs	r2, #128	; 0x80
 80035ba:	4013      	ands	r3, r2
 80035bc:	d009      	beq.n	80035d2 <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d01e      	beq.n	8003604 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	0010      	movs	r0, r2
 80035ce:	4798      	blx	r3
    }
    return;
 80035d0:	e018      	b.n	8003604 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80035d2:	23a4      	movs	r3, #164	; 0xa4
 80035d4:	18fb      	adds	r3, r7, r3
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2240      	movs	r2, #64	; 0x40
 80035da:	4013      	ands	r3, r2
 80035dc:	d013      	beq.n	8003606 <HAL_UART_IRQHandler+0x5b2>
 80035de:	23a0      	movs	r3, #160	; 0xa0
 80035e0:	18fb      	adds	r3, r7, r3
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2240      	movs	r2, #64	; 0x40
 80035e6:	4013      	ands	r3, r2
 80035e8:	d00d      	beq.n	8003606 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	0018      	movs	r0, r3
 80035ee:	f000 fc64 	bl	8003eba <UART_EndTransmit_IT>
    return;
 80035f2:	e008      	b.n	8003606 <HAL_UART_IRQHandler+0x5b2>
      return;
 80035f4:	46c0      	nop			; (mov r8, r8)
 80035f6:	e006      	b.n	8003606 <HAL_UART_IRQHandler+0x5b2>
    return;
 80035f8:	46c0      	nop			; (mov r8, r8)
 80035fa:	e004      	b.n	8003606 <HAL_UART_IRQHandler+0x5b2>
      return;
 80035fc:	46c0      	nop			; (mov r8, r8)
 80035fe:	e002      	b.n	8003606 <HAL_UART_IRQHandler+0x5b2>
      return;
 8003600:	46c0      	nop			; (mov r8, r8)
 8003602:	e000      	b.n	8003606 <HAL_UART_IRQHandler+0x5b2>
    return;
 8003604:	46c0      	nop			; (mov r8, r8)
  }

}
 8003606:	46bd      	mov	sp, r7
 8003608:	b02b      	add	sp, #172	; 0xac
 800360a:	bd90      	pop	{r4, r7, pc}
 800360c:	fffffeff 	.word	0xfffffeff
 8003610:	fffffedf 	.word	0xfffffedf

08003614 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800361c:	46c0      	nop			; (mov r8, r8)
 800361e:	46bd      	mov	sp, r7
 8003620:	b002      	add	sp, #8
 8003622:	bd80      	pop	{r7, pc}

08003624 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800362c:	46c0      	nop			; (mov r8, r8)
 800362e:	46bd      	mov	sp, r7
 8003630:	b002      	add	sp, #8
 8003632:	bd80      	pop	{r7, pc}

08003634 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	000a      	movs	r2, r1
 800363e:	1cbb      	adds	r3, r7, #2
 8003640:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003642:	46c0      	nop			; (mov r8, r8)
 8003644:	46bd      	mov	sp, r7
 8003646:	b002      	add	sp, #8
 8003648:	bd80      	pop	{r7, pc}
	...

0800364c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b088      	sub	sp, #32
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003654:	231e      	movs	r3, #30
 8003656:	18fb      	adds	r3, r7, r3
 8003658:	2200      	movs	r2, #0
 800365a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689a      	ldr	r2, [r3, #8]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	431a      	orrs	r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	431a      	orrs	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	69db      	ldr	r3, [r3, #28]
 8003670:	4313      	orrs	r3, r2
 8003672:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a8d      	ldr	r2, [pc, #564]	; (80038b0 <UART_SetConfig+0x264>)
 800367c:	4013      	ands	r3, r2
 800367e:	0019      	movs	r1, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	697a      	ldr	r2, [r7, #20]
 8003686:	430a      	orrs	r2, r1
 8003688:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	4a88      	ldr	r2, [pc, #544]	; (80038b4 <UART_SetConfig+0x268>)
 8003692:	4013      	ands	r3, r2
 8003694:	0019      	movs	r1, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	68da      	ldr	r2, [r3, #12]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	430a      	orrs	r2, r1
 80036a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a1b      	ldr	r3, [r3, #32]
 80036ac:	697a      	ldr	r2, [r7, #20]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	4a7f      	ldr	r2, [pc, #508]	; (80038b8 <UART_SetConfig+0x26c>)
 80036ba:	4013      	ands	r3, r2
 80036bc:	0019      	movs	r1, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	430a      	orrs	r2, r1
 80036c6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a7b      	ldr	r2, [pc, #492]	; (80038bc <UART_SetConfig+0x270>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d127      	bne.n	8003722 <UART_SetConfig+0xd6>
 80036d2:	4b7b      	ldr	r3, [pc, #492]	; (80038c0 <UART_SetConfig+0x274>)
 80036d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d6:	2203      	movs	r2, #3
 80036d8:	4013      	ands	r3, r2
 80036da:	2b03      	cmp	r3, #3
 80036dc:	d00d      	beq.n	80036fa <UART_SetConfig+0xae>
 80036de:	d81b      	bhi.n	8003718 <UART_SetConfig+0xcc>
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d014      	beq.n	800370e <UART_SetConfig+0xc2>
 80036e4:	d818      	bhi.n	8003718 <UART_SetConfig+0xcc>
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d002      	beq.n	80036f0 <UART_SetConfig+0xa4>
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d00a      	beq.n	8003704 <UART_SetConfig+0xb8>
 80036ee:	e013      	b.n	8003718 <UART_SetConfig+0xcc>
 80036f0:	231f      	movs	r3, #31
 80036f2:	18fb      	adds	r3, r7, r3
 80036f4:	2200      	movs	r2, #0
 80036f6:	701a      	strb	r2, [r3, #0]
 80036f8:	e021      	b.n	800373e <UART_SetConfig+0xf2>
 80036fa:	231f      	movs	r3, #31
 80036fc:	18fb      	adds	r3, r7, r3
 80036fe:	2202      	movs	r2, #2
 8003700:	701a      	strb	r2, [r3, #0]
 8003702:	e01c      	b.n	800373e <UART_SetConfig+0xf2>
 8003704:	231f      	movs	r3, #31
 8003706:	18fb      	adds	r3, r7, r3
 8003708:	2204      	movs	r2, #4
 800370a:	701a      	strb	r2, [r3, #0]
 800370c:	e017      	b.n	800373e <UART_SetConfig+0xf2>
 800370e:	231f      	movs	r3, #31
 8003710:	18fb      	adds	r3, r7, r3
 8003712:	2208      	movs	r2, #8
 8003714:	701a      	strb	r2, [r3, #0]
 8003716:	e012      	b.n	800373e <UART_SetConfig+0xf2>
 8003718:	231f      	movs	r3, #31
 800371a:	18fb      	adds	r3, r7, r3
 800371c:	2210      	movs	r2, #16
 800371e:	701a      	strb	r2, [r3, #0]
 8003720:	e00d      	b.n	800373e <UART_SetConfig+0xf2>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a67      	ldr	r2, [pc, #412]	; (80038c4 <UART_SetConfig+0x278>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d104      	bne.n	8003736 <UART_SetConfig+0xea>
 800372c:	231f      	movs	r3, #31
 800372e:	18fb      	adds	r3, r7, r3
 8003730:	2200      	movs	r2, #0
 8003732:	701a      	strb	r2, [r3, #0]
 8003734:	e003      	b.n	800373e <UART_SetConfig+0xf2>
 8003736:	231f      	movs	r3, #31
 8003738:	18fb      	adds	r3, r7, r3
 800373a:	2210      	movs	r2, #16
 800373c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	69da      	ldr	r2, [r3, #28]
 8003742:	2380      	movs	r3, #128	; 0x80
 8003744:	021b      	lsls	r3, r3, #8
 8003746:	429a      	cmp	r2, r3
 8003748:	d15c      	bne.n	8003804 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 800374a:	231f      	movs	r3, #31
 800374c:	18fb      	adds	r3, r7, r3
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	2b08      	cmp	r3, #8
 8003752:	d015      	beq.n	8003780 <UART_SetConfig+0x134>
 8003754:	dc18      	bgt.n	8003788 <UART_SetConfig+0x13c>
 8003756:	2b04      	cmp	r3, #4
 8003758:	d00d      	beq.n	8003776 <UART_SetConfig+0x12a>
 800375a:	dc15      	bgt.n	8003788 <UART_SetConfig+0x13c>
 800375c:	2b00      	cmp	r3, #0
 800375e:	d002      	beq.n	8003766 <UART_SetConfig+0x11a>
 8003760:	2b02      	cmp	r3, #2
 8003762:	d005      	beq.n	8003770 <UART_SetConfig+0x124>
 8003764:	e010      	b.n	8003788 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003766:	f7fe fbf9 	bl	8001f5c <HAL_RCC_GetPCLK1Freq>
 800376a:	0003      	movs	r3, r0
 800376c:	61bb      	str	r3, [r7, #24]
        break;
 800376e:	e012      	b.n	8003796 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003770:	4b55      	ldr	r3, [pc, #340]	; (80038c8 <UART_SetConfig+0x27c>)
 8003772:	61bb      	str	r3, [r7, #24]
        break;
 8003774:	e00f      	b.n	8003796 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003776:	f7fe fb91 	bl	8001e9c <HAL_RCC_GetSysClockFreq>
 800377a:	0003      	movs	r3, r0
 800377c:	61bb      	str	r3, [r7, #24]
        break;
 800377e:	e00a      	b.n	8003796 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003780:	2380      	movs	r3, #128	; 0x80
 8003782:	021b      	lsls	r3, r3, #8
 8003784:	61bb      	str	r3, [r7, #24]
        break;
 8003786:	e006      	b.n	8003796 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003788:	2300      	movs	r3, #0
 800378a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800378c:	231e      	movs	r3, #30
 800378e:	18fb      	adds	r3, r7, r3
 8003790:	2201      	movs	r2, #1
 8003792:	701a      	strb	r2, [r3, #0]
        break;
 8003794:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d100      	bne.n	800379e <UART_SetConfig+0x152>
 800379c:	e07a      	b.n	8003894 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	005a      	lsls	r2, r3, #1
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	085b      	lsrs	r3, r3, #1
 80037a8:	18d2      	adds	r2, r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	0019      	movs	r1, r3
 80037b0:	0010      	movs	r0, r2
 80037b2:	f7fc fca9 	bl	8000108 <__udivsi3>
 80037b6:	0003      	movs	r3, r0
 80037b8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	2b0f      	cmp	r3, #15
 80037be:	d91c      	bls.n	80037fa <UART_SetConfig+0x1ae>
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	2380      	movs	r3, #128	; 0x80
 80037c4:	025b      	lsls	r3, r3, #9
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d217      	bcs.n	80037fa <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	200e      	movs	r0, #14
 80037d0:	183b      	adds	r3, r7, r0
 80037d2:	210f      	movs	r1, #15
 80037d4:	438a      	bics	r2, r1
 80037d6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	085b      	lsrs	r3, r3, #1
 80037dc:	b29b      	uxth	r3, r3
 80037de:	2207      	movs	r2, #7
 80037e0:	4013      	ands	r3, r2
 80037e2:	b299      	uxth	r1, r3
 80037e4:	183b      	adds	r3, r7, r0
 80037e6:	183a      	adds	r2, r7, r0
 80037e8:	8812      	ldrh	r2, [r2, #0]
 80037ea:	430a      	orrs	r2, r1
 80037ec:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	183a      	adds	r2, r7, r0
 80037f4:	8812      	ldrh	r2, [r2, #0]
 80037f6:	60da      	str	r2, [r3, #12]
 80037f8:	e04c      	b.n	8003894 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80037fa:	231e      	movs	r3, #30
 80037fc:	18fb      	adds	r3, r7, r3
 80037fe:	2201      	movs	r2, #1
 8003800:	701a      	strb	r2, [r3, #0]
 8003802:	e047      	b.n	8003894 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003804:	231f      	movs	r3, #31
 8003806:	18fb      	adds	r3, r7, r3
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	2b08      	cmp	r3, #8
 800380c:	d015      	beq.n	800383a <UART_SetConfig+0x1ee>
 800380e:	dc18      	bgt.n	8003842 <UART_SetConfig+0x1f6>
 8003810:	2b04      	cmp	r3, #4
 8003812:	d00d      	beq.n	8003830 <UART_SetConfig+0x1e4>
 8003814:	dc15      	bgt.n	8003842 <UART_SetConfig+0x1f6>
 8003816:	2b00      	cmp	r3, #0
 8003818:	d002      	beq.n	8003820 <UART_SetConfig+0x1d4>
 800381a:	2b02      	cmp	r3, #2
 800381c:	d005      	beq.n	800382a <UART_SetConfig+0x1de>
 800381e:	e010      	b.n	8003842 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003820:	f7fe fb9c 	bl	8001f5c <HAL_RCC_GetPCLK1Freq>
 8003824:	0003      	movs	r3, r0
 8003826:	61bb      	str	r3, [r7, #24]
        break;
 8003828:	e012      	b.n	8003850 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800382a:	4b27      	ldr	r3, [pc, #156]	; (80038c8 <UART_SetConfig+0x27c>)
 800382c:	61bb      	str	r3, [r7, #24]
        break;
 800382e:	e00f      	b.n	8003850 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003830:	f7fe fb34 	bl	8001e9c <HAL_RCC_GetSysClockFreq>
 8003834:	0003      	movs	r3, r0
 8003836:	61bb      	str	r3, [r7, #24]
        break;
 8003838:	e00a      	b.n	8003850 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800383a:	2380      	movs	r3, #128	; 0x80
 800383c:	021b      	lsls	r3, r3, #8
 800383e:	61bb      	str	r3, [r7, #24]
        break;
 8003840:	e006      	b.n	8003850 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003842:	2300      	movs	r3, #0
 8003844:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003846:	231e      	movs	r3, #30
 8003848:	18fb      	adds	r3, r7, r3
 800384a:	2201      	movs	r2, #1
 800384c:	701a      	strb	r2, [r3, #0]
        break;
 800384e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d01e      	beq.n	8003894 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	085a      	lsrs	r2, r3, #1
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	18d2      	adds	r2, r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	0019      	movs	r1, r3
 8003866:	0010      	movs	r0, r2
 8003868:	f7fc fc4e 	bl	8000108 <__udivsi3>
 800386c:	0003      	movs	r3, r0
 800386e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	2b0f      	cmp	r3, #15
 8003874:	d90a      	bls.n	800388c <UART_SetConfig+0x240>
 8003876:	693a      	ldr	r2, [r7, #16]
 8003878:	2380      	movs	r3, #128	; 0x80
 800387a:	025b      	lsls	r3, r3, #9
 800387c:	429a      	cmp	r2, r3
 800387e:	d205      	bcs.n	800388c <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	b29a      	uxth	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	60da      	str	r2, [r3, #12]
 800388a:	e003      	b.n	8003894 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 800388c:	231e      	movs	r3, #30
 800388e:	18fb      	adds	r3, r7, r3
 8003890:	2201      	movs	r2, #1
 8003892:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80038a0:	231e      	movs	r3, #30
 80038a2:	18fb      	adds	r3, r7, r3
 80038a4:	781b      	ldrb	r3, [r3, #0]
}
 80038a6:	0018      	movs	r0, r3
 80038a8:	46bd      	mov	sp, r7
 80038aa:	b008      	add	sp, #32
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	46c0      	nop			; (mov r8, r8)
 80038b0:	ffff69f3 	.word	0xffff69f3
 80038b4:	ffffcfff 	.word	0xffffcfff
 80038b8:	fffff4ff 	.word	0xfffff4ff
 80038bc:	40013800 	.word	0x40013800
 80038c0:	40021000 	.word	0x40021000
 80038c4:	40004400 	.word	0x40004400
 80038c8:	007a1200 	.word	0x007a1200

080038cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d8:	2201      	movs	r2, #1
 80038da:	4013      	ands	r3, r2
 80038dc:	d00b      	beq.n	80038f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	4a4a      	ldr	r2, [pc, #296]	; (8003a10 <UART_AdvFeatureConfig+0x144>)
 80038e6:	4013      	ands	r3, r2
 80038e8:	0019      	movs	r1, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	430a      	orrs	r2, r1
 80038f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fa:	2202      	movs	r2, #2
 80038fc:	4013      	ands	r3, r2
 80038fe:	d00b      	beq.n	8003918 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	4a43      	ldr	r2, [pc, #268]	; (8003a14 <UART_AdvFeatureConfig+0x148>)
 8003908:	4013      	ands	r3, r2
 800390a:	0019      	movs	r1, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	430a      	orrs	r2, r1
 8003916:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391c:	2204      	movs	r2, #4
 800391e:	4013      	ands	r3, r2
 8003920:	d00b      	beq.n	800393a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	4a3b      	ldr	r2, [pc, #236]	; (8003a18 <UART_AdvFeatureConfig+0x14c>)
 800392a:	4013      	ands	r3, r2
 800392c:	0019      	movs	r1, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	430a      	orrs	r2, r1
 8003938:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393e:	2208      	movs	r2, #8
 8003940:	4013      	ands	r3, r2
 8003942:	d00b      	beq.n	800395c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	4a34      	ldr	r2, [pc, #208]	; (8003a1c <UART_AdvFeatureConfig+0x150>)
 800394c:	4013      	ands	r3, r2
 800394e:	0019      	movs	r1, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	430a      	orrs	r2, r1
 800395a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003960:	2210      	movs	r2, #16
 8003962:	4013      	ands	r3, r2
 8003964:	d00b      	beq.n	800397e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	4a2c      	ldr	r2, [pc, #176]	; (8003a20 <UART_AdvFeatureConfig+0x154>)
 800396e:	4013      	ands	r3, r2
 8003970:	0019      	movs	r1, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	430a      	orrs	r2, r1
 800397c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003982:	2220      	movs	r2, #32
 8003984:	4013      	ands	r3, r2
 8003986:	d00b      	beq.n	80039a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	4a25      	ldr	r2, [pc, #148]	; (8003a24 <UART_AdvFeatureConfig+0x158>)
 8003990:	4013      	ands	r3, r2
 8003992:	0019      	movs	r1, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	430a      	orrs	r2, r1
 800399e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a4:	2240      	movs	r2, #64	; 0x40
 80039a6:	4013      	ands	r3, r2
 80039a8:	d01d      	beq.n	80039e6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	4a1d      	ldr	r2, [pc, #116]	; (8003a28 <UART_AdvFeatureConfig+0x15c>)
 80039b2:	4013      	ands	r3, r2
 80039b4:	0019      	movs	r1, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	430a      	orrs	r2, r1
 80039c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039c6:	2380      	movs	r3, #128	; 0x80
 80039c8:	035b      	lsls	r3, r3, #13
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d10b      	bne.n	80039e6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	4a15      	ldr	r2, [pc, #84]	; (8003a2c <UART_AdvFeatureConfig+0x160>)
 80039d6:	4013      	ands	r3, r2
 80039d8:	0019      	movs	r1, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	430a      	orrs	r2, r1
 80039e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ea:	2280      	movs	r2, #128	; 0x80
 80039ec:	4013      	ands	r3, r2
 80039ee:	d00b      	beq.n	8003a08 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	4a0e      	ldr	r2, [pc, #56]	; (8003a30 <UART_AdvFeatureConfig+0x164>)
 80039f8:	4013      	ands	r3, r2
 80039fa:	0019      	movs	r1, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	430a      	orrs	r2, r1
 8003a06:	605a      	str	r2, [r3, #4]
  }
}
 8003a08:	46c0      	nop			; (mov r8, r8)
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	b002      	add	sp, #8
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	fffdffff 	.word	0xfffdffff
 8003a14:	fffeffff 	.word	0xfffeffff
 8003a18:	fffbffff 	.word	0xfffbffff
 8003a1c:	ffff7fff 	.word	0xffff7fff
 8003a20:	ffffefff 	.word	0xffffefff
 8003a24:	ffffdfff 	.word	0xffffdfff
 8003a28:	ffefffff 	.word	0xffefffff
 8003a2c:	ff9fffff 	.word	0xff9fffff
 8003a30:	fff7ffff 	.word	0xfff7ffff

08003a34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b092      	sub	sp, #72	; 0x48
 8003a38:	af02      	add	r7, sp, #8
 8003a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2284      	movs	r2, #132	; 0x84
 8003a40:	2100      	movs	r1, #0
 8003a42:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a44:	f7fd fb2a 	bl	800109c <HAL_GetTick>
 8003a48:	0003      	movs	r3, r0
 8003a4a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2208      	movs	r2, #8
 8003a54:	4013      	ands	r3, r2
 8003a56:	2b08      	cmp	r3, #8
 8003a58:	d12c      	bne.n	8003ab4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a5c:	2280      	movs	r2, #128	; 0x80
 8003a5e:	0391      	lsls	r1, r2, #14
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	4a46      	ldr	r2, [pc, #280]	; (8003b7c <UART_CheckIdleState+0x148>)
 8003a64:	9200      	str	r2, [sp, #0]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f000 f88c 	bl	8003b84 <UART_WaitOnFlagUntilTimeout>
 8003a6c:	1e03      	subs	r3, r0, #0
 8003a6e:	d021      	beq.n	8003ab4 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a70:	f3ef 8310 	mrs	r3, PRIMASK
 8003a74:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003a78:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a80:	f383 8810 	msr	PRIMASK, r3
}
 8003a84:	46c0      	nop			; (mov r8, r8)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2180      	movs	r1, #128	; 0x80
 8003a92:	438a      	bics	r2, r1
 8003a94:	601a      	str	r2, [r3, #0]
 8003a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a9c:	f383 8810 	msr	PRIMASK, r3
}
 8003aa0:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2220      	movs	r2, #32
 8003aa6:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2278      	movs	r2, #120	; 0x78
 8003aac:	2100      	movs	r1, #0
 8003aae:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e05f      	b.n	8003b74 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2204      	movs	r2, #4
 8003abc:	4013      	ands	r3, r2
 8003abe:	2b04      	cmp	r3, #4
 8003ac0:	d146      	bne.n	8003b50 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ac4:	2280      	movs	r2, #128	; 0x80
 8003ac6:	03d1      	lsls	r1, r2, #15
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	4a2c      	ldr	r2, [pc, #176]	; (8003b7c <UART_CheckIdleState+0x148>)
 8003acc:	9200      	str	r2, [sp, #0]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f000 f858 	bl	8003b84 <UART_WaitOnFlagUntilTimeout>
 8003ad4:	1e03      	subs	r3, r0, #0
 8003ad6:	d03b      	beq.n	8003b50 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ad8:	f3ef 8310 	mrs	r3, PRIMASK
 8003adc:	60fb      	str	r3, [r7, #12]
  return(result);
 8003ade:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ae0:	637b      	str	r3, [r7, #52]	; 0x34
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	f383 8810 	msr	PRIMASK, r3
}
 8003aec:	46c0      	nop			; (mov r8, r8)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4921      	ldr	r1, [pc, #132]	; (8003b80 <UART_CheckIdleState+0x14c>)
 8003afa:	400a      	ands	r2, r1
 8003afc:	601a      	str	r2, [r3, #0]
 8003afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b00:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	f383 8810 	msr	PRIMASK, r3
}
 8003b08:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b0a:	f3ef 8310 	mrs	r3, PRIMASK
 8003b0e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003b10:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b12:	633b      	str	r3, [r7, #48]	; 0x30
 8003b14:	2301      	movs	r3, #1
 8003b16:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	f383 8810 	msr	PRIMASK, r3
}
 8003b1e:	46c0      	nop			; (mov r8, r8)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689a      	ldr	r2, [r3, #8]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2101      	movs	r1, #1
 8003b2c:	438a      	bics	r2, r1
 8003b2e:	609a      	str	r2, [r3, #8]
 8003b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b32:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b34:	6a3b      	ldr	r3, [r7, #32]
 8003b36:	f383 8810 	msr	PRIMASK, r3
}
 8003b3a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2280      	movs	r2, #128	; 0x80
 8003b40:	2120      	movs	r1, #32
 8003b42:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2278      	movs	r2, #120	; 0x78
 8003b48:	2100      	movs	r1, #0
 8003b4a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e011      	b.n	8003b74 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2220      	movs	r2, #32
 8003b54:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2280      	movs	r2, #128	; 0x80
 8003b5a:	2120      	movs	r1, #32
 8003b5c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2278      	movs	r2, #120	; 0x78
 8003b6e:	2100      	movs	r1, #0
 8003b70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	0018      	movs	r0, r3
 8003b76:	46bd      	mov	sp, r7
 8003b78:	b010      	add	sp, #64	; 0x40
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	01ffffff 	.word	0x01ffffff
 8003b80:	fffffedf 	.word	0xfffffedf

08003b84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	603b      	str	r3, [r7, #0]
 8003b90:	1dfb      	adds	r3, r7, #7
 8003b92:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b94:	e04b      	b.n	8003c2e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	3301      	adds	r3, #1
 8003b9a:	d048      	beq.n	8003c2e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b9c:	f7fd fa7e 	bl	800109c <HAL_GetTick>
 8003ba0:	0002      	movs	r2, r0
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	69ba      	ldr	r2, [r7, #24]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d302      	bcc.n	8003bb2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d101      	bne.n	8003bb6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e04b      	b.n	8003c4e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2204      	movs	r2, #4
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	d035      	beq.n	8003c2e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	69db      	ldr	r3, [r3, #28]
 8003bc8:	2208      	movs	r2, #8
 8003bca:	4013      	ands	r3, r2
 8003bcc:	2b08      	cmp	r3, #8
 8003bce:	d111      	bne.n	8003bf4 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2208      	movs	r2, #8
 8003bd6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	0018      	movs	r0, r3
 8003bdc:	f000 f8f2 	bl	8003dc4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2284      	movs	r2, #132	; 0x84
 8003be4:	2108      	movs	r1, #8
 8003be6:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2278      	movs	r2, #120	; 0x78
 8003bec:	2100      	movs	r1, #0
 8003bee:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e02c      	b.n	8003c4e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	69da      	ldr	r2, [r3, #28]
 8003bfa:	2380      	movs	r3, #128	; 0x80
 8003bfc:	011b      	lsls	r3, r3, #4
 8003bfe:	401a      	ands	r2, r3
 8003c00:	2380      	movs	r3, #128	; 0x80
 8003c02:	011b      	lsls	r3, r3, #4
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d112      	bne.n	8003c2e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2280      	movs	r2, #128	; 0x80
 8003c0e:	0112      	lsls	r2, r2, #4
 8003c10:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	0018      	movs	r0, r3
 8003c16:	f000 f8d5 	bl	8003dc4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2284      	movs	r2, #132	; 0x84
 8003c1e:	2120      	movs	r1, #32
 8003c20:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2278      	movs	r2, #120	; 0x78
 8003c26:	2100      	movs	r1, #0
 8003c28:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e00f      	b.n	8003c4e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	69db      	ldr	r3, [r3, #28]
 8003c34:	68ba      	ldr	r2, [r7, #8]
 8003c36:	4013      	ands	r3, r2
 8003c38:	68ba      	ldr	r2, [r7, #8]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	425a      	negs	r2, r3
 8003c3e:	4153      	adcs	r3, r2
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	001a      	movs	r2, r3
 8003c44:	1dfb      	adds	r3, r7, #7
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d0a4      	beq.n	8003b96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	0018      	movs	r0, r3
 8003c50:	46bd      	mov	sp, r7
 8003c52:	b004      	add	sp, #16
 8003c54:	bd80      	pop	{r7, pc}
	...

08003c58 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b090      	sub	sp, #64	; 0x40
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	1dbb      	adds	r3, r7, #6
 8003c64:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	68ba      	ldr	r2, [r7, #8]
 8003c6a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	1dba      	adds	r2, r7, #6
 8003c70:	2158      	movs	r1, #88	; 0x58
 8003c72:	8812      	ldrh	r2, [r2, #0]
 8003c74:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	1dba      	adds	r2, r7, #6
 8003c7a:	215a      	movs	r1, #90	; 0x5a
 8003c7c:	8812      	ldrh	r2, [r2, #0]
 8003c7e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	689a      	ldr	r2, [r3, #8]
 8003c8a:	2380      	movs	r3, #128	; 0x80
 8003c8c:	015b      	lsls	r3, r3, #5
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d10d      	bne.n	8003cae <UART_Start_Receive_IT+0x56>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d104      	bne.n	8003ca4 <UART_Start_Receive_IT+0x4c>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	225c      	movs	r2, #92	; 0x5c
 8003c9e:	4946      	ldr	r1, [pc, #280]	; (8003db8 <UART_Start_Receive_IT+0x160>)
 8003ca0:	5299      	strh	r1, [r3, r2]
 8003ca2:	e01a      	b.n	8003cda <UART_Start_Receive_IT+0x82>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	225c      	movs	r2, #92	; 0x5c
 8003ca8:	21ff      	movs	r1, #255	; 0xff
 8003caa:	5299      	strh	r1, [r3, r2]
 8003cac:	e015      	b.n	8003cda <UART_Start_Receive_IT+0x82>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d10d      	bne.n	8003cd2 <UART_Start_Receive_IT+0x7a>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d104      	bne.n	8003cc8 <UART_Start_Receive_IT+0x70>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	225c      	movs	r2, #92	; 0x5c
 8003cc2:	21ff      	movs	r1, #255	; 0xff
 8003cc4:	5299      	strh	r1, [r3, r2]
 8003cc6:	e008      	b.n	8003cda <UART_Start_Receive_IT+0x82>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	225c      	movs	r2, #92	; 0x5c
 8003ccc:	217f      	movs	r1, #127	; 0x7f
 8003cce:	5299      	strh	r1, [r3, r2]
 8003cd0:	e003      	b.n	8003cda <UART_Start_Receive_IT+0x82>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	225c      	movs	r2, #92	; 0x5c
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2284      	movs	r2, #132	; 0x84
 8003cde:	2100      	movs	r1, #0
 8003ce0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2280      	movs	r2, #128	; 0x80
 8003ce6:	2122      	movs	r1, #34	; 0x22
 8003ce8:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cea:	f3ef 8310 	mrs	r3, PRIMASK
 8003cee:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cfa:	f383 8810 	msr	PRIMASK, r3
}
 8003cfe:	46c0      	nop			; (mov r8, r8)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	689a      	ldr	r2, [r3, #8]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2101      	movs	r1, #1
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	609a      	str	r2, [r3, #8]
 8003d10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d12:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d16:	f383 8810 	msr	PRIMASK, r3
}
 8003d1a:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	689a      	ldr	r2, [r3, #8]
 8003d20:	2380      	movs	r3, #128	; 0x80
 8003d22:	015b      	lsls	r3, r3, #5
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d107      	bne.n	8003d38 <UART_Start_Receive_IT+0xe0>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d103      	bne.n	8003d38 <UART_Start_Receive_IT+0xe0>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	4a22      	ldr	r2, [pc, #136]	; (8003dbc <UART_Start_Receive_IT+0x164>)
 8003d34:	669a      	str	r2, [r3, #104]	; 0x68
 8003d36:	e002      	b.n	8003d3e <UART_Start_Receive_IT+0xe6>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	4a21      	ldr	r2, [pc, #132]	; (8003dc0 <UART_Start_Receive_IT+0x168>)
 8003d3c:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d019      	beq.n	8003d7a <UART_Start_Receive_IT+0x122>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d46:	f3ef 8310 	mrs	r3, PRIMASK
 8003d4a:	61fb      	str	r3, [r7, #28]
  return(result);
 8003d4c:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003d4e:	637b      	str	r3, [r7, #52]	; 0x34
 8003d50:	2301      	movs	r3, #1
 8003d52:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d54:	6a3b      	ldr	r3, [r7, #32]
 8003d56:	f383 8810 	msr	PRIMASK, r3
}
 8003d5a:	46c0      	nop			; (mov r8, r8)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2190      	movs	r1, #144	; 0x90
 8003d68:	0049      	lsls	r1, r1, #1
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	601a      	str	r2, [r3, #0]
 8003d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d70:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d74:	f383 8810 	msr	PRIMASK, r3
}
 8003d78:	e018      	b.n	8003dac <UART_Start_Receive_IT+0x154>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d7a:	f3ef 8310 	mrs	r3, PRIMASK
 8003d7e:	613b      	str	r3, [r7, #16]
  return(result);
 8003d80:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003d82:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d84:	2301      	movs	r3, #1
 8003d86:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	f383 8810 	msr	PRIMASK, r3
}
 8003d8e:	46c0      	nop			; (mov r8, r8)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2120      	movs	r1, #32
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	601a      	str	r2, [r3, #0]
 8003da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	f383 8810 	msr	PRIMASK, r3
}
 8003daa:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	0018      	movs	r0, r3
 8003db0:	46bd      	mov	sp, r7
 8003db2:	b010      	add	sp, #64	; 0x40
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	46c0      	nop			; (mov r8, r8)
 8003db8:	000001ff 	.word	0x000001ff
 8003dbc:	080040c9 	.word	0x080040c9
 8003dc0:	08003f11 	.word	0x08003f11

08003dc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b08e      	sub	sp, #56	; 0x38
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dcc:	f3ef 8310 	mrs	r3, PRIMASK
 8003dd0:	617b      	str	r3, [r7, #20]
  return(result);
 8003dd2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dd4:	637b      	str	r3, [r7, #52]	; 0x34
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	f383 8810 	msr	PRIMASK, r3
}
 8003de0:	46c0      	nop			; (mov r8, r8)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4926      	ldr	r1, [pc, #152]	; (8003e88 <UART_EndRxTransfer+0xc4>)
 8003dee:	400a      	ands	r2, r1
 8003df0:	601a      	str	r2, [r3, #0]
 8003df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003df4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	f383 8810 	msr	PRIMASK, r3
}
 8003dfc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dfe:	f3ef 8310 	mrs	r3, PRIMASK
 8003e02:	623b      	str	r3, [r7, #32]
  return(result);
 8003e04:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e06:	633b      	str	r3, [r7, #48]	; 0x30
 8003e08:	2301      	movs	r3, #1
 8003e0a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0e:	f383 8810 	msr	PRIMASK, r3
}
 8003e12:	46c0      	nop			; (mov r8, r8)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	689a      	ldr	r2, [r3, #8]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2101      	movs	r1, #1
 8003e20:	438a      	bics	r2, r1
 8003e22:	609a      	str	r2, [r3, #8]
 8003e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e26:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e2a:	f383 8810 	msr	PRIMASK, r3
}
 8003e2e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d118      	bne.n	8003e6a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e38:	f3ef 8310 	mrs	r3, PRIMASK
 8003e3c:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e3e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e42:	2301      	movs	r3, #1
 8003e44:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f383 8810 	msr	PRIMASK, r3
}
 8003e4c:	46c0      	nop			; (mov r8, r8)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2110      	movs	r1, #16
 8003e5a:	438a      	bics	r2, r1
 8003e5c:	601a      	str	r2, [r3, #0]
 8003e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e60:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	f383 8810 	msr	PRIMASK, r3
}
 8003e68:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2280      	movs	r2, #128	; 0x80
 8003e6e:	2120      	movs	r1, #32
 8003e70:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003e7e:	46c0      	nop			; (mov r8, r8)
 8003e80:	46bd      	mov	sp, r7
 8003e82:	b00e      	add	sp, #56	; 0x38
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	46c0      	nop			; (mov r8, r8)
 8003e88:	fffffedf 	.word	0xfffffedf

08003e8c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e98:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	225a      	movs	r2, #90	; 0x5a
 8003e9e:	2100      	movs	r1, #0
 8003ea0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2252      	movs	r2, #82	; 0x52
 8003ea6:	2100      	movs	r1, #0
 8003ea8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	0018      	movs	r0, r3
 8003eae:	f7ff fbb9 	bl	8003624 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003eb2:	46c0      	nop			; (mov r8, r8)
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	b004      	add	sp, #16
 8003eb8:	bd80      	pop	{r7, pc}

08003eba <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003eba:	b580      	push	{r7, lr}
 8003ebc:	b086      	sub	sp, #24
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ec2:	f3ef 8310 	mrs	r3, PRIMASK
 8003ec6:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ec8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003eca:	617b      	str	r3, [r7, #20]
 8003ecc:	2301      	movs	r3, #1
 8003ece:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f383 8810 	msr	PRIMASK, r3
}
 8003ed6:	46c0      	nop			; (mov r8, r8)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2140      	movs	r1, #64	; 0x40
 8003ee4:	438a      	bics	r2, r1
 8003ee6:	601a      	str	r2, [r3, #0]
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	f383 8810 	msr	PRIMASK, r3
}
 8003ef2:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	0018      	movs	r0, r3
 8003f04:	f7ff fb86 	bl	8003614 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f08:	46c0      	nop			; (mov r8, r8)
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	b006      	add	sp, #24
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b094      	sub	sp, #80	; 0x50
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003f18:	204e      	movs	r0, #78	; 0x4e
 8003f1a:	183b      	adds	r3, r7, r0
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	215c      	movs	r1, #92	; 0x5c
 8003f20:	5a52      	ldrh	r2, [r2, r1]
 8003f22:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2280      	movs	r2, #128	; 0x80
 8003f28:	589b      	ldr	r3, [r3, r2]
 8003f2a:	2b22      	cmp	r3, #34	; 0x22
 8003f2c:	d000      	beq.n	8003f30 <UART_RxISR_8BIT+0x20>
 8003f2e:	e0ba      	b.n	80040a6 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	214c      	movs	r1, #76	; 0x4c
 8003f36:	187b      	adds	r3, r7, r1
 8003f38:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8003f3a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003f3c:	187b      	adds	r3, r7, r1
 8003f3e:	881b      	ldrh	r3, [r3, #0]
 8003f40:	b2da      	uxtb	r2, r3
 8003f42:	183b      	adds	r3, r7, r0
 8003f44:	881b      	ldrh	r3, [r3, #0]
 8003f46:	b2d9      	uxtb	r1, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f4c:	400a      	ands	r2, r1
 8003f4e:	b2d2      	uxtb	r2, r2
 8003f50:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f56:	1c5a      	adds	r2, r3, #1
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	225a      	movs	r2, #90	; 0x5a
 8003f60:	5a9b      	ldrh	r3, [r3, r2]
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	3b01      	subs	r3, #1
 8003f66:	b299      	uxth	r1, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	225a      	movs	r2, #90	; 0x5a
 8003f6c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	225a      	movs	r2, #90	; 0x5a
 8003f72:	5a9b      	ldrh	r3, [r3, r2]
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d000      	beq.n	8003f7c <UART_RxISR_8BIT+0x6c>
 8003f7a:	e09c      	b.n	80040b6 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f7c:	f3ef 8310 	mrs	r3, PRIMASK
 8003f80:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f84:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f86:	2301      	movs	r3, #1
 8003f88:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f8c:	f383 8810 	msr	PRIMASK, r3
}
 8003f90:	46c0      	nop			; (mov r8, r8)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4948      	ldr	r1, [pc, #288]	; (80040c0 <UART_RxISR_8BIT+0x1b0>)
 8003f9e:	400a      	ands	r2, r1
 8003fa0:	601a      	str	r2, [r3, #0]
 8003fa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa8:	f383 8810 	msr	PRIMASK, r3
}
 8003fac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fae:	f3ef 8310 	mrs	r3, PRIMASK
 8003fb2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fb6:	647b      	str	r3, [r7, #68]	; 0x44
 8003fb8:	2301      	movs	r3, #1
 8003fba:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fbe:	f383 8810 	msr	PRIMASK, r3
}
 8003fc2:	46c0      	nop			; (mov r8, r8)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	689a      	ldr	r2, [r3, #8]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2101      	movs	r1, #1
 8003fd0:	438a      	bics	r2, r1
 8003fd2:	609a      	str	r2, [r3, #8]
 8003fd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fd6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fda:	f383 8810 	msr	PRIMASK, r3
}
 8003fde:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2280      	movs	r2, #128	; 0x80
 8003fe4:	2120      	movs	r1, #32
 8003fe6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	685a      	ldr	r2, [r3, #4]
 8003ffa:	2380      	movs	r3, #128	; 0x80
 8003ffc:	041b      	lsls	r3, r3, #16
 8003ffe:	4013      	ands	r3, r2
 8004000:	d018      	beq.n	8004034 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004002:	f3ef 8310 	mrs	r3, PRIMASK
 8004006:	61bb      	str	r3, [r7, #24]
  return(result);
 8004008:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800400a:	643b      	str	r3, [r7, #64]	; 0x40
 800400c:	2301      	movs	r3, #1
 800400e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	f383 8810 	msr	PRIMASK, r3
}
 8004016:	46c0      	nop			; (mov r8, r8)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4928      	ldr	r1, [pc, #160]	; (80040c4 <UART_RxISR_8BIT+0x1b4>)
 8004024:	400a      	ands	r2, r1
 8004026:	601a      	str	r2, [r3, #0]
 8004028:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800402a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800402c:	6a3b      	ldr	r3, [r7, #32]
 800402e:	f383 8810 	msr	PRIMASK, r3
}
 8004032:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004038:	2b01      	cmp	r3, #1
 800403a:	d12f      	bne.n	800409c <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004042:	f3ef 8310 	mrs	r3, PRIMASK
 8004046:	60fb      	str	r3, [r7, #12]
  return(result);
 8004048:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800404a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800404c:	2301      	movs	r3, #1
 800404e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	f383 8810 	msr	PRIMASK, r3
}
 8004056:	46c0      	nop			; (mov r8, r8)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2110      	movs	r1, #16
 8004064:	438a      	bics	r2, r1
 8004066:	601a      	str	r2, [r3, #0]
 8004068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800406a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	f383 8810 	msr	PRIMASK, r3
}
 8004072:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	69db      	ldr	r3, [r3, #28]
 800407a:	2210      	movs	r2, #16
 800407c:	4013      	ands	r3, r2
 800407e:	2b10      	cmp	r3, #16
 8004080:	d103      	bne.n	800408a <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2210      	movs	r2, #16
 8004088:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2258      	movs	r2, #88	; 0x58
 800408e:	5a9a      	ldrh	r2, [r3, r2]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	0011      	movs	r1, r2
 8004094:	0018      	movs	r0, r3
 8004096:	f7ff facd 	bl	8003634 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800409a:	e00c      	b.n	80040b6 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	0018      	movs	r0, r3
 80040a0:	f7fc fbac 	bl	80007fc <HAL_UART_RxCpltCallback>
}
 80040a4:	e007      	b.n	80040b6 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	699a      	ldr	r2, [r3, #24]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2108      	movs	r1, #8
 80040b2:	430a      	orrs	r2, r1
 80040b4:	619a      	str	r2, [r3, #24]
}
 80040b6:	46c0      	nop			; (mov r8, r8)
 80040b8:	46bd      	mov	sp, r7
 80040ba:	b014      	add	sp, #80	; 0x50
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	46c0      	nop			; (mov r8, r8)
 80040c0:	fffffedf 	.word	0xfffffedf
 80040c4:	fbffffff 	.word	0xfbffffff

080040c8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b094      	sub	sp, #80	; 0x50
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80040d0:	204e      	movs	r0, #78	; 0x4e
 80040d2:	183b      	adds	r3, r7, r0
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	215c      	movs	r1, #92	; 0x5c
 80040d8:	5a52      	ldrh	r2, [r2, r1]
 80040da:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2280      	movs	r2, #128	; 0x80
 80040e0:	589b      	ldr	r3, [r3, r2]
 80040e2:	2b22      	cmp	r3, #34	; 0x22
 80040e4:	d000      	beq.n	80040e8 <UART_RxISR_16BIT+0x20>
 80040e6:	e0ba      	b.n	800425e <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	214c      	movs	r1, #76	; 0x4c
 80040ee:	187b      	adds	r3, r7, r1
 80040f0:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80040f2:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f8:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 80040fa:	187b      	adds	r3, r7, r1
 80040fc:	183a      	adds	r2, r7, r0
 80040fe:	881b      	ldrh	r3, [r3, #0]
 8004100:	8812      	ldrh	r2, [r2, #0]
 8004102:	4013      	ands	r3, r2
 8004104:	b29a      	uxth	r2, r3
 8004106:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004108:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800410e:	1c9a      	adds	r2, r3, #2
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	225a      	movs	r2, #90	; 0x5a
 8004118:	5a9b      	ldrh	r3, [r3, r2]
 800411a:	b29b      	uxth	r3, r3
 800411c:	3b01      	subs	r3, #1
 800411e:	b299      	uxth	r1, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	225a      	movs	r2, #90	; 0x5a
 8004124:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	225a      	movs	r2, #90	; 0x5a
 800412a:	5a9b      	ldrh	r3, [r3, r2]
 800412c:	b29b      	uxth	r3, r3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d000      	beq.n	8004134 <UART_RxISR_16BIT+0x6c>
 8004132:	e09c      	b.n	800426e <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004134:	f3ef 8310 	mrs	r3, PRIMASK
 8004138:	623b      	str	r3, [r7, #32]
  return(result);
 800413a:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800413c:	647b      	str	r3, [r7, #68]	; 0x44
 800413e:	2301      	movs	r3, #1
 8004140:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004144:	f383 8810 	msr	PRIMASK, r3
}
 8004148:	46c0      	nop			; (mov r8, r8)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4948      	ldr	r1, [pc, #288]	; (8004278 <UART_RxISR_16BIT+0x1b0>)
 8004156:	400a      	ands	r2, r1
 8004158:	601a      	str	r2, [r3, #0]
 800415a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800415c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800415e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004160:	f383 8810 	msr	PRIMASK, r3
}
 8004164:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004166:	f3ef 8310 	mrs	r3, PRIMASK
 800416a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800416c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800416e:	643b      	str	r3, [r7, #64]	; 0x40
 8004170:	2301      	movs	r3, #1
 8004172:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004176:	f383 8810 	msr	PRIMASK, r3
}
 800417a:	46c0      	nop			; (mov r8, r8)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	689a      	ldr	r2, [r3, #8]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2101      	movs	r1, #1
 8004188:	438a      	bics	r2, r1
 800418a:	609a      	str	r2, [r3, #8]
 800418c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800418e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004192:	f383 8810 	msr	PRIMASK, r3
}
 8004196:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2280      	movs	r2, #128	; 0x80
 800419c:	2120      	movs	r1, #32
 800419e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	685a      	ldr	r2, [r3, #4]
 80041b2:	2380      	movs	r3, #128	; 0x80
 80041b4:	041b      	lsls	r3, r3, #16
 80041b6:	4013      	ands	r3, r2
 80041b8:	d018      	beq.n	80041ec <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041ba:	f3ef 8310 	mrs	r3, PRIMASK
 80041be:	617b      	str	r3, [r7, #20]
  return(result);
 80041c0:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80041c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041c4:	2301      	movs	r3, #1
 80041c6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	f383 8810 	msr	PRIMASK, r3
}
 80041ce:	46c0      	nop			; (mov r8, r8)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4928      	ldr	r1, [pc, #160]	; (800427c <UART_RxISR_16BIT+0x1b4>)
 80041dc:	400a      	ands	r2, r1
 80041de:	601a      	str	r2, [r3, #0]
 80041e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041e2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	f383 8810 	msr	PRIMASK, r3
}
 80041ea:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d12f      	bne.n	8004254 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041fa:	f3ef 8310 	mrs	r3, PRIMASK
 80041fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8004200:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004202:	63bb      	str	r3, [r7, #56]	; 0x38
 8004204:	2301      	movs	r3, #1
 8004206:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f383 8810 	msr	PRIMASK, r3
}
 800420e:	46c0      	nop			; (mov r8, r8)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	2110      	movs	r1, #16
 800421c:	438a      	bics	r2, r1
 800421e:	601a      	str	r2, [r3, #0]
 8004220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004222:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	f383 8810 	msr	PRIMASK, r3
}
 800422a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	69db      	ldr	r3, [r3, #28]
 8004232:	2210      	movs	r2, #16
 8004234:	4013      	ands	r3, r2
 8004236:	2b10      	cmp	r3, #16
 8004238:	d103      	bne.n	8004242 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2210      	movs	r2, #16
 8004240:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2258      	movs	r2, #88	; 0x58
 8004246:	5a9a      	ldrh	r2, [r3, r2]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	0011      	movs	r1, r2
 800424c:	0018      	movs	r0, r3
 800424e:	f7ff f9f1 	bl	8003634 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004252:	e00c      	b.n	800426e <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	0018      	movs	r0, r3
 8004258:	f7fc fad0 	bl	80007fc <HAL_UART_RxCpltCallback>
}
 800425c:	e007      	b.n	800426e <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	699a      	ldr	r2, [r3, #24]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2108      	movs	r1, #8
 800426a:	430a      	orrs	r2, r1
 800426c:	619a      	str	r2, [r3, #24]
}
 800426e:	46c0      	nop			; (mov r8, r8)
 8004270:	46bd      	mov	sp, r7
 8004272:	b014      	add	sp, #80	; 0x50
 8004274:	bd80      	pop	{r7, pc}
 8004276:	46c0      	nop			; (mov r8, r8)
 8004278:	fffffedf 	.word	0xfffffedf
 800427c:	fbffffff 	.word	0xfbffffff

08004280 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004288:	46c0      	nop			; (mov r8, r8)
 800428a:	46bd      	mov	sp, r7
 800428c:	b002      	add	sp, #8
 800428e:	bd80      	pop	{r7, pc}

08004290 <__libc_init_array>:
 8004290:	b570      	push	{r4, r5, r6, lr}
 8004292:	2600      	movs	r6, #0
 8004294:	4d0c      	ldr	r5, [pc, #48]	; (80042c8 <__libc_init_array+0x38>)
 8004296:	4c0d      	ldr	r4, [pc, #52]	; (80042cc <__libc_init_array+0x3c>)
 8004298:	1b64      	subs	r4, r4, r5
 800429a:	10a4      	asrs	r4, r4, #2
 800429c:	42a6      	cmp	r6, r4
 800429e:	d109      	bne.n	80042b4 <__libc_init_array+0x24>
 80042a0:	2600      	movs	r6, #0
 80042a2:	f000 f821 	bl	80042e8 <_init>
 80042a6:	4d0a      	ldr	r5, [pc, #40]	; (80042d0 <__libc_init_array+0x40>)
 80042a8:	4c0a      	ldr	r4, [pc, #40]	; (80042d4 <__libc_init_array+0x44>)
 80042aa:	1b64      	subs	r4, r4, r5
 80042ac:	10a4      	asrs	r4, r4, #2
 80042ae:	42a6      	cmp	r6, r4
 80042b0:	d105      	bne.n	80042be <__libc_init_array+0x2e>
 80042b2:	bd70      	pop	{r4, r5, r6, pc}
 80042b4:	00b3      	lsls	r3, r6, #2
 80042b6:	58eb      	ldr	r3, [r5, r3]
 80042b8:	4798      	blx	r3
 80042ba:	3601      	adds	r6, #1
 80042bc:	e7ee      	b.n	800429c <__libc_init_array+0xc>
 80042be:	00b3      	lsls	r3, r6, #2
 80042c0:	58eb      	ldr	r3, [r5, r3]
 80042c2:	4798      	blx	r3
 80042c4:	3601      	adds	r6, #1
 80042c6:	e7f2      	b.n	80042ae <__libc_init_array+0x1e>
 80042c8:	08004338 	.word	0x08004338
 80042cc:	08004338 	.word	0x08004338
 80042d0:	08004338 	.word	0x08004338
 80042d4:	0800433c 	.word	0x0800433c

080042d8 <memset>:
 80042d8:	0003      	movs	r3, r0
 80042da:	1882      	adds	r2, r0, r2
 80042dc:	4293      	cmp	r3, r2
 80042de:	d100      	bne.n	80042e2 <memset+0xa>
 80042e0:	4770      	bx	lr
 80042e2:	7019      	strb	r1, [r3, #0]
 80042e4:	3301      	adds	r3, #1
 80042e6:	e7f9      	b.n	80042dc <memset+0x4>

080042e8 <_init>:
 80042e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ea:	46c0      	nop			; (mov r8, r8)
 80042ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ee:	bc08      	pop	{r3}
 80042f0:	469e      	mov	lr, r3
 80042f2:	4770      	bx	lr

080042f4 <_fini>:
 80042f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042f6:	46c0      	nop			; (mov r8, r8)
 80042f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042fa:	bc08      	pop	{r3}
 80042fc:	469e      	mov	lr, r3
 80042fe:	4770      	bx	lr
